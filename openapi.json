{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Kubermatic Kubernetes Platform API",
    "description" : "This spec describes possible operations which can be made against the Kubermatic Kubernetes Platform API.",
    "version" : "2.21"
  },
  "servers" : [ {
    "url" : "/"
  } ],
  "security" : [ {
    "api_key" : [ ]
  } ],
  "paths" : {
    "/api/projects/{project_id}/clusters/{cluster_id}/sshkeys/{key_id}" : {
      "delete" : {
        "tags" : [ "project" ],
        "description" : "Unassignes an ssh key from the given cluster",
        "operationId" : "detachSSHKeyFromClusterV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "key_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "KeyID"
          },
          "x-go-name" : "KeyID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/addonconfigs" : {
      "get" : {
        "summary" : "Returns all available addon configs.",
        "operationId" : "listAddonConfigs",
        "responses" : {
          "200" : {
            "description" : "AddonConfig",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddonConfig"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/addonconfigs/{addon_id}" : {
      "get" : {
        "summary" : "Returns specified addon config.",
        "operationId" : "getAddonConfig",
        "parameters" : [ {
          "name" : "addon_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "AddonID"
          },
          "x-go-name" : "AddonID"
        } ],
        "responses" : {
          "200" : {
            "description" : "AddonConfig",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddonConfig"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/addons" : {
      "post" : {
        "tags" : [ "addon" ],
        "description" : "Lists names of addons that can be configured inside the user clusters",
        "operationId" : "listAccessibleAddons",
        "responses" : {
          "200" : {
            "description" : "AccessibleAddons",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessibleAddons"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin" : {
      "get" : {
        "tags" : [ "admin" ],
        "summary" : "Returns list of admin users.",
        "operationId" : "getAdmins",
        "responses" : {
          "200" : {
            "description" : "Admin",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Admin"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "admin" ],
        "summary" : "Allows setting and clearing admin role for users.",
        "operationId" : "setAdmin",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Admin"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Admin",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Admin"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v1/admin/admission/plugins" : {
      "get" : {
        "tags" : [ "admin" ],
        "summary" : "Returns all admission plugins from the CRDs.",
        "operationId" : "listAdmissionPlugins",
        "responses" : {
          "200" : {
            "description" : "AdmissionPlugin",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AdmissionPlugin"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/admission/plugins/{name}" : {
      "get" : {
        "tags" : [ "admin" ],
        "summary" : "Gets the admission plugin.",
        "operationId" : "getAdmissionPlugin",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "x-go-name" : "Name"
        } ],
        "responses" : {
          "200" : {
            "description" : "AdmissionPlugin",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdmissionPlugin"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "admin" ],
        "summary" : "Deletes the admission plugin.",
        "operationId" : "deleteAdmissionPlugin",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "x-go-name" : "Name"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "admin" ],
        "summary" : "Updates the admission plugin.",
        "operationId" : "updateAdmissionPlugin",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "x-go-name" : "Name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdmissionPlugin"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "AdmissionPlugin",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdmissionPlugin"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v1/admin/metering/configurations" : {
      "put" : {
        "tags" : [ "admin" ],
        "description" : "Configures KKP metering tool. Only available in Kubermatic Enterprise Edition",
        "operationId" : "createOrUpdateMeteringConfigurations",
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/metering/configurations/reports" : {
      "get" : {
        "tags" : [ "admin" ],
        "description" : "Lists report configurations for KKP metering tool. Only available in Kubermatic Enterprise Edition",
        "operationId" : "listMeteringReportConfigurations",
        "responses" : {
          "200" : {
            "description" : "MeteringReportConfiguration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MeteringReportConfiguration"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/metering/configurations/reports/{name}" : {
      "get" : {
        "tags" : [ "admin" ],
        "description" : "Gets report configuration for KKP metering tool. Only available in Kubermatic Enterprise Edition",
        "operationId" : "getMeteringReportConfiguration",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "x-go-name" : "Name"
        } ],
        "responses" : {
          "200" : {
            "description" : "MeteringReportConfiguration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MeteringReportConfiguration"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "admin" ],
        "description" : "Updates existing report configuration for KKP metering tool. Only available in Kubermatic Enterprise Edition",
        "operationId" : "updateMeteringReportConfiguration",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "x-go-name" : "Name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/reports_name_body"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      },
      "post" : {
        "tags" : [ "admin" ],
        "description" : "Creates report configuration for KKP metering tool. Only available in Kubermatic Enterprise Edition",
        "operationId" : "createMeteringReportConfiguration",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "x-go-name" : "Name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/reports_name_body_1"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      },
      "delete" : {
        "tags" : [ "admin" ],
        "description" : "Removes report configuration for KKP metering tool. Only available in Kubermatic Enterprise Edition",
        "operationId" : "deleteMeteringReportConfiguration",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "x-go-name" : "Name"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/metering/credentials" : {
      "put" : {
        "tags" : [ "admin" ],
        "description" : "Creates or updates the metering tool credentials. Only available in Kubermatic Enterprise Edition",
        "operationId" : "createOrUpdateMeteringCredentials",
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/metering/reports" : {
      "get" : {
        "tags" : [ "metering", "reports" ],
        "description" : "List metering reports. Only available in Kubermatic Enterprise Edition",
        "operationId" : "listMeteringReports",
        "parameters" : [ {
          "name" : "start_after",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "StartAfter"
          },
          "x-go-name" : "StartAfter"
        }, {
          "name" : "max_keys",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "MaxKeys"
          },
          "x-go-name" : "MaxKeys"
        }, {
          "name" : "configuration_name",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ConfigurationName"
          },
          "x-go-name" : "ConfigurationName"
        } ],
        "responses" : {
          "200" : {
            "description" : "MeteringReport",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MeteringReport"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/metering/reports/{report_name}" : {
      "get" : {
        "tags" : [ "metering", "report" ],
        "description" : "Download a specific metering report. Provides an S3 pre signed URL valid for 1 hour. Only available in Kubermatic Enterprise Edition",
        "operationId" : "getMeteringReport",
        "parameters" : [ {
          "name" : "report_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ReportName"
          },
          "x-go-name" : "ReportName"
        }, {
          "name" : "configuration_name",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ConfigurationName"
          },
          "x-go-name" : "ConfigurationName"
        } ],
        "responses" : {
          "200" : {
            "description" : "MeteringReportURL",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MeteringReportURL"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "metering", "report" ],
        "description" : "Removes a specific metering report. Only available in Kubermatic Enterprise Edition",
        "operationId" : "deleteMeteringReport",
        "parameters" : [ {
          "name" : "report_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ReportName"
          },
          "x-go-name" : "ReportName"
        }, {
          "name" : "configuration_name",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ConfigurationName"
          },
          "x-go-name" : "ConfigurationName"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/seeds" : {
      "get" : {
        "tags" : [ "admin" ],
        "summary" : "Returns all seeds from the CRDs.",
        "operationId" : "listSeeds",
        "responses" : {
          "200" : {
            "description" : "Seed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Seed"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "admin" ],
        "summary" : "Creates a new seed object.",
        "operationId" : "createSeed",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/admin_seeds_body"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Seed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Seed"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v1/admin/seeds/{seed_name}" : {
      "get" : {
        "tags" : [ "admin" ],
        "summary" : "Returns the seed object.",
        "operationId" : "getSeed",
        "parameters" : [ {
          "name" : "seed_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "x-go-name" : "Name"
        } ],
        "responses" : {
          "200" : {
            "description" : "Seed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Seed"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "admin" ],
        "summary" : "Deletes the seed CRD object from the Kubermatic.",
        "operationId" : "deleteSeed",
        "parameters" : [ {
          "name" : "seed_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "x-go-name" : "Name"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "admin" ],
        "summary" : "Updates the seed.",
        "operationId" : "updateSeed",
        "parameters" : [ {
          "name" : "seed_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "x-go-name" : "Name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/seeds_seed_name_body"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Seed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Seed"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v1/admin/seeds/{seed_name}/backupdestinations/{backup_destination}" : {
      "delete" : {
        "tags" : [ "admin" ],
        "summary" : "Deletes a backup destination from the Seed.",
        "operationId" : "deleteBackupDestination",
        "parameters" : [ {
          "name" : "seed_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "x-go-name" : "Name"
        }, {
          "name" : "backup_destination",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "BackupDestination"
          },
          "x-go-name" : "BackupDestination"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/settings" : {
      "get" : {
        "tags" : [ "admin" ],
        "summary" : "Gets the global settings.",
        "operationId" : "getKubermaticSettings",
        "responses" : {
          "200" : {
            "description" : "GlobalSettings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlobalSettings"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "admin" ],
        "summary" : "Patches the global settings.",
        "operationId" : "patchKubermaticSettings",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "GlobalSettings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlobalSettings"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Patch"
      }
    },
    "/api/v1/admin/settings/customlinks" : {
      "get" : {
        "tags" : [ "admin" ],
        "summary" : "Gets the custom links.",
        "operationId" : "getKubermaticCustomLinks",
        "responses" : {
          "200" : {
            "description" : "GlobalCustomLinks",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlobalCustomLinks"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admission/plugins/{version}" : {
      "get" : {
        "summary" : "Returns specified addon config.",
        "operationId" : "getAdmissionPlugins",
        "parameters" : [ {
          "name" : "version",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Version"
          },
          "x-go-name" : "Version"
        } ],
        "responses" : {
          "200" : {
            "description" : "AdmissionPluginList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdmissionPluginList"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/dc" : {
      "get" : {
        "tags" : [ "datacenter" ],
        "operationId" : "listDatacenters",
        "responses" : {
          "200" : {
            "description" : "DatacenterList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatacenterList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/dc/{dc}" : {
      "get" : {
        "tags" : [ "datacenter" ],
        "operationId" : "getDatacenter",
        "parameters" : [ {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        } ],
        "responses" : {
          "200" : {
            "description" : "Datacenter",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Datacenter"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/kubeconfig" : {
      "get" : {
        "description" : "Starts OIDC flow and generates kubeconfig, the generated config\ncontains OIDC provider authentication info",
        "operationId" : "createOIDCKubeconfig",
        "parameters" : [ {
          "name" : "cluster_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "project_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "user_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "UserID"
          },
          "x-go-name" : "UserID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Kubeconfig is a clusters kubeconfig",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "integer",
                    "format" : "uint8"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/labels/system" : {
      "get" : {
        "description" : "List restricted system labels",
        "operationId" : "listSystemLabels",
        "responses" : {
          "200" : {
            "description" : "ResourceLabelMap",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceLabelMap"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/me" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Returns information about the current user.",
        "operationId" : "getCurrentUser",
        "responses" : {
          "200" : {
            "description" : "User",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/me/logout" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Adds current authorization bearer token to the blacklist.",
        "description" : "Enforces user to login again with the new token.",
        "operationId" : "logoutCurrentUser",
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/me/settings" : {
      "get" : {
        "tags" : [ "settings" ],
        "summary" : "Returns settings of the current user.",
        "operationId" : "getCurrentUserSettings",
        "responses" : {
          "200" : {
            "description" : "UserSettings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserSettings"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "settings" ],
        "summary" : "Updates settings of the current user.",
        "operationId" : "patchCurrentUserSettings",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "UserSettings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserSettings"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Patch"
      }
    },
    "/api/v1/projects" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Lists projects that an authenticated user is a member of.",
        "operationId" : "listProjects",
        "parameters" : [ {
          "name" : "displayAll",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-go-name" : "DisplayAll"
          },
          "x-go-name" : "DisplayAll"
        } ],
        "responses" : {
          "200" : {
            "description" : "Project",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Project"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "409" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "project" ],
        "summary" : "Creates a brand new project.",
        "description" : "Note that this endpoint can be consumed by every authenticated user.",
        "operationId" : "createProject",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/v1_projects_body"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "Project",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Project"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "409" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v1/projects/{project_id}" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Gets the project with the given ID",
        "operationId" : "getProject",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Project",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Project"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "409" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "project" ],
        "description" : "Updates the given project",
        "operationId" : "updateProject",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Project"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Project",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Project"
                }
              }
            }
          },
          "400" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "404" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "500" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "501" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      },
      "delete" : {
        "tags" : [ "project" ],
        "summary" : "Deletes the project with the given ID.",
        "operationId" : "deleteProject",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/clusters" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Lists clusters for the specified project.",
        "operationId" : "listClustersForProject",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        } ],
        "responses" : {
          "200" : {
            "description" : "ClusterList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterList"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Lists clusters for the specified project and data center.",
        "operationId" : "listClusters",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        } ],
        "responses" : {
          "200" : {
            "description" : "ClusterList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterList"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "project" ],
        "summary" : "Creates a cluster for the given project.",
        "operationId" : "createCluster",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateClusterSpec"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "Cluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Cluster"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Gets the cluster with the given name",
        "operationId" : "getCluster",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Cluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Cluster"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "project" ],
        "description" : "Deletes the specified cluster",
        "operationId" : "deleteCluster",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "DeleteVolumes",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "DeleteLoadBalancers",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "project" ],
        "summary" : "Patches the given cluster using JSON Merge Patch method (https://tools.ietf.org/html/rfc7396).",
        "operationId" : "patchCluster",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Cluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Cluster"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Patch"
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/addons" : {
      "get" : {
        "tags" : [ "addon" ],
        "description" : "Lists addons that belong to the given cluster",
        "operationId" : "listAddons",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Addon",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Addon"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "addon" ],
        "description" : "Creates an addon that will belong to the given cluster",
        "operationId" : "createAddon",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Addon"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "Addon",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Addon"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/addons/{addon_id}" : {
      "get" : {
        "tags" : [ "addon" ],
        "summary" : "Gets an addon that is assigned to the given cluster.",
        "operationId" : "getAddon",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "addon_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "AddonID"
          },
          "x-go-name" : "AddonID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Addon",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Addon"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "addon" ],
        "summary" : "Deletes the given addon that belongs to the cluster.",
        "operationId" : "deleteAddon",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "addon_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "AddonID"
          },
          "x-go-name" : "AddonID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "addon" ],
        "summary" : "Patches an addon that is assigned to the given cluster.",
        "operationId" : "patchAddon",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "addon_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "AddonID"
          },
          "x-go-name" : "AddonID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Addon"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Addon",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Addon"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/bindings" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "List role binding",
        "operationId" : "listRoleBinding",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "RoleBinding",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RoleBinding"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/clusterbindings" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "List cluster role binding",
        "operationId" : "listClusterRoleBinding",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "ClusterRoleBinding",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ClusterRoleBinding"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/clusterrolenames" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Lists all ClusterRoles",
        "operationId" : "listClusterRoleNames",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "ClusterRoleName",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ClusterRoleName"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/clusterroles" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Lists all ClusterRoles",
        "operationId" : "listClusterRole",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "ClusterRole",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ClusterRole"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "project" ],
        "description" : "Creates cluster role",
        "operationId" : "createClusterRole",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ClusterRole"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "ClusterRole",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterRole"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/clusterroles/{role_id}" : {
      "delete" : {
        "tags" : [ "project" ],
        "description" : "Delete the cluster role with the given name",
        "operationId" : "deleteClusterRole",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "role_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "RoleID"
          },
          "x-go-name" : "RoleID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "project" ],
        "description" : "Patch the cluster role with the given name",
        "operationId" : "patchClusterRole",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "role_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "RoleID"
          },
          "x-go-name" : "RoleID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "ClusterRole",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterRole"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Patch"
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/clusterroles/{role_id}/clusterbindings" : {
      "post" : {
        "tags" : [ "project" ],
        "description" : "Binds user to cluster role",
        "operationId" : "bindUserToClusterRole",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "role_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "RoleID"
          },
          "x-go-name" : "RoleID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ClusterRoleUser"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "ClusterRoleBinding",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterRoleBinding"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      },
      "delete" : {
        "tags" : [ "project" ],
        "description" : "Unbinds user from cluster role binding",
        "operationId" : "unbindUserFromClusterRoleBinding",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "role_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "RoleID"
          },
          "x-go-name" : "RoleID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ClusterRoleUser"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "ClusterRoleBinding",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterRoleBinding"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/events" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Gets the events related to the specified cluster.",
        "operationId" : "getClusterEvents",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Type"
          },
          "x-go-name" : "Type"
        } ],
        "responses" : {
          "200" : {
            "description" : "Event",
            "content" : {
              "application/yaml" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/yaml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/health" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Returns the cluster's component health status",
        "operationId" : "getClusterHealth",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "ClusterHealth",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterHealth"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/installableaddons" : {
      "get" : {
        "tags" : [ "addon" ],
        "description" : "Lists names of addons that can be installed inside the user cluster",
        "operationId" : "listInstallableAddons",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "AccessibleAddons",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessibleAddons"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/kubeconfig" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Gets the kubeconfig for the specified cluster.",
        "operationId" : "getClusterKubeconfig",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Kubeconfig is a clusters kubeconfig",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "integer",
                    "format" : "uint8"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/metrics" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Gets cluster metrics",
        "operationId" : "getClusterMetrics",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "ClusterMetrics",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterMetrics"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/namespaces" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Lists all namespaces in the cluster",
        "operationId" : "listNamespace",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Namespace",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Namespace"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/nodedeployments" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Lists node deployments that belong to the given cluster",
        "operationId" : "listNodeDeployments",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "NodeDeployment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NodeDeployment"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "project" ],
        "description" : "Creates a node deployment that will belong to the given cluster",
        "operationId" : "createNodeDeployment",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NodeDeployment"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "NodeDeployment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NodeDeployment"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/nodedeployments/{nodedeployment_id}" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Gets a node deployment that is assigned to the given cluster.",
        "operationId" : "getNodeDeployment",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "nodedeployment_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "NodeDeploymentID"
          },
          "x-go-name" : "NodeDeploymentID"
        } ],
        "responses" : {
          "200" : {
            "description" : "NodeDeployment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NodeDeployment"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "project" ],
        "summary" : "Deletes the given node deployment that belongs to the cluster.",
        "operationId" : "deleteNodeDeployment",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "nodedeployment_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "NodeDeploymentID"
          },
          "x-go-name" : "NodeDeploymentID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "project" ],
        "description" : "Patches a node deployment that is assigned to the given cluster. Please note that at the moment only\nnode deployment's spec can be updated by a patch, no other fields can be changed using this endpoint.",
        "operationId" : "patchNodeDeployment",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "nodedeployment_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "NodeDeploymentID"
          },
          "x-go-name" : "NodeDeploymentID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "NodeDeployment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NodeDeployment"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Patch"
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/nodedeployments/{nodedeployment_id}/nodes" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Lists nodes that belong to the given node deployment.",
        "operationId" : "listNodeDeploymentNodes",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "nodedeployment_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "NodeDeploymentID"
          },
          "x-go-name" : "NodeDeploymentID"
        }, {
          "name" : "hideInitialConditions",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-go-name" : "HideInitialConditions"
          },
          "x-go-name" : "HideInitialConditions"
        } ],
        "responses" : {
          "200" : {
            "description" : "Node",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Node"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/nodedeployments/{nodedeployment_id}/nodes/events" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Lists node deployment events. If query parameter `type` is set to `warning` then only warning events are retrieved.",
        "description" : "If the value is 'normal' then normal events are returned. If the query parameter is missing method returns all events.",
        "operationId" : "listNodeDeploymentNodesEvents",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Type"
          },
          "x-go-name" : "Type"
        }, {
          "name" : "nodedeployment_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "NodeDeploymentID"
          },
          "x-go-name" : "NodeDeploymentID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Event",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/nodedeployments/{nodedeployment_id}/nodes/metrics" : {
      "get" : {
        "tags" : [ "metric" ],
        "summary" : "Lists metrics that belong to the given node deployment.",
        "operationId" : "listNodeDeploymentMetrics",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "nodedeployment_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "NodeDeploymentID"
          },
          "x-go-name" : "NodeDeploymentID"
        } ],
        "responses" : {
          "200" : {
            "description" : "NodeMetric",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NodeMetric"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/nodes/upgrades" : {
      "put" : {
        "tags" : [ "project" ],
        "description" : "Upgrades node deployments in a cluster",
        "operationId" : "upgradeClusterNodeDeployments",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MasterVersion"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/nodes/{node_id}" : {
      "delete" : {
        "tags" : [ "project" ],
        "summary" : "Deprecated:\nDeletes the given node that belongs to the cluster.",
        "description" : "This endpoint is deprecated, please create a Node Deployment instead.",
        "operationId" : "deleteNodeForClusterLegacy",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "node_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "NodeID"
          },
          "x-go-name" : "NodeID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/oidckubeconfig" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Gets the kubeconfig for the specified cluster with oidc authentication.",
        "operationId" : "getOidcClusterKubeconfig",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Kubeconfig is a clusters kubeconfig",
            "content" : {
              "application/yaml" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "integer",
                    "format" : "uint8"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/yaml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/alibaba/instancetypes" : {
      "get" : {
        "tags" : [ "alibaba" ],
        "description" : "Lists available Alibaba Instance Types",
        "operationId" : "listAlibabaInstanceTypesNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "Region",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "AlibabaInstanceTypeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AlibabaInstanceTypeList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/alibaba/zones" : {
      "get" : {
        "tags" : [ "alibaba" ],
        "description" : "Lists available Alibaba Instance Types",
        "operationId" : "listAlibabaZonesNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "Region",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "AlibabaZoneList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AlibabaZoneList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/aws/sizes" : {
      "get" : {
        "tags" : [ "aws" ],
        "description" : "Lists available AWS sizes",
        "operationId" : "listAWSSizesNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "AWSSizeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AWSSizeList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/aws/subnets" : {
      "get" : {
        "tags" : [ "aws" ],
        "description" : "Lists available AWS subnets",
        "operationId" : "listAWSSubnetsNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "AWSSubnetList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AWSSubnetList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/azure/availabilityzones" : {
      "get" : {
        "tags" : [ "azure" ],
        "description" : "Lists available VM availability zones in an Azure region",
        "operationId" : "listAzureAvailabilityZonesNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "SKUName",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "AzureAvailabilityZonesList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AzureAvailabilityZonesList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/azure/sizes" : {
      "get" : {
        "tags" : [ "azure" ],
        "description" : "Lists available VM sizes in an Azure region",
        "operationId" : "listAzureSizesNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "AzureSizeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AzureSizeList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/digitalocean/sizes" : {
      "get" : {
        "tags" : [ "digitalocean" ],
        "description" : "Lists sizes from digitalocean",
        "operationId" : "listDigitaloceanSizesNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "DigitaloceanSizeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DigitaloceanSizeList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/gcp/disktypes" : {
      "get" : {
        "tags" : [ "gcp" ],
        "description" : "Lists disk types from GCP",
        "operationId" : "listGCPDiskTypesNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "Zone",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "GCPDiskTypeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GCPDiskTypeList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/gcp/networks" : {
      "get" : {
        "tags" : [ "gcp" ],
        "description" : "Lists available GCP networks",
        "operationId" : "listGCPNetworksNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "GCPNetworkList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GCPNetworkList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/gcp/sizes" : {
      "get" : {
        "tags" : [ "gcp" ],
        "description" : "Lists machine sizes from GCP",
        "operationId" : "listGCPSizesNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "Zone",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "GCPMachineSizeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GCPMachineSizeList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/gcp/subnetworks" : {
      "get" : {
        "tags" : [ "gcp" ],
        "description" : "Lists available GCP subnetworks",
        "operationId" : "listGCPSubnetworksNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "Network",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "GCPSubnetworkList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GCPSubnetworkList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/gcp/zones" : {
      "get" : {
        "tags" : [ "gcp" ],
        "description" : "Lists available GCP zones",
        "operationId" : "listGCPZonesNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "GCPZoneList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GCPZoneList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/hetzner/sizes" : {
      "get" : {
        "tags" : [ "hetzner" ],
        "description" : "Lists sizes from hetzner",
        "operationId" : "listHetznerSizesNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "HetznerSizeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HetznerSizeList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/openstack/availabilityzones" : {
      "get" : {
        "tags" : [ "openstack" ],
        "description" : "Lists availability zones from openstack",
        "operationId" : "listOpenstackAvailabilityZonesNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "OpenstackAvailabilityZone",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OpenstackAvailabilityZone"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/openstack/networks" : {
      "get" : {
        "tags" : [ "openstack" ],
        "description" : "Lists networks from openstack",
        "operationId" : "listOpenstackNetworksNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "OpenstackNetwork",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OpenstackNetwork"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/openstack/securitygroups" : {
      "get" : {
        "tags" : [ "openstack" ],
        "description" : "Lists security groups from openstack",
        "operationId" : "listOpenstackSecurityGroupsNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "OpenstackSecurityGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OpenstackSecurityGroup"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/openstack/sizes" : {
      "get" : {
        "tags" : [ "openstack" ],
        "description" : "Lists sizes from openstack",
        "operationId" : "listOpenstackSizesNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "OpenstackSize",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OpenstackSize"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/openstack/subnets" : {
      "get" : {
        "tags" : [ "openstack" ],
        "description" : "Lists subnets from openstack",
        "operationId" : "listOpenstackSubnetsNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "network_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "NetworkID"
          },
          "x-go-name" : "NetworkID"
        } ],
        "responses" : {
          "200" : {
            "description" : "OpenstackSubnet",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OpenstackSubnet"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/openstack/tenants" : {
      "get" : {
        "tags" : [ "openstack" ],
        "description" : "Lists tenants from openstack",
        "operationId" : "listOpenstackTenantsNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "OpenstackTenant",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OpenstackTenant"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/packet/sizes" : {
      "get" : {
        "tags" : [ "packet" ],
        "description" : "Lists sizes from packet",
        "operationId" : "listPacketSizesNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "PacketSizeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PacketSizeList"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/vsphere/folders" : {
      "get" : {
        "tags" : [ "vsphere" ],
        "description" : "Lists folders from vsphere datacenter",
        "operationId" : "listVSphereFoldersNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "VSphereFolder",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/VSphereFolder"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/vsphere/networks" : {
      "get" : {
        "tags" : [ "vsphere" ],
        "description" : "Lists networks from vsphere datacenter",
        "operationId" : "listVSphereNetworksNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "VSphereNetwork",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/VSphereNetwork"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/rolenames" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Lists all Role names with namespaces",
        "operationId" : "listRoleNames",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "RoleName",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RoleName"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/roles" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Lists all Roles",
        "operationId" : "listRole",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "project" ],
        "description" : "Creates cluster role",
        "operationId" : "createRole",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Role"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "Role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Role"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/roles/{namespace}/{role_id}" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Gets the role with the given name",
        "operationId" : "getRole",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "role_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "RoleID"
          },
          "x-go-name" : "RoleID"
        }, {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Namespace"
          },
          "x-go-name" : "Namespace"
        } ],
        "responses" : {
          "200" : {
            "description" : "Role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Role"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "project" ],
        "description" : "Delete the cluster role with the given name",
        "operationId" : "deleteRole",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "role_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "RoleID"
          },
          "x-go-name" : "RoleID"
        }, {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Namespace"
          },
          "x-go-name" : "Namespace"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "project" ],
        "description" : "Patch the role with the given name",
        "operationId" : "patchRole",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "role_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "RoleID"
          },
          "x-go-name" : "RoleID"
        }, {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Namespace"
          },
          "x-go-name" : "Namespace"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Role"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Patch"
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/roles/{namespace}/{role_id}/bindings" : {
      "post" : {
        "tags" : [ "project" ],
        "description" : "Binds user to the role",
        "operationId" : "bindUserToRole",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "role_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "RoleID"
          },
          "x-go-name" : "RoleID"
        }, {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Namespace"
          },
          "x-go-name" : "Namespace"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RoleUser"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "RoleBinding",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RoleBinding"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      },
      "delete" : {
        "tags" : [ "project" ],
        "description" : "Unbinds user from the role binding",
        "operationId" : "unbindUserFromRoleBinding",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "role_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "RoleID"
          },
          "x-go-name" : "RoleID"
        }, {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Namespace"
          },
          "x-go-name" : "Namespace"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RoleUser"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "RoleBinding",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RoleBinding"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/roles/{role_id}" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Gets the cluster role with the given name",
        "operationId" : "getClusterRole",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "role_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "RoleID"
          },
          "x-go-name" : "RoleID"
        } ],
        "responses" : {
          "200" : {
            "description" : "ClusterRole",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterRole"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/sshkeys" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Lists ssh keys that are assigned to the cluster\nThe returned collection is sorted by creation timestamp.",
        "operationId" : "listSSHKeysAssignedToCluster",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "SSHKey",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SSHKey"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/sshkeys/{key_id}" : {
      "put" : {
        "tags" : [ "project" ],
        "description" : "Assigns an existing ssh key to the given cluster",
        "operationId" : "assignSSHKeyToCluster",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "key_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "KeyID"
          },
          "x-go-name" : "KeyID"
        } ],
        "responses" : {
          "201" : {
            "description" : "SSHKey",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SSHKey"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "project" ],
        "description" : "Unassignes an ssh key from the given cluster",
        "operationId" : "detachSSHKeyFromCluster",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "key_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "KeyID"
          },
          "x-go-name" : "KeyID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/token" : {
      "put" : {
        "tags" : [ "project" ],
        "description" : "Revokes the current admin token",
        "operationId" : "revokeClusterAdminToken",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/upgrades" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Gets possible cluster upgrades",
        "operationId" : "getClusterUpgrades",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "MasterVersion",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MasterVersion"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/viewertoken" : {
      "put" : {
        "tags" : [ "project" ],
        "description" : "Revokes the current viewer token",
        "operationId" : "revokeClusterViewerToken",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/serviceaccounts" : {
      "get" : {
        "tags" : [ "serviceaccounts" ],
        "description" : "List Service Accounts for the given project",
        "operationId" : "listServiceAccounts",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        } ],
        "responses" : {
          "200" : {
            "description" : "ServiceAccount",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServiceAccount"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "serviceaccounts" ],
        "description" : "Adds the given service account to the given project",
        "operationId" : "addServiceAccountToProject",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServiceAccount"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "ServiceAccount",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceAccount"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v1/projects/{project_id}/serviceaccounts/{serviceaccount_id}" : {
      "put" : {
        "tags" : [ "serviceaccounts" ],
        "description" : "Updates service account for the given project",
        "operationId" : "updateServiceAccount",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "serviceaccount_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ServiceAccountID"
          },
          "x-go-name" : "ServiceAccountID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServiceAccount"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "ServiceAccount",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceAccount"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      },
      "delete" : {
        "tags" : [ "serviceaccounts" ],
        "description" : "Deletes service account for the given project",
        "operationId" : "deleteServiceAccount",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "serviceaccount_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ServiceAccountID"
          },
          "x-go-name" : "ServiceAccountID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/serviceaccounts/{serviceaccount_id}/tokens" : {
      "get" : {
        "tags" : [ "tokens" ],
        "description" : "List tokens for the given service account",
        "operationId" : "listServiceAccountTokens",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "serviceaccount_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ServiceAccountID"
          },
          "x-go-name" : "ServiceAccountID"
        } ],
        "responses" : {
          "200" : {
            "description" : "PublicServiceAccountToken",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PublicServiceAccountToken"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "tokens" ],
        "description" : "Generates a token for the given service account",
        "operationId" : "addTokenToServiceAccount",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "serviceaccount_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ServiceAccountID"
          },
          "x-go-name" : "ServiceAccountID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServiceAccountToken"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "ServiceAccountToken",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceAccountToken"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v1/projects/{project_id}/serviceaccounts/{serviceaccount_id}/tokens/{token_id}" : {
      "put" : {
        "tags" : [ "tokens" ],
        "description" : "Updates and regenerates the token",
        "operationId" : "updateServiceAccountToken",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "serviceaccount_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ServiceAccountID"
          },
          "x-go-name" : "ServiceAccountID"
        }, {
          "name" : "token_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "TokenID"
          },
          "x-go-name" : "TokenID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PublicServiceAccountToken"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "ServiceAccountToken",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceAccountToken"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      },
      "delete" : {
        "tags" : [ "tokens" ],
        "description" : "Deletes the token",
        "operationId" : "deleteServiceAccountToken",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "serviceaccount_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ServiceAccountID"
          },
          "x-go-name" : "ServiceAccountID"
        }, {
          "name" : "token_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "TokenID"
          },
          "x-go-name" : "TokenID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "tokens" ],
        "description" : "Patches the token name",
        "operationId" : "patchServiceAccountToken",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "serviceaccount_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ServiceAccountID"
          },
          "x-go-name" : "ServiceAccountID"
        }, {
          "name" : "token_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "TokenID"
          },
          "x-go-name" : "TokenID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "uint8"
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "PublicServiceAccountToken",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PublicServiceAccountToken"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v1/projects/{project_id}/sshkeys" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Lists SSH Keys that belong to the given project.",
        "description" : "The returned collection is sorted by creation timestamp.",
        "operationId" : "listSSHKeys",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        } ],
        "responses" : {
          "200" : {
            "description" : "SSHKey",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SSHKey"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "project" ],
        "summary" : "Adds the given SSH key to the specified project.",
        "operationId" : "createSSHKey",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SSHKey"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "SSHKey",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SSHKey"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Key"
      }
    },
    "/api/v1/projects/{project_id}/sshkeys/{key_id}" : {
      "delete" : {
        "tags" : [ "project" ],
        "summary" : "Removes the given SSH Key from the system.",
        "operationId" : "deleteSSHKey",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "key_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "SSHKeyID"
          },
          "x-go-name" : "SSHKeyID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/users" : {
      "get" : {
        "tags" : [ "users" ],
        "description" : "Get list of users for the given project",
        "operationId" : "getUsersForProject",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        } ],
        "responses" : {
          "200" : {
            "description" : "User",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "users" ],
        "description" : "Adds the given user to the given project",
        "operationId" : "addUserToProject",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "User",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v1/projects/{project_id}/users/{user_id}" : {
      "put" : {
        "tags" : [ "users" ],
        "description" : "Changes membership of the given user for the given project",
        "operationId" : "editUserInProject",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "user_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "UserID"
          },
          "x-go-name" : "UserID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "User",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      },
      "delete" : {
        "tags" : [ "users" ],
        "description" : "Removes the given member from the project",
        "operationId" : "deleteUserFromProject",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "user_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "UserID"
          },
          "x-go-name" : "UserID"
        } ],
        "responses" : {
          "200" : {
            "description" : "User",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/alibaba/instancetypes" : {
      "get" : {
        "tags" : [ "alibaba" ],
        "summary" : "Lists available Alibaba instance types.",
        "operationId" : "listAlibabaInstanceTypes",
        "parameters" : [ {
          "name" : "AccessKeyID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "AccessKeySecret",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Region",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "AlibabaInstanceTypeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AlibabaInstanceTypeList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/alibaba/vswitches" : {
      "get" : {
        "tags" : [ "alibaba" ],
        "summary" : "Lists available Alibaba vSwitches.",
        "operationId" : "listAlibabaVSwitches",
        "responses" : {
          "200" : {
            "description" : "AlibabaVSwitchList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AlibabaVSwitchList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/alibaba/zones" : {
      "get" : {
        "tags" : [ "alibaba" ],
        "summary" : "Lists available Alibaba zones.",
        "operationId" : "listAlibabaZones",
        "parameters" : [ {
          "name" : "AccessKeyID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "AccessKeySecret",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Region",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "AlibabaZoneList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AlibabaZoneList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/anexia/templates" : {
      "get" : {
        "tags" : [ "anexia" ],
        "description" : "Lists templates from anexia",
        "operationId" : "listAnexiaTemplates",
        "parameters" : [ {
          "name" : "Token",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Location",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "AnexiaTemplateList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AnexiaTemplateList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/anexia/vlans" : {
      "get" : {
        "tags" : [ "anexia" ],
        "description" : "Lists vlans from anexia",
        "operationId" : "listAnexiaVlans",
        "parameters" : [ {
          "name" : "Token",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "AnexiaVlanList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AnexiaVlanList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/aws/sizes" : {
      "get" : {
        "tags" : [ "aws" ],
        "summary" : "Lists available AWS sizes.",
        "operationId" : "listAWSSizes",
        "parameters" : [ {
          "name" : "Region",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "architecture",
          "in" : "query",
          "description" : "architecture query parameter. Supports: arm64 and x64 types.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Architecture"
          },
          "x-go-name" : "Architecture"
        } ],
        "responses" : {
          "200" : {
            "description" : "AWSSizeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AWSSizeList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/aws/{dc}/securitygroups" : {
      "get" : {
        "tags" : [ "aws" ],
        "description" : "Lists available AWS Security Groups",
        "operationId" : "listAWSSecurityGroups",
        "parameters" : [ {
          "name" : "AccessKeyID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "SecretAccessKey",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "AssumeRoleARN",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "AssumeRoleExternalID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "VPC",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        } ],
        "responses" : {
          "200" : {
            "description" : "AWSSecurityGroupList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AWSSecurityGroupList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/aws/{dc}/subnets" : {
      "get" : {
        "tags" : [ "aws" ],
        "description" : "Lists available AWS subnets",
        "operationId" : "listAWSSubnets",
        "parameters" : [ {
          "name" : "AccessKeyID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "SecretAccessKey",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "AssumeRoleARN",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "AssumeRoleExternalID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "VPC",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        } ],
        "responses" : {
          "200" : {
            "description" : "AWSSubnetList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AWSSubnetList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/aws/{dc}/vpcs" : {
      "get" : {
        "tags" : [ "aws" ],
        "description" : "Lists available AWS vpc's",
        "operationId" : "listAWSVPCS",
        "parameters" : [ {
          "name" : "AccessKeyID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "SecretAccessKey",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "AssumeRoleARN",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "AssumeRoleExternalID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "VPC",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        } ],
        "responses" : {
          "200" : {
            "description" : "AWSVPCList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AWSVPCList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/azure/availabilityzones" : {
      "get" : {
        "tags" : [ "azure" ],
        "description" : "Lists VM availability zones in an Azure region",
        "operationId" : "listAzureAvailabilityZones",
        "responses" : {
          "200" : {
            "description" : "AzureAvailabilityZonesList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AzureAvailabilityZonesList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/azure/sizes" : {
      "get" : {
        "tags" : [ "azure" ],
        "description" : "Lists available VM sizes in an Azure region",
        "operationId" : "listAzureSizes",
        "parameters" : [ {
          "name" : "SubscriptionID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "TenantID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClientID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClientSecret",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Location",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "AzureSizeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AzureSizeList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/digitalocean/sizes" : {
      "get" : {
        "tags" : [ "digitalocean" ],
        "description" : "Lists sizes from digitalocean",
        "operationId" : "listDigitaloceanSizes",
        "parameters" : [ {
          "name" : "DoToken",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "DigitaloceanSizeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DigitaloceanSizeList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/gcp/disktypes" : {
      "get" : {
        "tags" : [ "gcp" ],
        "description" : "Lists disk types from GCP",
        "operationId" : "listGCPDiskTypes",
        "parameters" : [ {
          "name" : "ServiceAccount",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Zone",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "GCPDiskTypeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GCPDiskTypeList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/gcp/networks" : {
      "get" : {
        "tags" : [ "gcp" ],
        "description" : "Lists networks from GCP",
        "operationId" : "listGCPNetworks",
        "responses" : {
          "200" : {
            "description" : "GCPNetworkList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GCPNetworkList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/gcp/sizes" : {
      "get" : {
        "tags" : [ "gcp" ],
        "description" : "Lists machine sizes from GCP",
        "operationId" : "listGCPSizes",
        "parameters" : [ {
          "name" : "ServiceAccount",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Zone",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "GCPMachineSizeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GCPMachineSizeList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/gcp/{dc}/subnetworks" : {
      "get" : {
        "tags" : [ "gcp" ],
        "description" : "Lists subnetworks from GCP",
        "operationId" : "listGCPSubnetworks",
        "parameters" : [ {
          "name" : "ServiceAccount",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Network",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        } ],
        "responses" : {
          "200" : {
            "description" : "GCPSubnetworkList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GCPSubnetworkList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/gcp/{dc}/zones" : {
      "get" : {
        "tags" : [ "gcp" ],
        "description" : "Lists available GCP zones",
        "operationId" : "listGCPZones",
        "parameters" : [ {
          "name" : "ServiceAccount",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        } ],
        "responses" : {
          "200" : {
            "description" : "GCPZoneList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GCPZoneList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/hetzner/sizes" : {
      "get" : {
        "tags" : [ "hetzner" ],
        "description" : "Lists sizes from hetzner",
        "operationId" : "listHetznerSizes",
        "parameters" : [ {
          "name" : "HetznerToken",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "HetznerSizeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HetznerSizeList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/openstack/availabilityzones" : {
      "get" : {
        "tags" : [ "openstack" ],
        "description" : "Lists availability zones from openstack",
        "operationId" : "listOpenstackAvailabilityZones",
        "parameters" : [ {
          "name" : "Username",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Password",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Domain",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Tenant",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "TenantID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Project",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ProjectID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "DatacenterName",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ApplicationCredentialID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ApplicationCredentialSecret",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "OIDCAuthentication",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OpenstackAvailabilityZone",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OpenstackAvailabilityZone"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/openstack/networks" : {
      "get" : {
        "tags" : [ "openstack" ],
        "description" : "Lists networks from openstack",
        "operationId" : "listOpenstackNetworks",
        "parameters" : [ {
          "name" : "Username",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Password",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Domain",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Tenant",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "TenantID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Project",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ProjectID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "DatacenterName",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ApplicationCredentialID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ApplicationCredentialSecret",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "OIDCAuthentication",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OpenstackNetwork",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OpenstackNetwork"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/openstack/securitygroups" : {
      "get" : {
        "tags" : [ "openstack" ],
        "description" : "Lists security groups from openstack",
        "operationId" : "listOpenstackSecurityGroups",
        "parameters" : [ {
          "name" : "Username",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Password",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Domain",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Tenant",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "TenantID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Project",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ProjectID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "DatacenterName",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ApplicationCredentialID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ApplicationCredentialSecret",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "OIDCAuthentication",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OpenstackSecurityGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OpenstackSecurityGroup"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/openstack/sizes" : {
      "get" : {
        "tags" : [ "openstack" ],
        "description" : "Lists sizes from openstack",
        "operationId" : "listOpenstackSizes",
        "parameters" : [ {
          "name" : "Username",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Password",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Domain",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Tenant",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "TenantID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Project",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ProjectID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "DatacenterName",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ApplicationCredentialID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ApplicationCredentialSecret",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "OIDCAuthentication",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OpenstackSize",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OpenstackSize"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/openstack/subnets" : {
      "get" : {
        "tags" : [ "openstack" ],
        "description" : "Lists subnets from openstack",
        "operationId" : "listOpenstackSubnets",
        "parameters" : [ {
          "name" : "Username",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Password",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Domain",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Tenant",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "TenantID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Project",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ProjectID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "DatacenterName",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ApplicationCredentialID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ApplicationCredentialSecret",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "OIDCAuthentication",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "network_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "NetworkID"
          },
          "x-go-name" : "NetworkID"
        } ],
        "responses" : {
          "200" : {
            "description" : "OpenstackSubnet",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OpenstackSubnet"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/openstack/tenants" : {
      "get" : {
        "tags" : [ "openstack" ],
        "description" : "Lists tenants from openstack",
        "operationId" : "listOpenstackTenants",
        "parameters" : [ {
          "name" : "Username",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Password",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Domain",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "DatacenterName",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ApplicationCredentialID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ApplicationCredentialSecret",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "OIDCAuthentication",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OpenstackTenant",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OpenstackTenant"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/packet/sizes" : {
      "get" : {
        "tags" : [ "packet" ],
        "description" : "Lists sizes from packet",
        "operationId" : "listPacketSizes",
        "parameters" : [ {
          "name" : "apiKey",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "APIKey"
          },
          "x-go-name" : "APIKey"
        }, {
          "name" : "projectID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Credential"
          },
          "x-go-name" : "Credential"
        } ],
        "responses" : {
          "200" : {
            "description" : "PacketSizeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PacketSizeList"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/vsphere/folders" : {
      "get" : {
        "tags" : [ "vsphere" ],
        "description" : "Lists folders from vsphere datacenter",
        "operationId" : "listVSphereFolders",
        "parameters" : [ {
          "name" : "Username",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Password",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "DatacenterName",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "VSphereFolder",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/VSphereFolder"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/vsphere/networks" : {
      "get" : {
        "tags" : [ "vsphere" ],
        "description" : "Lists networks from vsphere datacenter",
        "operationId" : "listVSphereNetworks",
        "parameters" : [ {
          "name" : "Username",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Password",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "DatacenterName",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "VSphereNetwork",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/VSphereNetwork"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/{provider_name}/dc" : {
      "get" : {
        "tags" : [ "datacenter" ],
        "summary" : "Returns all datacenters for the specified provider.",
        "operationId" : "listDCForProvider",
        "parameters" : [ {
          "name" : "provider_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Provider"
          },
          "x-go-name" : "Provider"
        } ],
        "responses" : {
          "200" : {
            "description" : "Datacenter",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Datacenter"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/{provider_name}/dc/{dc}" : {
      "get" : {
        "tags" : [ "datacenter" ],
        "summary" : "Get the datacenter for the specified provider.",
        "operationId" : "getDCForProvider",
        "parameters" : [ {
          "name" : "provider_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Provider"
          },
          "x-go-name" : "Provider"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Datacenter"
          },
          "x-go-name" : "Datacenter"
        } ],
        "responses" : {
          "200" : {
            "description" : "Datacenter",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Datacenter"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/providers/{provider_name}/presets/credentials" : {
      "get" : {
        "tags" : [ "credentials" ],
        "description" : "Lists credential names for the provider",
        "operationId" : "listCredentials",
        "parameters" : [ {
          "name" : "provider_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProviderName"
          },
          "x-go-name" : "ProviderName"
        }, {
          "name" : "datacenter",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Datacenter"
          },
          "x-go-name" : "Datacenter"
        } ],
        "responses" : {
          "200" : {
            "description" : "CredentialList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CredentialList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/seed" : {
      "get" : {
        "tags" : [ "seed" ],
        "operationId" : "listSeedNames",
        "responses" : {
          "200" : {
            "description" : "SeedNamesList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SeedNamesList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/seed/{seed_name}/dc" : {
      "get" : {
        "tags" : [ "datacenter" ],
        "summary" : "Returns all datacenters for the specified seed.",
        "operationId" : "listDCForSeed",
        "parameters" : [ {
          "name" : "seed_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Seed"
          },
          "x-go-name" : "Seed"
        } ],
        "responses" : {
          "200" : {
            "description" : "Datacenter",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Datacenter"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "datacenter" ],
        "summary" : "Create the datacenter for a specified seed.",
        "operationId" : "createDC",
        "parameters" : [ {
          "name" : "seed_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Seed"
          },
          "x-go-name" : "Seed"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/seed_name_dc_body"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "Datacenter",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Datacenter"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v1/seed/{seed_name}/dc/{dc}" : {
      "get" : {
        "tags" : [ "datacenter" ],
        "summary" : "Returns the specified datacenter for the specified seed.",
        "operationId" : "getDCForSeed",
        "parameters" : [ {
          "name" : "seed_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Seed"
          },
          "x-go-name" : "Seed"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        } ],
        "responses" : {
          "200" : {
            "description" : "Datacenter",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Datacenter"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "datacenter" ],
        "summary" : "Update the datacenter. The datacenter spec will be overwritten with the one provided in the request.",
        "operationId" : "updateDC",
        "parameters" : [ {
          "name" : "seed_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Seed"
          },
          "x-go-name" : "Seed"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DCToUpdate"
          },
          "x-go-name" : "DCToUpdate"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/dc_dc_body"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Datacenter",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Datacenter"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      },
      "delete" : {
        "tags" : [ "datacenter" ],
        "summary" : "Delete the datacenter.",
        "operationId" : "deleteDC",
        "parameters" : [ {
          "name" : "seed_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Seed"
          },
          "x-go-name" : "Seed"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "datacenter" ],
        "summary" : "Patch the datacenter.",
        "operationId" : "patchDC",
        "parameters" : [ {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DCToPatch"
          },
          "x-go-name" : "DCToPatch"
        }, {
          "name" : "seed_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Seed"
          },
          "x-go-name" : "Seed"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Datacenter",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Datacenter"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Patch"
      }
    },
    "/api/v1/upgrades/cluster" : {
      "get" : {
        "tags" : [ "versions" ],
        "description" : "Lists all versions which don't result in automatic updates",
        "operationId" : "getMasterVersions",
        "responses" : {
          "200" : {
            "description" : "MasterVersion",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MasterVersion"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/upgrades/node" : {
      "get" : {
        "tags" : [ "versions" ],
        "description" : "Gets possible node upgrades for a specific control plane version",
        "operationId" : "getNodeUpgrades",
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "Type is deprecated and not used anymore.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Type"
          },
          "x-go-name" : "Type"
        }, {
          "name" : "control_plane_version",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ControlPlaneVersion"
          },
          "x-go-name" : "ControlPlaneVersion"
        } ],
        "responses" : {
          "200" : {
            "description" : "MasterVersion",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MasterVersion"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/version" : {
      "get" : {
        "tags" : [ "versions" ],
        "summary" : "Get versions of running Kubermatic components.",
        "operationId" : "getKubermaticVersion",
        "responses" : {
          "200" : {
            "description" : "KubermaticVersions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/KubermaticVersions"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/allowedregistries" : {
      "get" : {
        "tags" : [ "allowedregistry" ],
        "summary" : "List allowed registries.",
        "operationId" : "listAllowedRegistries",
        "responses" : {
          "200" : {
            "description" : "AllowedRegistry",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AllowedRegistry"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "allowedregistry" ],
        "description" : "Creates a allowed registry",
        "operationId" : "createAllowedRegistry",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/wrBody"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "AllowedRegistry",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AllowedRegistry"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/allowedregistries/{allowed_registry}" : {
      "get" : {
        "tags" : [ "allowedregistries" ],
        "description" : "Get allowed registries specified by name",
        "operationId" : "getAllowedRegistry",
        "parameters" : [ {
          "name" : "allowed_registry",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "AllowedRegistryName"
          },
          "x-go-name" : "AllowedRegistryName"
        } ],
        "responses" : {
          "200" : {
            "description" : "AllowedRegistry",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AllowedRegistry"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "allowedregistries" ],
        "summary" : "Deletes the given allowed registry.",
        "operationId" : "deleteAllowedRegistry",
        "parameters" : [ {
          "name" : "allowed_registry",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "AllowedRegistryName"
          },
          "x-go-name" : "AllowedRegistryName"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "allowedregistries" ],
        "description" : "Patch a specified allowed registry",
        "operationId" : "patchAllowedRegistry",
        "parameters" : [ {
          "name" : "allowed_registry",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "AllowedRegistryName"
          },
          "x-go-name" : "AllowedRegistryName"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "ConstraintTemplate",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConstraintTemplate"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Patch"
      }
    },
    "/api/v2/applicationdefinitions" : {
      "get" : {
        "tags" : [ "applications" ],
        "description" : "List ApplicationDefinitions which are available in the KKP installation",
        "operationId" : "listApplicationDefinitions",
        "responses" : {
          "200" : {
            "description" : "ApplicationDefinition",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ApplicationDefinition"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/cni/{cni_plugin_type}/versions" : {
      "get" : {
        "tags" : [ "cniversion" ],
        "description" : "Lists all CNI Plugin versions that are supported for a given CNI plugin type",
        "operationId" : "listVersionsByCNIPlugin",
        "parameters" : [ {
          "name" : "cni_plugin_type",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "CNIPluginType"
          },
          "x-go-name" : "CNIPluginType"
        } ],
        "responses" : {
          "200" : {
            "description" : "CNIVersions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CNIVersions"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/constraints" : {
      "get" : {
        "tags" : [ "constraint" ],
        "summary" : "List default constraint.",
        "operationId" : "listDefaultConstraint",
        "responses" : {
          "200" : {
            "description" : "Constraint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Constraint"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "constraint" ],
        "description" : "Creates default constraint",
        "operationId" : "createDefaultConstraint",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/constraintBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Constraint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Constraint"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/constraints/{constraint_name}" : {
      "get" : {
        "tags" : [ "constraint" ],
        "description" : "Gets an specified default constraint",
        "operationId" : "getDefaultConstraint",
        "parameters" : [ {
          "name" : "constraint_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "x-go-name" : "Name"
        } ],
        "responses" : {
          "200" : {
            "description" : "Constraint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Constraint"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "constraints" ],
        "summary" : "Deletes a specified default constraint.",
        "operationId" : "deleteDefaultConstraint",
        "parameters" : [ {
          "name" : "constraint_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "x-go-name" : "Name"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "constraint" ],
        "description" : "Patch a specified default constraint",
        "operationId" : "patchDefaultConstraint",
        "parameters" : [ {
          "name" : "constraint_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "x-go-name" : "Name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Constraint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Constraint"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Patch"
      }
    },
    "/api/v2/constrainttemplates" : {
      "get" : {
        "tags" : [ "constrainttemplates" ],
        "summary" : "List constraint templates.",
        "operationId" : "listConstraintTemplates",
        "responses" : {
          "200" : {
            "description" : "ConstraintTemplate",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ConstraintTemplate"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "constrainttemplates" ],
        "description" : "Create constraint template",
        "operationId" : "createConstraintTemplate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ctBody"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "ConstraintTemplate",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConstraintTemplate"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/constrainttemplates/{ct_name}" : {
      "get" : {
        "tags" : [ "constrainttemplates" ],
        "description" : "Get constraint templates specified by name",
        "operationId" : "getConstraintTemplate",
        "parameters" : [ {
          "name" : "ct_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "x-go-name" : "Name"
        } ],
        "responses" : {
          "200" : {
            "description" : "ConstraintTemplate",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConstraintTemplate"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "constrainttemplates" ],
        "description" : "Deletes the specified cluster",
        "operationId" : "deleteConstraintTemplate",
        "parameters" : [ {
          "name" : "ct_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "x-go-name" : "Name"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "constrainttemplates" ],
        "description" : "Patch a specified constraint template",
        "operationId" : "patchConstraintTemplate",
        "parameters" : [ {
          "name" : "ct_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "x-go-name" : "Name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "ConstraintTemplate",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConstraintTemplate"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Patch"
      }
    },
    "/api/v2/eks/amitypes" : {
      "get" : {
        "tags" : [ "eks" ],
        "summary" : "Gets the EKS AMI types for node group.",
        "operationId" : "listEKSAMITypes",
        "responses" : {
          "200" : {
            "description" : "EKSAMITypeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EKSAMITypeList"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/eks/capacitytypes" : {
      "get" : {
        "tags" : [ "eks" ],
        "summary" : "Gets the EKS Capacity types for node group.",
        "operationId" : "listEKSCapacityTypes",
        "responses" : {
          "200" : {
            "description" : "EKSCapacityTypeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EKSCapacityTypeList"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/featuregates" : {
      "get" : {
        "tags" : [ "get", "status", "of", "feature" ],
        "description" : "Status of feature gates",
        "operationId" : "gates",
        "responses" : {
          "200" : {
            "description" : "FeatureGates",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FeatureGates"
                }
              }
            }
          },
          "401" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/kubeconfig/secret" : {
      "get" : {
        "description" : "Starts OIDC flow and generates kubeconfig, the generated config\ncontains OIDC provider authentication info. The kubeconfig is stored in the secret.",
        "operationId" : "createOIDCKubeconfigSecret",
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "201" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/presets" : {
      "get" : {
        "tags" : [ "preset" ],
        "description" : "Lists presets",
        "operationId" : "listPresets",
        "parameters" : [ {
          "name" : "disabled",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-go-name" : "Disabled"
          },
          "x-go-name" : "Disabled"
        } ],
        "responses" : {
          "200" : {
            "description" : "PresetList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PresetList"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/presets/{preset_name}" : {
      "delete" : {
        "tags" : [ "preset" ],
        "summary" : "Removes preset.",
        "operationId" : "deletePreset",
        "parameters" : [ {
          "name" : "preset_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "PresetName"
          },
          "x-go-name" : "PresetName"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "404" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/presets/{preset_name}/provider/{provider_name}" : {
      "delete" : {
        "tags" : [ "preset" ],
        "summary" : "Removes selected preset's provider.",
        "operationId" : "deletePresetProvider",
        "parameters" : [ {
          "name" : "preset_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "PresetName"
          },
          "x-go-name" : "PresetName"
        }, {
          "name" : "provider_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProviderName"
          },
          "x-go-name" : "ProviderName"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "404" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/presets/{preset_name}/stats" : {
      "get" : {
        "tags" : [ "preset" ],
        "summary" : "Gets presets stats.",
        "operationId" : "getPresetStats",
        "parameters" : [ {
          "name" : "preset_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "PresetName"
          },
          "x-go-name" : "PresetName"
        } ],
        "responses" : {
          "200" : {
            "description" : "PresetStats",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PresetStats"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "404" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/presets/{preset_name}/status" : {
      "put" : {
        "tags" : [ "preset" ],
        "summary" : "Updates the status of a preset. It can enable or disable it, so that it won't be listed by the list endpoints.",
        "operationId" : "updatePresetStatus",
        "parameters" : [ {
          "name" : "preset_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "PresetName"
          },
          "x-go-name" : "PresetName"
        }, {
          "name" : "provider",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Provider"
          },
          "x-go-name" : "Provider"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/preset_name_status_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/projects/{project_id}/clusters" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Lists clusters for the specified project. If query parameter `show_dm_count` is set to `true` then the endpoint will also return the number of machine deployments of each cluster.",
        "operationId" : "listClustersV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "show_dm_count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-go-name" : "ShowDeploymentMachineCount"
          },
          "x-go-name" : "ShowDeploymentMachineCount"
        } ],
        "responses" : {
          "200" : {
            "description" : "ClusterList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterList"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "project" ],
        "summary" : "Creates a cluster for the given project.",
        "operationId" : "createClusterV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateClusterSpec"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "Cluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Cluster"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Gets the cluster with the given name",
        "operationId" : "getClusterV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Cluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Cluster"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "project" ],
        "description" : "Deletes the specified cluster",
        "operationId" : "deleteClusterV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "DeleteVolumes",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "DeleteLoadBalancers",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "project" ],
        "summary" : "Patches the given cluster using JSON Merge Patch method (https://tools.ietf.org/html/rfc7396).",
        "operationId" : "patchClusterV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Cluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Cluster"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Patch"
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/addons" : {
      "get" : {
        "tags" : [ "addon" ],
        "description" : "Lists addons that belong to the given cluster",
        "operationId" : "listAddonsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Addon",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Addon"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "addon" ],
        "description" : "Creates an addon that will belong to the given cluster",
        "operationId" : "createAddonV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Addon"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "Addon",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Addon"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/addons/{addon_id}" : {
      "get" : {
        "tags" : [ "addon" ],
        "summary" : "Gets an addon that is assigned to the given cluster.",
        "operationId" : "getAddonV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "addon_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "AddonID"
          },
          "x-go-name" : "AddonID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Addon",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Addon"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "addon" ],
        "summary" : "Deletes the given addon that belongs to the cluster.",
        "operationId" : "deleteAddonV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "addon_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "AddonID"
          },
          "x-go-name" : "AddonID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "addon" ],
        "summary" : "Patches an addon that is assigned to the given cluster.",
        "operationId" : "patchAddonV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "addon_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "AddonID"
          },
          "x-go-name" : "AddonID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Addon"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Addon",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Addon"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/alertmanager/config" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Gets the alertmanager configuration for the specified cluster.",
        "operationId" : "getAlertmanager",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Alertmanager",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Alertmanager"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "project" ],
        "description" : "Updates an alertmanager configuration for the given cluster",
        "operationId" : "updateAlertmanager",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Alertmanager"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Alertmanager",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Alertmanager"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      },
      "delete" : {
        "tags" : [ "project" ],
        "summary" : "Resets the alertmanager configuration to default for the specified cluster.",
        "operationId" : "resetAlertmanager",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/applicationinstallations" : {
      "get" : {
        "tags" : [ "applications" ],
        "description" : "List ApplicationInstallations which belong to the given cluster",
        "operationId" : "listApplicationInstallations",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "ApplicationInstallation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ApplicationInstallation"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "applications" ],
        "description" : "Creates ApplicationInstallation into the given cluster",
        "operationId" : "createApplicationInstallation",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApplicationInstallationBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "ApplicationInstallation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApplicationInstallation"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/applicationinstallations/{namespace}/{appinstall_name}" : {
      "get" : {
        "tags" : [ "applications" ],
        "description" : "Gets the given ApplicationInstallation",
        "operationId" : "getApplicationInstallation",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Namespace"
          },
          "x-go-name" : "Namespace"
        }, {
          "name" : "appinstall_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ApplicationInstallationName"
          },
          "x-go-name" : "ApplicationInstallationName"
        } ],
        "responses" : {
          "200" : {
            "description" : "ApplicationInstallation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApplicationInstallation"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "applications" ],
        "description" : "Updates the given ApplicationInstallation",
        "operationId" : "updateApplicationInstallation",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Namespace"
          },
          "x-go-name" : "Namespace"
        }, {
          "name" : "appinstall_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ApplicationInstallationName"
          },
          "x-go-name" : "ApplicationInstallationName"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApplicationInstallationBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "ApplicationInstallation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApplicationInstallation"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      },
      "delete" : {
        "tags" : [ "applications" ],
        "description" : "Deletes the given ApplicationInstallation",
        "operationId" : "deleteApplicationInstallation",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Namespace"
          },
          "x-go-name" : "Namespace"
        }, {
          "name" : "appinstall_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ApplicationInstallationName"
          },
          "x-go-name" : "ApplicationInstallationName"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/backupdestinations" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Gets possible backup destination names for a cluster",
        "operationId" : "getBackupDestinationNames",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "BackupDestinationNames",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BackupDestinationNames"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/bindings" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "List role binding",
        "operationId" : "listRoleBindingV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "RoleBinding",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RoleBinding"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/clusterbindings" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "List cluster role binding",
        "operationId" : "listClusterRoleBindingV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "ClusterRoleBinding",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ClusterRoleBinding"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/clusterrolenames" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Lists all ClusterRoles",
        "operationId" : "listClusterRoleNamesV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "ClusterRoleName",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ClusterRoleName"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/clusterroles" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Lists all ClusterRoles",
        "operationId" : "listClusterRoleV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "ClusterRole",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ClusterRole"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/clusterroles/{role_id}/clusterbindings" : {
      "post" : {
        "tags" : [ "project" ],
        "description" : "Binds user to cluster role",
        "operationId" : "bindUserToClusterRoleV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "role_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "RoleID"
          },
          "x-go-name" : "RoleID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ClusterRoleUser"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "ClusterRoleBinding",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterRoleBinding"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      },
      "delete" : {
        "tags" : [ "project" ],
        "description" : "Unbinds user from cluster role binding",
        "operationId" : "unbindUserFromClusterRoleBindingV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "role_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "RoleID"
          },
          "x-go-name" : "RoleID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ClusterRoleUser"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "ClusterRoleBinding",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterRoleBinding"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/cniversions" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Lists CNI plugin versions for a given cluster.",
        "operationId" : "listCNIPluginVersionsForCluster",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "CNIVersions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CNIVersions"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/constraints" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Lists constraints for the specified cluster.",
        "operationId" : "listConstraints",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Constraint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Constraint"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "project" ],
        "summary" : "Creates a given constraint for the specified cluster.",
        "operationId" : "createConstraint",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/constraintBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Constraint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Constraint"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/constraints/{constraint_name}" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Gets an specified constraint for the given cluster.",
        "operationId" : "getConstraint",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "constraint_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "x-go-name" : "Name"
        } ],
        "responses" : {
          "200" : {
            "description" : "Constraint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Constraint"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "project" ],
        "summary" : "Deletes a specified constraint for the given cluster.",
        "operationId" : "deleteConstraint",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "constraint_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "x-go-name" : "Name"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "project" ],
        "summary" : "Patches a given constraint for the specified cluster.",
        "operationId" : "patchConstraint",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "constraint_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "x-go-name" : "Name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Constraint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Constraint"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Patch"
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/etcdbackupconfigs" : {
      "get" : {
        "tags" : [ "etcdbackupconfig" ],
        "description" : "List etcd backup configs for a given cluster",
        "operationId" : "listEtcdBackupConfig",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EtcdBackupConfig",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EtcdBackupConfig"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "etcdbackupconfig" ],
        "description" : "Creates a etcd backup config that will belong to the given cluster",
        "operationId" : "createEtcdBackupConfig",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ebcBody"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "EtcdBackupConfig",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EtcdBackupConfig"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/etcdbackupconfigs/{ebc_id}" : {
      "get" : {
        "tags" : [ "etcdbackupconfig" ],
        "description" : "Gets a etcd backup config for a given cluster based on its id",
        "operationId" : "getEtcdBackupConfig",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "ebc_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "EtcdBackupConfigID"
          },
          "x-go-name" : "EtcdBackupConfigID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EtcdBackupConfig",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EtcdBackupConfig"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "etcdbackupconfig" ],
        "description" : "Deletes a etcd backup config for a given cluster based on its id",
        "operationId" : "deleteEtcdBackupConfig",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "ebc_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "EtcdBackupConfigID"
          },
          "x-go-name" : "EtcdBackupConfigID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "etcdbackupconfig" ],
        "description" : "Patches a etcd backup config for a given cluster based on its id",
        "operationId" : "patchEtcdBackupConfig",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "ebc_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "EtcdBackupConfigID"
          },
          "x-go-name" : "EtcdBackupConfigID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EtcdBackupConfigSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EtcdBackupConfig",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EtcdBackupConfig"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/etcdrestores" : {
      "get" : {
        "tags" : [ "etcdrestore" ],
        "description" : "List etcd backup restores for a given cluster",
        "operationId" : "listEtcdRestore",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EtcdRestore",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EtcdRestore"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "etcdrestore" ],
        "description" : "Creates a etcd backup restore for a given cluster",
        "operationId" : "createEtcdRestore",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/erBody"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "EtcdBackupConfig",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EtcdBackupConfig"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/etcdrestores/{er_name}" : {
      "get" : {
        "tags" : [ "etcdrestore" ],
        "description" : "Gets a etcd backup restore for a given cluster based on its name",
        "operationId" : "getEtcdRestore",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "er_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "EtcdRestoreName"
          },
          "x-go-name" : "EtcdRestoreName"
        } ],
        "responses" : {
          "200" : {
            "description" : "EtcdRestore",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EtcdRestore"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "etcdrestore" ],
        "description" : "Deletes a etcd restore config for a given cluster based on its name",
        "operationId" : "deleteEtcdRestore",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "er_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "EtcdRestoreName"
          },
          "x-go-name" : "EtcdRestoreName"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "409" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/events" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Gets the events related to the specified cluster.",
        "operationId" : "getClusterEventsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Type"
          },
          "x-go-name" : "Type"
        } ],
        "responses" : {
          "200" : {
            "description" : "Event",
            "content" : {
              "application/yaml" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/yaml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/externalccmmigration" : {
      "post" : {
        "description" : "Enable the migration to the external CCM for the given cluster",
        "operationId" : "migrateClusterToExternalCCM",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/gatekeeper/config" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Gets the gatekeeper sync config for the specified cluster.",
        "operationId" : "getGatekeeperConfig",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "GatekeeperConfig",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GatekeeperConfig"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "project" ],
        "description" : "Creates a gatekeeper config for the given cluster",
        "operationId" : "createGatekeeperConfig",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GatekeeperConfig"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "GatekeeperConfig",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GatekeeperConfig"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      },
      "delete" : {
        "tags" : [ "project" ],
        "summary" : "Deletes the gatekeeper sync config for the specified cluster.",
        "operationId" : "deleteGatekeeperConfig",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "project" ],
        "summary" : "Patches the gatekeeper config for the specified cluster.",
        "operationId" : "patchGatekeeperConfig",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "GatekeeperConfig",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GatekeeperConfig"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Patch"
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/health" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Returns the cluster's component health status",
        "operationId" : "getClusterHealthV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "ClusterHealth",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterHealth"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/installableaddons" : {
      "get" : {
        "tags" : [ "addon" ],
        "description" : "Lists names of addons that can be installed inside the user cluster",
        "operationId" : "listInstallableAddonsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "AccessibleAddons",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessibleAddons"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/kubeconfig" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Gets the kubeconfig for the specified cluster.",
        "operationId" : "getClusterKubeconfigV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Kubeconfig is a clusters kubeconfig",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "integer",
                    "format" : "uint8"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/machinedeployments" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Lists machine deployments that belong to the given cluster",
        "operationId" : "listMachineDeployments",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "NodeDeployment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NodeDeployment"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "project" ],
        "description" : "Creates a machine deployment that will belong to the given cluster",
        "operationId" : "createMachineDeployment",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NodeDeployment"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "NodeDeployment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NodeDeployment"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/machinedeployments/nodes/{node_id}" : {
      "delete" : {
        "tags" : [ "project" ],
        "summary" : "Deletes the given node that belongs to the machine deployment.",
        "operationId" : "deleteMachineDeploymentNode",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "node_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "NodeID"
          },
          "x-go-name" : "NodeID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/machinedeployments/{machinedeployment_id}" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Gets a machine deployment that is assigned to the given cluster.",
        "operationId" : "getMachineDeployment",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "machinedeployment_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "MachineDeploymentID"
          },
          "x-go-name" : "MachineDeploymentID"
        } ],
        "responses" : {
          "200" : {
            "description" : "NodeDeployment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NodeDeployment"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "project" ],
        "summary" : "Schedules rolling restart of a machine deployment that is assigned to the given cluster.",
        "operationId" : "restartMachineDeployment",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "machinedeployment_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "MachineDeploymentID"
          },
          "x-go-name" : "MachineDeploymentID"
        } ],
        "responses" : {
          "200" : {
            "description" : "NodeDeployment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NodeDeployment"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "project" ],
        "summary" : "Deletes the given machine deployment that belongs to the cluster.",
        "operationId" : "deleteMachineDeployment",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "machinedeployment_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "MachineDeploymentID"
          },
          "x-go-name" : "MachineDeploymentID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "project" ],
        "description" : "Patches a machine deployment that is assigned to the given cluster. Please note that at the moment only\nnode deployment's spec can be updated by a patch, no other fields can be changed using this endpoint.",
        "operationId" : "patchMachineDeployment",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "machinedeployment_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "MachineDeploymentID"
          },
          "x-go-name" : "MachineDeploymentID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "NodeDeployment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NodeDeployment"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Patch"
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/machinedeployments/{machinedeployment_id}/nodes" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Lists nodes that belong to the given machine deployment.",
        "operationId" : "listMachineDeploymentNodes",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "machinedeployment_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "MachineDeploymentID"
          },
          "x-go-name" : "MachineDeploymentID"
        }, {
          "name" : "hideInitialConditions",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-go-name" : "HideInitialConditions"
          },
          "x-go-name" : "HideInitialConditions"
        } ],
        "responses" : {
          "200" : {
            "description" : "Node",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Node"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/machinedeployments/{machinedeployment_id}/nodes/events" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Lists machine deployment events. If query parameter `type` is set to `warning` then only warning events are retrieved.",
        "description" : "If the value is 'normal' then normal events are returned. If the query parameter is missing method returns all events.",
        "operationId" : "listMachineDeploymentNodesEvents",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "machinedeployment_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "MachineDeploymentID"
          },
          "x-go-name" : "MachineDeploymentID"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Type"
          },
          "x-go-name" : "Type"
        } ],
        "responses" : {
          "200" : {
            "description" : "Event",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/machinedeployments/{machinedeployment_id}/nodes/metrics" : {
      "get" : {
        "tags" : [ "metric" ],
        "summary" : "Lists metrics that belong to the given machine deployment.",
        "operationId" : "listMachineDeploymentMetrics",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "machinedeployment_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "MachineDeploymentID"
          },
          "x-go-name" : "MachineDeploymentID"
        } ],
        "responses" : {
          "200" : {
            "description" : "NodeMetric",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NodeMetric"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/metrics" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Gets cluster metrics",
        "operationId" : "getClusterMetricsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "ClusterMetrics",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterMetrics"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/mlaadminsetting" : {
      "get" : {
        "tags" : [ "mlaadminsetting" ],
        "summary" : "Gets MLA Admin settings for the given cluster.",
        "operationId" : "getMLAAdminSetting",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "MLAAdminSetting",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MLAAdminSetting"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "mlaadminsetting" ],
        "summary" : "Updates the MLA admin setting for the given cluster.",
        "operationId" : "updateMLAAdminSetting",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MLAAdminSetting"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "MLAAdminSetting",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MLAAdminSetting"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      },
      "post" : {
        "tags" : [ "mlaadminsetting" ],
        "description" : "Creates MLA admin setting that will belong to the given cluster",
        "operationId" : "createMLAAdminSetting",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MLAAdminSetting"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "MLAAdminSetting",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MLAAdminSetting"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      },
      "delete" : {
        "tags" : [ "mlaadminsetting" ],
        "summary" : "Deletes the MLA admin setting that belongs to the cluster.",
        "operationId" : "deleteMLAAdminSetting",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/namespaces" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Lists all namespaces in the cluster",
        "operationId" : "listNamespaceV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Namespace",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Namespace"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/nodes" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "This endpoint is used for kubeadm cluster.",
        "operationId" : "listNodesForCluster",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "hideInitialConditions",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-go-name" : "HideInitialConditions"
          },
          "x-go-name" : "HideInitialConditions"
        } ],
        "responses" : {
          "200" : {
            "description" : "Node",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Node"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/nodes/upgrades" : {
      "put" : {
        "tags" : [ "project" ],
        "description" : "Upgrades node deployments in a cluster",
        "operationId" : "upgradeClusterNodeDeploymentsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MasterVersion"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/oidc" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Gets the OIDC params for the specified cluster with OIDC authentication.",
        "operationId" : "getClusterOidc",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "OIDCSpec",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OIDCSpec"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/oidckubeconfig" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Gets the kubeconfig for the specified cluster with oidc authentication.",
        "operationId" : "getOidcClusterKubeconfigV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Kubeconfig is a clusters kubeconfig",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "integer",
                    "format" : "uint8"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/alibaba/instancetypes" : {
      "get" : {
        "tags" : [ "alibaba" ],
        "description" : "Lists available Alibaba Instance Types",
        "operationId" : "listAlibabaInstanceTypesNoCredentialsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "Region",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "AlibabaInstanceTypeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AlibabaInstanceTypeList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/alibaba/vswitches" : {
      "get" : {
        "tags" : [ "alibaba" ],
        "description" : "Lists available Alibaba vSwitches",
        "operationId" : "listAlibabaVSwitchesNoCredentialsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "Region",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "AlibabaVSwitchList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AlibabaVSwitchList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/alibaba/zones" : {
      "get" : {
        "tags" : [ "alibaba" ],
        "description" : "Lists available Alibaba Instance Types",
        "operationId" : "listAlibabaZonesNoCredentialsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "Region",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "AlibabaZoneList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AlibabaZoneList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/anexia/templates" : {
      "get" : {
        "tags" : [ "anexia" ],
        "description" : "Lists templates from Anexia",
        "operationId" : "listAnexiaTemplatesNoCredentialsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "AnexiaTemplateList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AnexiaTemplateList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/anexia/vlans" : {
      "get" : {
        "tags" : [ "anexia" ],
        "description" : "Lists vlans from Anexia",
        "operationId" : "listAnexiaVlansNoCredentialsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "AnexiaVlanList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AnexiaVlanList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/aws/sizes" : {
      "get" : {
        "tags" : [ "aws" ],
        "description" : "Lists available AWS sizes",
        "operationId" : "listAWSSizesNoCredentialsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "architecture",
          "in" : "query",
          "description" : "architecture query parameter. Supports: arm64 and x64 types.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Architecture"
          },
          "x-go-name" : "Architecture"
        } ],
        "responses" : {
          "200" : {
            "description" : "AWSSizeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AWSSizeList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/aws/subnets" : {
      "get" : {
        "tags" : [ "aws" ],
        "description" : "Lists available AWS subnets",
        "operationId" : "listAWSSubnetsNoCredentialsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "AWSSubnetList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AWSSubnetList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/azure/availabilityzones" : {
      "get" : {
        "tags" : [ "azure" ],
        "description" : "Lists available VM availability zones in an Azure region",
        "operationId" : "listAzureAvailabilityZonesNoCredentialsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "SKUName",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "AzureAvailabilityZonesList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AzureAvailabilityZonesList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/azure/sizes" : {
      "get" : {
        "tags" : [ "azure" ],
        "description" : "Lists available VM sizes in an Azure region",
        "operationId" : "listAzureSizesNoCredentialsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "AzureSizeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AzureSizeList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/digitalocean/sizes" : {
      "get" : {
        "tags" : [ "digitalocean" ],
        "description" : "Lists sizes from digitalocean",
        "operationId" : "listDigitaloceanSizesNoCredentialsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "DigitaloceanSizeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DigitaloceanSizeList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/gcp/disktypes" : {
      "get" : {
        "tags" : [ "gcp" ],
        "description" : "Lists disk types from GCP",
        "operationId" : "listGCPDiskTypesNoCredentialsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "Zone",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "GCPDiskTypeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GCPDiskTypeList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/gcp/networks" : {
      "get" : {
        "tags" : [ "gcp" ],
        "description" : "Lists available GCP networks",
        "operationId" : "listGCPNetworksNoCredentialsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "GCPNetworkList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GCPNetworkList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/gcp/sizes" : {
      "get" : {
        "tags" : [ "gcp" ],
        "description" : "Lists machine sizes from GCP",
        "operationId" : "listGCPSizesNoCredentialsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "Zone",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "GCPMachineSizeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GCPMachineSizeList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/gcp/subnetworks" : {
      "get" : {
        "tags" : [ "gcp" ],
        "description" : "Lists available GCP subnetworks",
        "operationId" : "listGCPSubnetworksNoCredentialsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "Network",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "GCPSubnetworkList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GCPSubnetworkList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/gcp/zones" : {
      "get" : {
        "tags" : [ "gcp" ],
        "description" : "Lists available GCP zones",
        "operationId" : "listGCPZonesNoCredentialsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "GCPZoneList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GCPZoneList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/hetzner/sizes" : {
      "get" : {
        "tags" : [ "hetzner" ],
        "description" : "Lists sizes from hetzner",
        "operationId" : "listHetznerSizesNoCredentialsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "HetznerSizeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HetznerSizeList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/kubevirt/storageclasses" : {
      "get" : {
        "tags" : [ "kubevirt" ],
        "description" : "List Storage Classes",
        "operationId" : "listKubevirtStorageClassesNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "StorageClassList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StorageClassList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/kubevirt/vmflavors" : {
      "get" : {
        "tags" : [ "kubevirt" ],
        "description" : "Lists available VirtualMachineInstancePreset",
        "operationId" : "listKubeVirtVMIPresetsNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "VirtualMachineInstancePresetList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VirtualMachineInstancePresetList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/nutanix/categories" : {
      "get" : {
        "tags" : [ "nutanix" ],
        "description" : "Lists available Nutanix categories",
        "operationId" : "listNutanixCategoriesNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "NutanixCategoryList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NutanixCategoryList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/nutanix/categories/{category}/values" : {
      "get" : {
        "tags" : [ "nutanix" ],
        "description" : "Lists available Nutanix category values for a specific category",
        "operationId" : "listNutanixCategoryValuesNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "category",
          "in" : "path",
          "description" : "Category to query the available values for",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Category"
          },
          "x-go-name" : "Category"
        } ],
        "responses" : {
          "200" : {
            "description" : "NutanixCategoryValueList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NutanixCategoryValueList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/nutanix/subnets" : {
      "get" : {
        "tags" : [ "nutanix" ],
        "description" : "Lists available Nutanix Subnets",
        "operationId" : "listNutanixSubnetsNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "NutanixSubnetList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NutanixSubnetList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/openstack/availabilityzones" : {
      "get" : {
        "tags" : [ "openstack" ],
        "description" : "Lists availability zones from openstack",
        "operationId" : "listOpenstackAvailabilityZonesNoCredentialsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "OpenstackAvailabilityZone",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OpenstackAvailabilityZone"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/openstack/networks" : {
      "get" : {
        "tags" : [ "openstack" ],
        "description" : "Lists networks from openstack",
        "operationId" : "listOpenstackNetworksNoCredentialsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "OpenstackNetwork",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OpenstackNetwork"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/openstack/securitygroups" : {
      "get" : {
        "tags" : [ "openstack" ],
        "description" : "Lists security groups from openstack",
        "operationId" : "listOpenstackSecurityGroupsNoCredentialsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "OpenstackSecurityGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OpenstackSecurityGroup"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/openstack/sizes" : {
      "get" : {
        "tags" : [ "openstack" ],
        "description" : "Lists sizes from openstack",
        "operationId" : "listOpenstackSizesNoCredentialsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "OpenstackSize",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OpenstackSize"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/openstack/subnets" : {
      "get" : {
        "tags" : [ "openstack" ],
        "description" : "Lists subnets from openstack",
        "operationId" : "listOpenstackSubnetsNoCredentialsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "network_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "NetworkID"
          },
          "x-go-name" : "NetworkID"
        } ],
        "responses" : {
          "200" : {
            "description" : "OpenstackSubnet",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OpenstackSubnet"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/openstack/tenants" : {
      "get" : {
        "tags" : [ "openstack" ],
        "description" : "Lists tenants from openstack",
        "operationId" : "listOpenstackTenantsNoCredentialsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "OpenstackTenant",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OpenstackTenant"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/packet/sizes" : {
      "get" : {
        "tags" : [ "packet" ],
        "description" : "Lists sizes from packet",
        "operationId" : "listPacketSizesNoCredentialsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "PacketSizeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PacketSizeList"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/vmwareclouddirector/catalogs" : {
      "get" : {
        "tags" : [ "vmwareclouddirector" ],
        "description" : "List VMware Cloud Director Catalogs",
        "operationId" : "listVMwareCloudDirectorCatalogsNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "VMwareCloudDirectorCatalogList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VMwareCloudDirectorCatalogList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/vmwareclouddirector/networks" : {
      "get" : {
        "tags" : [ "vmwareclouddirector" ],
        "description" : "List VMware Cloud Director OVDC Networks",
        "operationId" : "listVMwareCloudDirectorNetworksNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "VMwareCloudDirectorNetworkList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VMwareCloudDirectorNetworkList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/vmwareclouddirector/storageprofiles" : {
      "get" : {
        "tags" : [ "vmwareclouddirector" ],
        "description" : "List VMware Cloud Director Storage Profiles",
        "operationId" : "listVMwareCloudDirectorStorageProfilesNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "VMwareCloudDirectorStorageProfileList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VMwareCloudDirectorStorageProfileList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/vmwareclouddirector/templates/{catalog_name}" : {
      "get" : {
        "tags" : [ "vmwareclouddirector" ],
        "description" : "List VMware Cloud Director Templates",
        "operationId" : "listVMwareCloudDirectorTemplatesNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "catalog_name",
          "in" : "path",
          "description" : "Catalog name to fetch the templates from",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "CatalogName"
          },
          "x-go-name" : "CatalogName"
        } ],
        "responses" : {
          "200" : {
            "description" : "VMwareCloudDirectorTemplateList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VMwareCloudDirectorTemplateList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/vsphere/folders" : {
      "get" : {
        "tags" : [ "vsphere" ],
        "description" : "Lists folders from vsphere datacenter",
        "operationId" : "listVSphereFoldersNoCredentialsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "VSphereFolder",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/VSphereFolder"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/vsphere/networks" : {
      "get" : {
        "tags" : [ "vsphere" ],
        "description" : "Lists networks from vsphere datacenter",
        "operationId" : "listVSphereNetworksNoCredentialsV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "VSphereNetwork",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/VSphereNetwork"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/rolenames" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Lists all Role names with namespaces",
        "operationId" : "listRoleNamesV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "RoleName",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RoleName"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/roles" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Lists all Roles",
        "operationId" : "listRoleV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/roles/{namespace}/{role_id}/bindings" : {
      "post" : {
        "tags" : [ "project" ],
        "description" : "Binds user to the role",
        "operationId" : "bindUserToRoleV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "role_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "RoleID"
          },
          "x-go-name" : "RoleID"
        }, {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Namespace"
          },
          "x-go-name" : "Namespace"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RoleUser"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "RoleBinding",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RoleBinding"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      },
      "delete" : {
        "tags" : [ "project" ],
        "description" : "Unbinds user from the role binding",
        "operationId" : "unbindUserFromRoleBindingV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "role_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "RoleID"
          },
          "x-go-name" : "RoleID"
        }, {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Namespace"
          },
          "x-go-name" : "Namespace"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RoleUser"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "RoleBinding",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RoleBinding"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/rulegroups" : {
      "get" : {
        "tags" : [ "rulegroup" ],
        "description" : "Lists rule groups that belong to the given cluster",
        "operationId" : "listRuleGroups",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Type"
          },
          "x-go-name" : "Type"
        } ],
        "responses" : {
          "200" : {
            "description" : "RuleGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RuleGroup"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "rulegroup" ],
        "description" : "Creates a rule group that will belong to the given cluster",
        "operationId" : "createRuleGroup",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RuleGroup"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "RuleGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RuleGroup"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/rulegroups/{rulegroup_id}" : {
      "get" : {
        "tags" : [ "rulegroup" ],
        "summary" : "Gets a specified rule group for the given cluster.",
        "operationId" : "getRuleGroup",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "rulegroup_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "RuleGroupID"
          },
          "x-go-name" : "RuleGroupID"
        } ],
        "responses" : {
          "200" : {
            "description" : "RuleGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RuleGroup"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "rulegroup" ],
        "summary" : "Updates the specified rule group for the given cluster.",
        "operationId" : "updateRuleGroup",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "rulegroup_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "RuleGroupID"
          },
          "x-go-name" : "RuleGroupID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RuleGroup"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "RuleGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RuleGroup"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      },
      "delete" : {
        "tags" : [ "rulegroup" ],
        "summary" : "Deletes the given rule group that belongs to the cluster.",
        "operationId" : "deleteRuleGroup",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "rulegroup_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "RuleGroupID"
          },
          "x-go-name" : "RuleGroupID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/sshkeys" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Lists ssh keys that are assigned to the cluster\nThe returned collection is sorted by creation timestamp.",
        "operationId" : "listSSHKeysAssignedToClusterV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "SSHKey",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SSHKey"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/sshkeys/{key_id}" : {
      "put" : {
        "tags" : [ "project" ],
        "description" : "Assigns an existing ssh key to the given cluster",
        "operationId" : "assignSSHKeyToClusterV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "key_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "KeyID"
          },
          "x-go-name" : "KeyID"
        } ],
        "responses" : {
          "201" : {
            "description" : "SSHKey",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SSHKey"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/token" : {
      "put" : {
        "tags" : [ "project" ],
        "description" : "Revokes the current admin token",
        "operationId" : "revokeClusterAdminTokenV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/upgrades" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Gets possible cluster upgrades",
        "operationId" : "getClusterUpgradesV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "MasterVersion",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MasterVersion"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clusters/{cluster_id}/viewertoken" : {
      "put" : {
        "tags" : [ "project" ],
        "description" : "Revokes the current viewer token",
        "operationId" : "revokeClusterViewerTokenV2",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clustertemplates" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "List cluster templates for the given project.",
        "operationId" : "listClusterTemplates",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        } ],
        "responses" : {
          "200" : {
            "description" : "ClusterTemplateList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterTemplateList"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "project" ],
        "summary" : "Creates a cluster templates for the given project.",
        "operationId" : "createClusterTemplate",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/project_id_clustertemplates_body"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "ClusterTemplate",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterTemplate"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/projects/{project_id}/clustertemplates/import" : {
      "post" : {
        "tags" : [ "project" ],
        "summary" : "Import a cluster templates for the given project.",
        "operationId" : "importClusterTemplate",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/clustertemplates_import_body"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "ClusterTemplate",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterTemplate"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/projects/{project_id}/clustertemplates/{template_id}" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Get cluster template.",
        "operationId" : "getClusterTemplate",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "template_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterTemplateID"
          },
          "x-go-name" : "ClusterTemplateID"
        } ],
        "responses" : {
          "200" : {
            "description" : "ClusterTemplate",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterTemplate"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "project" ],
        "summary" : "Delete cluster template.",
        "operationId" : "deleteClusterTemplate",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "template_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterTemplateID"
          },
          "x-go-name" : "ClusterTemplateID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clustertemplates/{template_id}/export" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Export cluster template to file.",
        "operationId" : "exportClusterTemplate",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "template_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterTemplateID"
          },
          "x-go-name" : "ClusterTemplateID"
        }, {
          "name" : "format",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Format"
          },
          "x-go-name" : "Format"
        } ],
        "responses" : {
          "200" : {
            "description" : "ClusterTemplate",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterTemplate"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/clustertemplates/{template_id}/instances" : {
      "post" : {
        "tags" : [ "project" ],
        "summary" : "Create cluster template instance.",
        "operationId" : "createClusterTemplateInstance",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "template_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterTemplateID"
          },
          "x-go-name" : "ClusterTemplateID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/template_id_instances_body"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "ClusterTemplateInstance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterTemplateInstance"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/projects/{project_id}/etcdbackupconfigs" : {
      "get" : {
        "tags" : [ "etcdbackupconfig" ],
        "description" : "List etcd backup configs for a given project",
        "operationId" : "listProjectEtcdBackupConfig",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Type"
          },
          "x-go-name" : "Type"
        } ],
        "responses" : {
          "200" : {
            "description" : "EtcdBackupConfig",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EtcdBackupConfig"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/etcdrestores" : {
      "get" : {
        "tags" : [ "etcdrestore" ],
        "description" : "List etcd backup restores for a given project",
        "operationId" : "listProjectEtcdRestore",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EtcdRestore",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EtcdRestore"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/groupbindings" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Lists project's group bindings.",
        "operationId" : "listGroupProjectBinding",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        } ],
        "responses" : {
          "200" : {
            "description" : "GroupProjectBinding",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/GroupProjectBinding"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "project" ],
        "summary" : "Create project group binding.",
        "operationId" : "createGroupProjectBinding",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/groupProjectBindingBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "GroupProjectBinding",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GroupProjectBinding"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/projects/{project_id}/groupbindings/{binding_name}" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Get project group binding.",
        "operationId" : "getGroupProjectBinding",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "binding_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "BindingName"
          },
          "x-go-name" : "BindingName"
        } ],
        "responses" : {
          "200" : {
            "description" : "GroupProjectBinding",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GroupProjectBinding"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "project" ],
        "summary" : "Delete project group binding.",
        "operationId" : "deleteGroupProjectBinding",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "binding_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "BindingName"
          },
          "x-go-name" : "BindingName"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "project" ],
        "summary" : "Patch project group binding.",
        "operationId" : "patchGroupProjectBinding",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "binding_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "BindingName"
          },
          "x-go-name" : "BindingName"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/groupbindings_binding_name_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "GroupProjectBinding",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GroupProjectBinding"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/projects/{project_id}/kubernetes/clusters" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Lists external clusters for the specified project.",
        "operationId" : "listExternalClusters",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        } ],
        "responses" : {
          "200" : {
            "description" : "ExternalCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ExternalCluster"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "project" ],
        "summary" : "Creates an external cluster for the given project.",
        "operationId" : "createExternalCluster",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "Credential",
          "in" : "header",
          "description" : "The credential name used in the preset for the provider",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/body"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "ExternalCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExternalCluster"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/projects/{project_id}/kubernetes/clusters/{cluster_id}" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Gets an external cluster for the given project.",
        "operationId" : "getExternalCluster",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "ExternalCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExternalCluster"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "project" ],
        "summary" : "Updates an external cluster for the given project.",
        "operationId" : "updateExternalCluster",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/clusters_cluster_id_body"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "ExternalCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExternalCluster"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      },
      "delete" : {
        "tags" : [ "project" ],
        "description" : "Deletes the specified external cluster",
        "operationId" : "deleteExternalCluster",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "action",
          "in" : "header",
          "description" : "The Action is used to check if to `Delete` the cluster:\nboth the actual cluter from the provider\nand the respective KKP cluster object\nBy default the cluster will `Disconnect` which means the KKP cluster object will be deleted,\ncluster still exists on the provider, but is no longer connected/imported in KKP",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Action"
          },
          "x-go-name" : "Action"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "project" ],
        "summary" : "Patches the given cluster using JSON Merge Patch method (https://tools.ietf.org/html/rfc7396).",
        "operationId" : "patchExternalCluster",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "ExternalCluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExternalCluster"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Patch"
      }
    },
    "/api/v2/projects/{project_id}/kubernetes/clusters/{cluster_id}/events" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Gets an external cluster events.",
        "operationId" : "listExternalClusterEvents",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Type"
          },
          "x-go-name" : "Type"
        } ],
        "responses" : {
          "200" : {
            "description" : "Event",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/kubernetes/clusters/{cluster_id}/kubeconfig" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Gets the kubeconfig for the specified external cluster.",
        "operationId" : "getExternalClusterKubeconfig",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Kubeconfig is a clusters kubeconfig",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "integer",
                    "format" : "uint8"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/kubernetes/clusters/{cluster_id}/machinedeployments" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Gets an external cluster machine deployments.",
        "operationId" : "listExternalClusterMachineDeployments",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "ExternalClusterMachineDeployment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ExternalClusterMachineDeployment"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "project" ],
        "summary" : "Create an external cluster machine deployments.",
        "operationId" : "createExternalClusterMachineDeployment",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExternalClusterMachineDeployment"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "ExternalClusterMachineDeployment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExternalClusterMachineDeployment"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/projects/{project_id}/kubernetes/clusters/{cluster_id}/machinedeployments/{machinedeployment_id}" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Gets an external cluster machine deployments.",
        "operationId" : "getExternalClusterMachineDeployment",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "machinedeployment_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "MachineDeploymentID"
          },
          "x-go-name" : "MachineDeploymentID"
        } ],
        "responses" : {
          "200" : {
            "description" : "ExternalClusterMachineDeployment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExternalClusterMachineDeployment"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "project" ],
        "summary" : "Delete an external cluster machine deployment.",
        "operationId" : "deleteExternalClusterMachineDeployment",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "machinedeployment_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "MachineDeploymentID"
          },
          "x-go-name" : "MachineDeploymentID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "project" ],
        "description" : "Patches the given cluster using JSON Merge Patch method",
        "operationId" : "patchExternalClusterMachineDeployments",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "machinedeployment_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "MachineDeploymentID"
          },
          "x-go-name" : "MachineDeploymentID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "ExternalClusterMachineDeployment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExternalClusterMachineDeployment"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Patch"
      }
    },
    "/api/v2/projects/{project_id}/kubernetes/clusters/{cluster_id}/machinedeployments/{machinedeployment_id}/nodes" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Gets an external cluster machine deployment nodes.",
        "operationId" : "listExternalClusterMachineDeploymentNodes",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "machinedeployment_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "MachineDeploymentID"
          },
          "x-go-name" : "MachineDeploymentID"
        } ],
        "responses" : {
          "200" : {
            "description" : "ExternalClusterNode",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ExternalClusterNode"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/kubernetes/clusters/{cluster_id}/machinedeployments/{machinedeployment_id}/nodes/events" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "List an external cluster machine deployment events.",
        "operationId" : "listExternalClusterMachineDeploymentEvents",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "machinedeployment_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "MachineDeploymentID"
          },
          "x-go-name" : "MachineDeploymentID"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Type"
          },
          "x-go-name" : "Type"
        } ],
        "responses" : {
          "200" : {
            "description" : "Event",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/kubernetes/clusters/{cluster_id}/machinedeployments/{machinedeployment_id}/nodes/metrics" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "List an external cluster machine deployment metrics.",
        "operationId" : "listExternalClusterMachineDeploymentMetrics",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "machinedeployment_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "MachineDeploymentID"
          },
          "x-go-name" : "MachineDeploymentID"
        } ],
        "responses" : {
          "200" : {
            "description" : "NodeMetric",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NodeMetric"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/kubernetes/clusters/{cluster_id}/machinedeployments/{machinedeployment_id}/upgrades" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Gets an external cluster machine deployments upgrade versions.",
        "operationId" : "getExternalClusterMachineDeploymentUpgrades",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "machinedeployment_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "MachineDeploymentID"
          },
          "x-go-name" : "MachineDeploymentID"
        } ],
        "responses" : {
          "200" : {
            "description" : "MasterVersion",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MasterVersion"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/kubernetes/clusters/{cluster_id}/metrics" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Gets cluster metrics",
        "operationId" : "getExternalClusterMetrics",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "ClusterMetrics",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterMetrics"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/kubernetes/clusters/{cluster_id}/nodes" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Gets an external cluster nodes.",
        "operationId" : "listExternalClusterNodes",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "ExternalClusterNode",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ExternalClusterNode"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/kubernetes/clusters/{cluster_id}/nodes/{node_id}" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Gets an external cluster node.",
        "operationId" : "getExternalClusterNode",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "node_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "NodeID"
          },
          "x-go-name" : "NodeID"
        } ],
        "responses" : {
          "200" : {
            "description" : "ExternalClusterNode",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExternalClusterNode"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/kubernetes/clusters/{cluster_id}/nodesmetrics" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Gets an external cluster nodes metrics.",
        "operationId" : "listExternalClusterNodesMetrics",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "NodeMetric",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NodeMetric"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/kubernetes/clusters/{cluster_id}/providers/aks/versions" : {
      "get" : {
        "tags" : [ "aks" ],
        "summary" : "Gets AKS nodepool available versions.",
        "operationId" : "listAKSNodeVersionsNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "MasterVersion",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MasterVersion"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/kubernetes/clusters/{cluster_id}/providers/aks/vmsizes" : {
      "get" : {
        "tags" : [ "aks" ],
        "summary" : "Gets AKS available VM sizes in an Azure region.",
        "operationId" : "listAKSVMSizesNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "Location",
          "in" : "header",
          "description" : "Location - Resource location",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "AKSVMSizeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AKSVMSizeList"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/kubernetes/clusters/{cluster_id}/providers/eks/instancetypes" : {
      "get" : {
        "tags" : [ "eks" ],
        "summary" : "Gets the EKS Instance types for node group.",
        "operationId" : "listEKSInstanceTypesNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EKSInstanceTypeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EKSInstanceTypeList"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/kubernetes/clusters/{cluster_id}/providers/eks/subnets" : {
      "get" : {
        "tags" : [ "eks" ],
        "summary" : "Gets the EKS Subnets for node group.",
        "operationId" : "listEKSSubnetsNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        }, {
          "name" : "VpcId",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EKSSubnetList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EKSSubnetList"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/kubernetes/clusters/{cluster_id}/providers/eks/vpcs" : {
      "get" : {
        "tags" : [ "eks" ],
        "summary" : "Gets the EKS vpc's for node group.",
        "operationId" : "listEKSVPCsNoCredentials",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EKSVPCList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EKSVPCList"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/kubernetes/clusters/{cluster_id}/providers/gke/disktypes" : {
      "get" : {
        "tags" : [ "gke" ],
        "summary" : "Gets GKE cluster machine disk types.",
        "operationId" : "listGKEClusterDiskTypes",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "GCPDiskTypeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GCPDiskTypeList"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/kubernetes/clusters/{cluster_id}/providers/gke/images" : {
      "get" : {
        "tags" : [ "gke" ],
        "summary" : "Gets GKE cluster images.",
        "operationId" : "listGKEClusterImages",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "GKEImageList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GKEImageList"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/kubernetes/clusters/{cluster_id}/providers/gke/sizes" : {
      "get" : {
        "tags" : [ "gke" ],
        "summary" : "Gets GKE cluster machine sizes.",
        "operationId" : "listGKEClusterSizes",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "GCPMachineSizeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GCPMachineSizeList"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/kubernetes/clusters/{cluster_id}/providers/gke/zones" : {
      "get" : {
        "tags" : [ "gke" ],
        "summary" : "Gets GKE cluster zones.",
        "operationId" : "listGKEClusterZones",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "GKEZoneList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GKEZoneList"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/kubernetes/clusters/{cluster_id}/upgrades" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Gets an external cluster upgrades.",
        "operationId" : "getExternalClusterUpgrades",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "MasterVersion",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MasterVersion"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/providers/aks/clusters" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Lists AKS clusters",
        "operationId" : "listAKSClusters",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "TenantID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "SubscriptionID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClientID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClientSecret",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "AKSClusterList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AKSClusterList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/providers/eks/clusters" : {
      "get" : {
        "tags" : [ "project" ],
        "description" : "Lists EKS clusters",
        "operationId" : "listEKSClusters",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "AccessKeyID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "SecretAccessKey",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Region",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EKSClusterList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EKSClusterList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/providers/gke/clusters" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Lists GKE clusters.",
        "operationId" : "listGKEClusters",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "ServiceAccount",
          "in" : "header",
          "description" : "The plain GCP service account",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "description" : "The credential name used in the preset for the GCP provider",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "GKEClusterList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GKEClusterList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{project_id}/quota" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Returns Resource Quota for a given project.",
        "operationId" : "getProjectQuota",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        } ],
        "responses" : {
          "200" : {
            "description" : "ResourceQuota",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceQuota"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/aks/locations" : {
      "get" : {
        "tags" : [ "aks" ],
        "summary" : "List AKS recommended Locations.",
        "operationId" : "listAKSLocations",
        "responses" : {
          "200" : {
            "description" : "AKSLocationList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AKSLocationList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/aks/modes" : {
      "get" : {
        "tags" : [ "aks" ],
        "summary" : "Gets the AKS node pool modes.",
        "operationId" : "listAKSNodePoolModes",
        "responses" : {
          "200" : {
            "description" : "AKSNodePoolModes",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AKSNodePoolModes"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/aks/validatecredentials" : {
      "get" : {
        "tags" : [ "aks" ],
        "description" : "Validates AKS credentials",
        "operationId" : "validateAKSCredentials",
        "parameters" : [ {
          "name" : "TenantID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "SubscriptionID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClientID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClientSecret",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/aks/versions" : {
      "get" : {
        "tags" : [ "aks" ],
        "description" : "Lists AKS versions",
        "operationId" : "listAKSVersions",
        "responses" : {
          "200" : {
            "description" : "MasterVersion",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MasterVersion"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/aks/vmsizes" : {
      "get" : {
        "tags" : [ "aks" ],
        "summary" : "List AKS available VM sizes in an Azure region.",
        "operationId" : "listAKSVMSizes",
        "parameters" : [ {
          "name" : "TenantID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "SubscriptionID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClientID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClientSecret",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Location",
          "in" : "header",
          "description" : "Location - Resource location",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "AKSVMSizeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AKSVMSizeList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/azure/resourcegroups" : {
      "get" : {
        "tags" : [ "azure" ],
        "description" : "Lists available VM resource groups",
        "operationId" : "listAzureResourceGroups",
        "parameters" : [ {
          "name" : "SubscriptionID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "TenantID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClientID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClientSecret",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Location",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "AzureResourceGroupsList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AzureResourceGroupsList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/azure/routetables" : {
      "get" : {
        "tags" : [ "azure" ],
        "description" : "Lists available VM route tables",
        "operationId" : "listAzureRouteTables",
        "parameters" : [ {
          "name" : "SubscriptionID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "TenantID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClientID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClientSecret",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ResourceGroup",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Location",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "AzureRouteTablesList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AzureRouteTablesList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/azure/securitygroups" : {
      "get" : {
        "tags" : [ "azure" ],
        "description" : "Lists available VM security groups",
        "operationId" : "listAzureSecurityGroups",
        "parameters" : [ {
          "name" : "SubscriptionID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "TenantID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClientID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClientSecret",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ResourceGroup",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Location",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "AzureSecurityGroupsList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AzureSecurityGroupsList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/azure/subnets" : {
      "get" : {
        "tags" : [ "azure" ],
        "description" : "Lists available VM subnets",
        "operationId" : "listAzureSubnets",
        "parameters" : [ {
          "name" : "SubscriptionID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "TenantID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClientID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClientSecret",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ResourceGroup",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "VirtualNetwork",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "AzureSubnetsList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AzureSubnetsList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/azure/vnets" : {
      "get" : {
        "tags" : [ "azure" ],
        "description" : "Lists available VM virtual networks",
        "operationId" : "listAzureVnets",
        "parameters" : [ {
          "name" : "SubscriptionID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "TenantID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClientID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClientSecret",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ResourceGroup",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Location",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "AzureVirtualNetworksList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AzureVirtualNetworksList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/eks/regions" : {
      "get" : {
        "tags" : [ "eks" ],
        "summary" : "List EKS regions.",
        "operationId" : "listEKSRegions",
        "responses" : {
          "200" : {
            "description" : "EKSRegionList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EKSRegionList"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/eks/securitygroups" : {
      "get" : {
        "tags" : [ "eks" ],
        "summary" : "List EKS securitygroup list.",
        "operationId" : "listEKSSecurityGroups",
        "parameters" : [ {
          "name" : "AccessKeyID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "SecretAccessKey",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Region",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "VpcId",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EKSSecurityGroupList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EKSSecurityGroupList"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/eks/subnets" : {
      "get" : {
        "tags" : [ "eks" ],
        "summary" : "Lists EKS subnet list.",
        "operationId" : "listEKSSubnets",
        "parameters" : [ {
          "name" : "AccessKeyID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "SecretAccessKey",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Region",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "VpcId",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EKSSubnetList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EKSSubnetList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/eks/validatecredentials" : {
      "get" : {
        "tags" : [ "eks" ],
        "description" : "Validates EKS credentials",
        "operationId" : "validateEKSCredentials",
        "parameters" : [ {
          "name" : "AccessKeyID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "SecretAccessKey",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Region",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/eks/versions" : {
      "get" : {
        "tags" : [ "eks" ],
        "description" : "Lists EKS versions",
        "operationId" : "listEKSVersions",
        "responses" : {
          "200" : {
            "description" : "MasterVersion",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MasterVersion"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/eks/vpcs" : {
      "get" : {
        "tags" : [ "eks" ],
        "description" : "Lists EKS vpc's",
        "operationId" : "listEKSVPCS",
        "parameters" : [ {
          "name" : "AccessKeyID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "SecretAccessKey",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Region",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EKSVPCList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EKSVPCList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/gke/disktypes" : {
      "get" : {
        "tags" : [ "gke" ],
        "summary" : "Gets GKE machine disk types.",
        "operationId" : "listGKEDiskTypes",
        "responses" : {
          "200" : {
            "description" : "GKEDiskTypeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GKEDiskTypeList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/gke/images" : {
      "get" : {
        "tags" : [ "gke" ],
        "description" : "Lists GKE image types",
        "operationId" : "listGKEImages",
        "parameters" : [ {
          "name" : "ServiceAccount",
          "in" : "header",
          "description" : "The plain GCP service account",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "description" : "The credential name used in the preset for the GCP provider",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Zone",
          "in" : "header",
          "description" : "The zone name",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "GKEImageList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GKEImageList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/gke/validatecredentials" : {
      "get" : {
        "tags" : [ "gke" ],
        "description" : "Validates GKE credentials",
        "operationId" : "validateGKECredentials",
        "parameters" : [ {
          "name" : "ServiceAccount",
          "in" : "header",
          "description" : "The plain GCP service account",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "description" : "The credential name used in the preset for the GCP provider",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/gke/versions" : {
      "get" : {
        "tags" : [ "gke" ],
        "description" : "Lists GKE versions",
        "operationId" : "listGKEVersions",
        "parameters" : [ {
          "name" : "ServiceAccount",
          "in" : "header",
          "description" : "The plain GCP service account",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "description" : "The credential name used in the preset for the GCP provider",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Zone",
          "in" : "header",
          "description" : "The zone name",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Mode",
          "in" : "header",
          "description" : "The Mode is how you want GKE Control plane version to be managed.\nManual: Manually manage the version upgrades.\nAuto: automatically manage the cluster's control plane version.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ReleaseChannel",
          "in" : "header",
          "description" : "The ReleaseChannel",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "MasterVersion",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MasterVersion"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/gke/vmsizes" : {
      "get" : {
        "tags" : [ "gke" ],
        "description" : "Lists GKE vmsizes",
        "operationId" : "listGKEVMSizes",
        "parameters" : [ {
          "name" : "ServiceAccount",
          "in" : "header",
          "description" : "The plain GCP service account",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "description" : "The credential name used in the preset for the GCP provider",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Zone",
          "in" : "header",
          "description" : "The zone name",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "GCPMachineSizeList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GCPMachineSizeList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/gke/zones" : {
      "get" : {
        "tags" : [ "gke" ],
        "description" : "Lists GKE zones",
        "operationId" : "listGKEZones",
        "responses" : {
          "200" : {
            "description" : "GKEZoneList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GKEZoneList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/kubevirt/storageclasses" : {
      "get" : {
        "tags" : [ "kubevirt" ],
        "summary" : "Lists available K8s StorageClasses in the Kubevirt cluster.",
        "operationId" : "listKubevirtStorageClasses",
        "parameters" : [ {
          "name" : "Kubeconfig",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "StorageClassList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StorageClassList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/kubevirt/vmflavors" : {
      "get" : {
        "tags" : [ "kubevirt" ],
        "summary" : "Lists available KubeVirt VirtualMachineInstancePreset.",
        "operationId" : "listKubeVirtVMIPresets",
        "parameters" : [ {
          "name" : "Kubeconfig",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "VirtualMachineInstancePresetList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VirtualMachineInstancePresetList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/nutanix/{dc}/categories" : {
      "get" : {
        "tags" : [ "nutanix" ],
        "description" : "List category keys from Nutanix",
        "operationId" : "listNutanixCategories",
        "parameters" : [ {
          "name" : "dc",
          "in" : "path",
          "description" : "KKP Datacenter to use for endpoint",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "NutanixUsername",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "NutanixPassword",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "NutanixProxyURL",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "NutanixCategoryList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NutanixCategoryList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/nutanix/{dc}/categories/{category}/values" : {
      "get" : {
        "tags" : [ "nutanix" ],
        "description" : "List available category values for a specific category from Nutanix",
        "operationId" : "listNutanixCategoryValues",
        "parameters" : [ {
          "name" : "dc",
          "in" : "path",
          "description" : "KKP Datacenter to use for endpoint",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "NutanixUsername",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "NutanixPassword",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "NutanixProxyURL",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "category",
          "in" : "path",
          "description" : "Category to query the available values for",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Category"
          },
          "x-go-name" : "Category"
        } ],
        "responses" : {
          "200" : {
            "description" : "NutanixCategoryValueList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NutanixCategoryValueList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/nutanix/{dc}/clusters" : {
      "get" : {
        "tags" : [ "nutanix" ],
        "description" : "List clusters from Nutanix",
        "operationId" : "listNutanixClusters",
        "parameters" : [ {
          "name" : "dc",
          "in" : "path",
          "description" : "KKP Datacenter to use for endpoint",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "NutanixUsername",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "NutanixPassword",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "NutanixProxyURL",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "NutanixClusterList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NutanixClusterList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/nutanix/{dc}/projects" : {
      "get" : {
        "tags" : [ "nutanix" ],
        "description" : "List projects from Nutanix",
        "operationId" : "listNutanixProjects",
        "parameters" : [ {
          "name" : "dc",
          "in" : "path",
          "description" : "KKP Datacenter to use for endpoint",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "NutanixUsername",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "NutanixPassword",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "NutanixProxyURL",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "NutanixProjectList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NutanixProjectList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/nutanix/{dc}/subnets" : {
      "get" : {
        "tags" : [ "nutanix" ],
        "description" : "List subnets from Nutanix",
        "operationId" : "listNutanixSubnets",
        "parameters" : [ {
          "name" : "dc",
          "in" : "path",
          "description" : "KKP Datacenter to use for endpoint",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "NutanixUsername",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "NutanixPassword",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "NutanixProxyURL",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "NutanixCluster",
          "in" : "header",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "NutanixProject",
          "in" : "header",
          "description" : "Project query parameter. Can be omitted to query subnets without project scope",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "NutanixSubnetList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NutanixSubnetList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/openstack/subnetpools" : {
      "get" : {
        "tags" : [ "openstack" ],
        "description" : "Lists subnet pools from openstack",
        "operationId" : "listOpenstackSubnetPools",
        "parameters" : [ {
          "name" : "Username",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Password",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Domain",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Tenant",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "TenantID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Project",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ProjectID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "DatacenterName",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ApplicationCredentialID",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ApplicationCredentialSecret",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "OIDCAuthentication",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ip_version",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "IPVersion"
          },
          "x-go-name" : "IPVersion"
        } ],
        "responses" : {
          "200" : {
            "description" : "OpenstackSubnetPool",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OpenstackSubnetPool"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/vmwareclouddirector/{dc}/catalogs" : {
      "get" : {
        "tags" : [ "vmwareclouddirector" ],
        "description" : "List VMware Cloud Director Catalogs",
        "operationId" : "listVMwareCloudDirectorCatalogs",
        "parameters" : [ {
          "name" : "dc",
          "in" : "path",
          "description" : "KKP Datacenter to use for endpoint",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "Username",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Password",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Organization",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "VDC",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "VMwareCloudDirectorCatalogList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VMwareCloudDirectorCatalogList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/vmwareclouddirector/{dc}/networks" : {
      "get" : {
        "tags" : [ "vmwareclouddirector" ],
        "description" : "List VMware Cloud Director OVDC Networks",
        "operationId" : "listVMwareCloudDirectorNetworks",
        "parameters" : [ {
          "name" : "dc",
          "in" : "path",
          "description" : "KKP Datacenter to use for endpoint",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "Username",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Password",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Organization",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "VDC",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "VMwareCloudDirectorNetworkList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VMwareCloudDirectorNetworkList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/vmwareclouddirector/{dc}/storageprofiles" : {
      "get" : {
        "tags" : [ "vmwareclouddirector" ],
        "description" : "List VMware Cloud Director Storage Profiles",
        "operationId" : "listVMwareCloudDirectorStorageProfiles",
        "parameters" : [ {
          "name" : "dc",
          "in" : "path",
          "description" : "KKP Datacenter to use for endpoint",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "Username",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Password",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Organization",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "VDC",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "VMwareCloudDirectorStorageProfileList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VMwareCloudDirectorStorageProfileList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/vmwareclouddirector/{dc}/templates/{catalog_name}" : {
      "get" : {
        "tags" : [ "vmwareclouddirector" ],
        "description" : "List VMware Cloud Director Templates",
        "operationId" : "listVMwareCloudDirectorTemplates",
        "parameters" : [ {
          "name" : "dc",
          "in" : "path",
          "description" : "KKP Datacenter to use for endpoint",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        }, {
          "name" : "Username",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Password",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Organization",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "VDC",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "catalog_name",
          "in" : "path",
          "description" : "Catalog name to fetch the templates from",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "CatalogName"
          },
          "x-go-name" : "CatalogName"
        } ],
        "responses" : {
          "200" : {
            "description" : "VMwareCloudDirectorTemplateList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VMwareCloudDirectorTemplateList"
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/vsphere/datastores" : {
      "get" : {
        "tags" : [ "vsphere" ],
        "description" : "Lists datastores from vsphere datacenter",
        "operationId" : "listVSphereDatastores",
        "parameters" : [ {
          "name" : "Username",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Password",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "DatacenterName",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Credential",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "VSphereDatastoreList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/VSphereDatastoreList"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/providers/{provider_name}/presets" : {
      "get" : {
        "tags" : [ "preset" ],
        "description" : "Lists presets for the provider",
        "operationId" : "listProviderPresets",
        "parameters" : [ {
          "name" : "disabled",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-go-name" : "Disabled"
          },
          "x-go-name" : "Disabled"
        }, {
          "name" : "provider_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProviderName"
          },
          "x-go-name" : "ProviderName"
        }, {
          "name" : "datacenter",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Datacenter"
          },
          "x-go-name" : "Datacenter"
        } ],
        "responses" : {
          "200" : {
            "description" : "PresetList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PresetList"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "preset" ],
        "description" : "Updates provider preset",
        "operationId" : "updatePreset",
        "parameters" : [ {
          "name" : "provider_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProviderName"
          },
          "x-go-name" : "ProviderName"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PresetBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Preset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Preset"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      },
      "post" : {
        "tags" : [ "preset" ],
        "description" : "Creates the preset",
        "operationId" : "createPreset",
        "parameters" : [ {
          "name" : "provider_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProviderName"
          },
          "x-go-name" : "ProviderName"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PresetBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Preset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Preset"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/providers/{provider_name}/presets/{preset_name}" : {
      "delete" : {
        "tags" : [ "preset" ],
        "summary" : "Deletes provider preset.",
        "description" : "This endpoint has been depreciated in favour of /presets/{presets_name} and /presets/{preset_name}/providers/{provider_name}.",
        "operationId" : "deleteProviderPreset",
        "parameters" : [ {
          "name" : "provider_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProviderName"
          },
          "x-go-name" : "ProviderName"
        }, {
          "name" : "preset_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "PresetName"
          },
          "x-go-name" : "PresetName"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/api/v2/providers/{provider_name}/versions" : {
      "get" : {
        "tags" : [ "version" ],
        "description" : "Lists all versions which don't result in automatic updates for a given provider",
        "operationId" : "listVersionsByProvider",
        "parameters" : [ {
          "name" : "provider_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProviderName"
          },
          "x-go-name" : "ProviderName"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Type is deprecated and not used anymore.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Type"
          },
          "x-go-name" : "Type"
        } ],
        "responses" : {
          "200" : {
            "description" : "VersionList",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VersionList"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/quotas" : {
      "get" : {
        "tags" : [ "resourceQuota", "admin" ],
        "summary" : "Gets a Resource Quota list.",
        "operationId" : "listResourceQuotas",
        "parameters" : [ {
          "name" : "subject_name",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "SubjectName"
          },
          "x-go-name" : "SubjectName"
        }, {
          "name" : "subject_kind",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "SubjectKind"
          },
          "x-go-name" : "SubjectKind"
        } ],
        "responses" : {
          "200" : {
            "description" : "ResourceQuota",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceQuota"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "resourceQuota", "admin" ],
        "summary" : "Creates a new Resource Quota.",
        "operationId" : "createResourceQuota",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/v2_quotas_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/quotas/{quota_name}" : {
      "get" : {
        "tags" : [ "resourceQuota", "admin" ],
        "summary" : "Gets a specific Resource Quota.",
        "operationId" : "getResourceQuota",
        "parameters" : [ {
          "name" : "quota_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "x-go-name" : "Name"
        } ],
        "responses" : {
          "200" : {
            "description" : "ResourceQuota",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceQuota"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "resourceQuota", "admin" ],
        "summary" : "Updates an existing Resource Quota.",
        "operationId" : "putResourceQuota",
        "parameters" : [ {
          "name" : "quota_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "x-go-name" : "Name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Quota"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      },
      "delete" : {
        "tags" : [ "resourceQuota", "admin" ],
        "summary" : "Removes an existing Resource Quota.",
        "operationId" : "deleteResourceQuota",
        "parameters" : [ {
          "name" : "quota_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "x-go-name" : "Name"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/seeds/{seed_name}/backupcredentials" : {
      "put" : {
        "tags" : [ "backupcredentials" ],
        "description" : "Creates or updates backup credentials for a given seed",
        "operationId" : "createOrUpdateBackupCredentials",
        "parameters" : [ {
          "name" : "seed_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "SeedName"
          },
          "x-go-name" : "SeedName"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/bcBody"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/seeds/{seed_name}/ipampools" : {
      "get" : {
        "tags" : [ "ipampool" ],
        "summary" : "Lists IPAM pools.",
        "operationId" : "listIPAMPools",
        "parameters" : [ {
          "name" : "seed_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "SeedName"
          },
          "x-go-name" : "SeedName"
        } ],
        "responses" : {
          "200" : {
            "description" : "IPAMPool",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/IPAMPool"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "ipampool" ],
        "summary" : "Creates a IPAM pool.",
        "operationId" : "createIPAMPool",
        "parameters" : [ {
          "name" : "seed_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "SeedName"
          },
          "x-go-name" : "SeedName"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/IPAMPool"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/seeds/{seed_name}/ipampools/{ipampool_name}" : {
      "get" : {
        "tags" : [ "ipampool" ],
        "summary" : "Gets a specific IPAM pool.",
        "operationId" : "getIPAMPool",
        "parameters" : [ {
          "name" : "seed_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "SeedName"
          },
          "x-go-name" : "SeedName"
        }, {
          "name" : "ipampool_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "IPAMPoolName"
          },
          "x-go-name" : "IPAMPoolName"
        } ],
        "responses" : {
          "200" : {
            "description" : "IPAMPool",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IPAMPool"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "ipampool" ],
        "summary" : "Removes an existing IPAM pool.",
        "operationId" : "deleteIPAMPool",
        "parameters" : [ {
          "name" : "seed_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "SeedName"
          },
          "x-go-name" : "SeedName"
        }, {
          "name" : "ipampool_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "IPAMPoolName"
          },
          "x-go-name" : "IPAMPoolName"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "ipampool" ],
        "summary" : "Patches a IPAM pool.",
        "operationId" : "patchIPAMPool",
        "parameters" : [ {
          "name" : "seed_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "SeedName"
          },
          "x-go-name" : "SeedName"
        }, {
          "name" : "ipampool_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "IPAMPoolName"
          },
          "x-go-name" : "IPAMPoolName"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/IPAMPool"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/seeds/{seed_name}/operatingsystemprofiles" : {
      "get" : {
        "tags" : [ "operatingsystemprofile" ],
        "summary" : "Lists Operating System Profiles.",
        "operationId" : "listOperatingSystemProfiles",
        "parameters" : [ {
          "name" : "seed_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "SeedName"
          },
          "x-go-name" : "SeedName"
        } ],
        "responses" : {
          "200" : {
            "description" : "OperatingSystemProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OperatingSystemProfile"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/seeds/{seed_name}/rulegroups" : {
      "get" : {
        "tags" : [ "rulegroup" ],
        "summary" : "Lists rule groups that belong to a given Seed.",
        "operationId" : "listAdminRuleGroups",
        "parameters" : [ {
          "name" : "seed_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "SeedName"
          },
          "x-go-name" : "SeedName"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Type"
          },
          "x-go-name" : "Type"
        } ],
        "responses" : {
          "200" : {
            "description" : "RuleGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RuleGroup"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "rulegroup" ],
        "description" : "Creates a rule group that will belong to the given Seed",
        "operationId" : "createAdminRuleGroup",
        "parameters" : [ {
          "name" : "seed_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "SeedName"
          },
          "x-go-name" : "SeedName"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RuleGroup"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "RuleGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RuleGroup"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      }
    },
    "/api/v2/seeds/{seed_name}/rulegroups/{rulegroup_id}" : {
      "get" : {
        "tags" : [ "rulegroup" ],
        "summary" : "Gets a specified rule group for a given Seed.",
        "operationId" : "getAdminRuleGroup",
        "parameters" : [ {
          "name" : "seed_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "SeedName"
          },
          "x-go-name" : "SeedName"
        }, {
          "name" : "rulegroup_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "RuleGroupID"
          },
          "x-go-name" : "RuleGroupID"
        } ],
        "responses" : {
          "200" : {
            "description" : "RuleGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RuleGroup"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "rulegroup" ],
        "summary" : "Updates the specified rule group for the given Seed.",
        "operationId" : "updateAdminRuleGroup",
        "parameters" : [ {
          "name" : "seed_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "SeedName"
          },
          "x-go-name" : "SeedName"
        }, {
          "name" : "rulegroup_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "RuleGroupID"
          },
          "x-go-name" : "RuleGroupID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RuleGroup"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "RuleGroup",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RuleGroup"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "Body"
      },
      "delete" : {
        "tags" : [ "rulegroup" ],
        "summary" : "Deletes the given rule group that belongs to the Seed.",
        "operationId" : "deleteAdminRuleGroup",
        "parameters" : [ {
          "name" : "seed_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "SeedName"
          },
          "x-go-name" : "SeedName"
        }, {
          "name" : "rulegroup_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "RuleGroupID"
          },
          "x-go-name" : "RuleGroupID"
        } ],
        "responses" : {
          "200" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/seeds/{seed_name}/settings" : {
      "get" : {
        "tags" : [ "seed" ],
        "summary" : "Gets the seed settings.",
        "operationId" : "getSeedSettings",
        "parameters" : [ {
          "name" : "seed_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "x-go-name" : "Name"
        } ],
        "responses" : {
          "200" : {
            "description" : "SeedSettings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SeedSettings"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/users" : {
      "get" : {
        "tags" : [ "user" ],
        "description" : "List users",
        "operationId" : "listUser",
        "responses" : {
          "200" : {
            "description" : "User",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/clusters/{cluster_id}/operatingsystemprofiles" : {
      "get" : {
        "tags" : [ "operatingsystemprofile" ],
        "description" : "Lists all available Operating System Profiles for a cluster",
        "operationId" : "listOperatingSystemProfilesForCluster",
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "x-go-name" : "ProjectID"
        }, {
          "name" : "cluster_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ClusterID"
          },
          "x-go-name" : "ClusterID"
        } ],
        "responses" : {
          "200" : {
            "description" : "OperatingSystemProfile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OperatingSystemProfile"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/providers/{provider_name}/dc/{dc}/networkdefaults" : {
      "get" : {
        "tags" : [ "networkdefaults" ],
        "summary" : "Retrieves the cluster networking defaults for the given provider and datacenter.",
        "operationId" : "getNetworkDefaults",
        "parameters" : [ {
          "name" : "provider_name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "ProviderName"
          },
          "x-go-name" : "ProviderName"
        }, {
          "name" : "dc",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-go-name" : "DC"
          },
          "x-go-name" : "DC"
        } ],
        "responses" : {
          "200" : {
            "description" : "NetworkDefaults",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NetworkDefaults"
                }
              }
            }
          },
          "401" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "403" : {
            "description" : "EmptyResponse is a empty response",
            "content" : { }
          },
          "default" : {
            "description" : "errorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "AKS" : {
        "type" : "object",
        "properties" : {
          "clientID" : {
            "type" : "string",
            "x-go-name" : "ClientID"
          },
          "clientSecret" : {
            "type" : "string",
            "x-go-name" : "ClientSecret"
          },
          "datacenter" : {
            "type" : "string",
            "x-go-name" : "Datacenter"
          },
          "enabled" : {
            "type" : "boolean",
            "x-go-name" : "Enabled"
          },
          "subscriptionID" : {
            "type" : "string",
            "x-go-name" : "SubscriptionID"
          },
          "tenantID" : {
            "type" : "string",
            "x-go-name" : "TenantID"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "AKSCloudSpec" : {
        "type" : "object",
        "properties" : {
          "clientID" : {
            "type" : "string",
            "x-go-name" : "ClientID"
          },
          "clientSecret" : {
            "type" : "string",
            "x-go-name" : "ClientSecret"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "resourceGroup" : {
            "type" : "string",
            "x-go-name" : "ResourceGroup"
          },
          "subscriptionID" : {
            "type" : "string",
            "x-go-name" : "SubscriptionID"
          },
          "tenantID" : {
            "type" : "string",
            "x-go-name" : "TenantID"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "AKSCluster" : {
        "title" : "AKSCluster represents a object of AKS cluster.",
        "type" : "object",
        "properties" : {
          "imported" : {
            "type" : "boolean",
            "x-go-name" : "IsImported"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "resourceGroup" : {
            "type" : "string",
            "x-go-name" : "ResourceGroup"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "AKSClusterList" : {
        "title" : "AKSClusterList represents an list of AKS clusters.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/AKSCluster"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "AKSClusterSpec" : {
        "title" : "AKSClusterSpec Azure Kubernetes Service cluster.",
        "type" : "object",
        "properties" : {
          "createdAt" : {
            "type" : "string",
            "description" : "The timestamp of resource creation (UTC).",
            "format" : "date-time",
            "x-go-name" : "CreatedAt"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The identity that created the resource.",
            "x-go-name" : "CreatedBy"
          },
          "dnsPrefix" : {
            "type" : "string",
            "description" : "DNSPrefix - This cannot be updated once the Managed Cluster has been created.",
            "x-go-name" : "DNSPrefix"
          },
          "enableRBAC" : {
            "type" : "boolean",
            "description" : "EnableRBAC - Whether Kubernetes Role-Based Access Control Enabled.",
            "x-go-name" : "EnableRBAC"
          },
          "fqdn" : {
            "type" : "string",
            "description" : "Fqdn - READ-ONLY; The FQDN of the master pool.",
            "x-go-name" : "Fqdn"
          },
          "fqdnSubdomain" : {
            "type" : "string",
            "description" : "FqdnSubdomain - This cannot be updated once the Managed Cluster has been created.",
            "x-go-name" : "FqdnSubdomain"
          },
          "kubernetesVersion" : {
            "type" : "string",
            "description" : "KubernetesVersion - When you upgrade a supported AKS cluster, Kubernetes minor versions cannot be skipped. All upgrades must be performed sequentially by major version number. For example, upgrades between 1.14.x -> 1.15.x or 1.15.x -> 1.16.x are allowed, however 1.14.x -> 1.16.x is not allowed. See [upgrading an AKS cluster](https://docs.microsoft.com/azure/aks/upgrade-cluster) for more details.",
            "x-go-name" : "KubernetesVersion"
          },
          "location" : {
            "type" : "string",
            "description" : "Location - Resource location",
            "x-go-name" : "Location"
          },
          "machineDeploymentSpec" : {
            "$ref" : "#/components/schemas/AKSMachineDeploymentCloudSpec"
          },
          "networkProfile" : {
            "$ref" : "#/components/schemas/AKSNetworkProfile"
          },
          "privateFQDN" : {
            "type" : "string",
            "description" : "PrivateFQDN - READ-ONLY; The FQDN of private cluster.",
            "x-go-name" : "PrivateFQDN"
          },
          "tags" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Resource tags.",
            "x-go-name" : "Tags"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "AKSLocation" : {
        "title" : "AKSLocation is the object representing Azure Location.",
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The location name.",
            "x-go-name" : "Name"
          },
          "regionCategory" : {
            "type" : "string",
            "description" : "READ-ONLY; The category of the region.",
            "x-go-name" : "RegionCategory"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "AKSLocationList" : {
        "title" : "AKSLocationList represents a list of AKS Location object for node group.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/AKSLocation"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "AKSMachineDeploymentCloudSpec" : {
        "type" : "object",
        "properties" : {
          "basicSettings" : {
            "$ref" : "#/components/schemas/AgentPoolBasics"
          },
          "configuration" : {
            "$ref" : "#/components/schemas/AgentPoolConfig"
          },
          "name" : {
            "type" : "string",
            "description" : "Name - Node pool name must contain only lowercase letters and numbers. For Linux node pools must be 12 or fewer characters.",
            "x-go-name" : "Name"
          },
          "optionalSettings" : {
            "$ref" : "#/components/schemas/AgentPoolOptionalSettings"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "AKSNetworkProfile" : {
        "title" : "AKS NetworkProfile profile of network configuration.",
        "type" : "object",
        "properties" : {
          "dnsServiceIP" : {
            "type" : "string",
            "description" : "DNSServiceIP - An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.",
            "x-go-name" : "DNSServiceIP"
          },
          "dockerBridgeCidr" : {
            "type" : "string",
            "description" : "DockerBridgeCidr - A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.",
            "x-go-name" : "DockerBridgeCidr"
          },
          "loadBalancerSku" : {
            "type" : "string",
            "description" : "LoadBalancerSku - The default is 'standard'. See [Azure Load Balancer SKUs](https://docs.microsoft.com/azure/load-balancer/skus) for more information about the differences between load balancer SKUs. Possible values include: 'LoadBalancerSkuStandard', 'LoadBalancerSkuBasic'",
            "x-go-name" : "LoadBalancerSku"
          },
          "networkMode" : {
            "type" : "string",
            "description" : "NetworkMode - This cannot be specified if networkPlugin is anything other than 'azure'. Possible values include: 'Transparent', 'Bridge'",
            "x-go-name" : "NetworkMode"
          },
          "networkPlugin" : {
            "type" : "string",
            "description" : "NetworkPlugin - Network plugin used for building the Kubernetes network. Possible values include: 'Azure', 'Kubenet'",
            "x-go-name" : "NetworkPlugin"
          },
          "networkPolicy" : {
            "type" : "string",
            "description" : "NetworkPolicy - Network policy used for building the Kubernetes network. Possible values include: 'Calico', 'Azure'",
            "x-go-name" : "NetworkPolicy"
          },
          "outboundType" : {
            "type" : "string",
            "description" : "OutboundType - This can only be set at cluster creation time and cannot be changed later. For more information see [egress outbound type](https://docs.microsoft.com/azure/aks/egress-outboundtype). Possible values include: 'OutboundTypeLoadBalancer', 'OutboundTypeUserDefinedRouting', 'OutboundTypeManagedNATGateway', 'OutboundTypeUserAssignedNATGateway'",
            "x-go-name" : "OutboundType"
          },
          "podCidr" : {
            "type" : "string",
            "description" : "PodCidr - A CIDR notation IP range from which to assign pod IPs when kubenet is used.",
            "x-go-name" : "PodCidr"
          },
          "serviceCidr" : {
            "type" : "string",
            "description" : "ServiceCidr - A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.",
            "x-go-name" : "ServiceCidr"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "AKSNodePoolModes" : {
        "title" : "AKSNodePoolModes represents nodepool modes.",
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "AKSNodegroupScalingConfig" : {
        "type" : "object",
        "properties" : {
          "maxCount" : {
            "type" : "integer",
            "description" : "MaxCount - The maximum number of nodes for auto-scaling",
            "format" : "int32",
            "x-go-name" : "MaxCount"
          },
          "minCount" : {
            "type" : "integer",
            "description" : "MinCount - The minimum number of nodes for auto-scaling",
            "format" : "int32",
            "x-go-name" : "MinCount"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "AKSVMSize" : {
        "title" : "AKSVMSize is the object representing Azure VM sizes.",
        "type" : "object",
        "properties" : {
          "maxDataDiskCount" : {
            "type" : "integer",
            "format" : "int32",
            "x-go-name" : "MaxDataDiskCount"
          },
          "memoryInMB" : {
            "type" : "integer",
            "format" : "int32",
            "x-go-name" : "MemoryInMB"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "numberOfCores" : {
            "type" : "integer",
            "format" : "int32",
            "x-go-name" : "NumberOfCores"
          },
          "numberOfGPUs" : {
            "type" : "integer",
            "format" : "int32",
            "x-go-name" : "NumberOfGPUs"
          },
          "osDiskSizeInMB" : {
            "type" : "integer",
            "format" : "int32",
            "x-go-name" : "OsDiskSizeInMB"
          },
          "resourceDiskSizeInMB" : {
            "type" : "integer",
            "format" : "int32",
            "x-go-name" : "ResourceDiskSizeInMB"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "AKSVMSizeList" : {
        "title" : "AKSVMSizeList represents an array of AKS VM sizes.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/AKSVMSize"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "AWS" : {
        "type" : "object",
        "properties" : {
          "accessKeyID" : {
            "type" : "string",
            "x-go-name" : "AccessKeyID"
          },
          "assumeRoleARN" : {
            "type" : "string",
            "x-go-name" : "AssumeRoleARN"
          },
          "assumeRoleExternalID" : {
            "type" : "string",
            "x-go-name" : "AssumeRoleExternalID"
          },
          "datacenter" : {
            "type" : "string",
            "x-go-name" : "Datacenter"
          },
          "enabled" : {
            "type" : "boolean",
            "x-go-name" : "Enabled"
          },
          "instanceProfileName" : {
            "type" : "string",
            "x-go-name" : "InstanceProfileName"
          },
          "roleARN" : {
            "type" : "string",
            "x-go-name" : "ControlPlaneRoleARN"
          },
          "routeTableID" : {
            "type" : "string",
            "x-go-name" : "RouteTableID"
          },
          "secretAccessKey" : {
            "type" : "string",
            "x-go-name" : "SecretAccessKey"
          },
          "securityGroupID" : {
            "type" : "string",
            "x-go-name" : "SecurityGroupID"
          },
          "vpcID" : {
            "type" : "string",
            "x-go-name" : "VPCID"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "AWSCloudSpec" : {
        "title" : "AWSCloudSpec specifies access data to Amazon Web Services.",
        "type" : "object",
        "properties" : {
          "accessKeyID" : {
            "type" : "string",
            "x-go-name" : "AccessKeyID"
          },
          "assumeRoleARN" : {
            "type" : "string",
            "x-go-name" : "AssumeRoleARN"
          },
          "assumeRoleExternalID" : {
            "type" : "string",
            "x-go-name" : "AssumeRoleExternalID"
          },
          "credentialsReference" : {
            "$ref" : "#/components/schemas/GlobalSecretKeySelector"
          },
          "instanceProfileName" : {
            "type" : "string",
            "x-go-name" : "InstanceProfileName"
          },
          "nodePortsAllowedIPRange" : {
            "type" : "string",
            "description" : "A CIDR range that will be used to allow access to the node port range in the security group to. Only applies if\nthe security group is generated by KKP and not preexisting.\nIf NodePortsAllowedIPRange nor NodePortsAllowedIPRanges is set, the node port range can be accessed from anywhere.",
            "x-go-name" : "NodePortsAllowedIPRange"
          },
          "nodePortsAllowedIPRanges" : {
            "$ref" : "#/components/schemas/NetworkRanges"
          },
          "roleARN" : {
            "type" : "string",
            "description" : "The IAM role, the control plane will use. The control plane will perform an assume-role",
            "x-go-name" : "ControlPlaneRoleARN"
          },
          "routeTableID" : {
            "type" : "string",
            "x-go-name" : "RouteTableID"
          },
          "secretAccessKey" : {
            "type" : "string",
            "x-go-name" : "SecretAccessKey"
          },
          "securityGroupID" : {
            "type" : "string",
            "x-go-name" : "SecurityGroupID"
          },
          "vpcID" : {
            "type" : "string",
            "x-go-name" : "VPCID"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "AWSNodeSpec" : {
        "required" : [ "diskSize", "instanceType", "volumeType" ],
        "type" : "object",
        "properties" : {
          "ami" : {
            "type" : "string",
            "description" : "ami to use. Will be defaulted to a ami for your selected operating system and region. Only set this when you know what you do.",
            "x-go-name" : "AMI"
          },
          "assignPublicIP" : {
            "type" : "boolean",
            "description" : "This flag controls a property of the AWS instance. When set the AWS instance will get a public IP address\nassigned during launch overriding a possible setting in the used AWS subnet.",
            "x-go-name" : "AssignPublicIP"
          },
          "assumeRoleARN" : {
            "type" : "string",
            "description" : "AssumeRoleARN defines the ARN for an IAM role that should be assumed when handling resources on AWS. It will be used\nto acquire temporary security credentials using an STS AssumeRole API operation whenever creating an AWS session.",
            "x-go-name" : "AssumeRoleARN"
          },
          "assumeRoleExternalID" : {
            "type" : "string",
            "description" : "AssumeRoleExternalID is an arbitrary string that may be needed when calling the STS AssumeRole API operation.\nUsing an external ID can help to prevent the \"confused deputy problem\".",
            "x-go-name" : "AssumeRoleExternalID"
          },
          "availabilityZone" : {
            "type" : "string",
            "description" : "Availability zone in which to place the node. It is coupled with the subnet to which the node will belong.",
            "x-go-name" : "AvailabilityZone"
          },
          "diskSize" : {
            "type" : "integer",
            "description" : "size of the volume in gb. Only one volume will be created",
            "format" : "int64",
            "x-go-name" : "VolumeSize"
          },
          "instanceType" : {
            "type" : "string",
            "example" : "t2.micro",
            "x-go-name" : "InstanceType"
          },
          "isSpotInstance" : {
            "type" : "boolean",
            "description" : "IsSpotInstance indicates whether the created machine is an aws ec2 spot instance or on-demand ec2 instance.",
            "x-go-name" : "IsSpotInstance"
          },
          "spotInstanceInterruptionBehavior" : {
            "type" : "string",
            "description" : "SpotInstanceInterruptionBehavior sets the interruption behavior for the spot instance when capacity is no longer\navailable at the price you specified, if there is no capacity, or if a constraint cannot be met. Charges for EBS\nvolume storage apply when an instance is stopped.",
            "x-go-name" : "SpotInstanceInterruptionBehavior"
          },
          "spotInstanceMaxPrice" : {
            "type" : "string",
            "description" : "SpotInstanceMaxPrice is the maximum price you are willing to pay per instance hour. Your instance runs when\nyour maximum price is greater than the Spot Price.",
            "x-go-name" : "SpotInstanceMaxPrice"
          },
          "spotInstancePersistentRequest" : {
            "type" : "boolean",
            "description" : "SpotInstancePersistentRequest ensures that your request will be submitted every time your Spot Instance is terminated.",
            "x-go-name" : "SpotInstancePersistentRequest"
          },
          "subnetID" : {
            "type" : "string",
            "description" : "The VPC subnet to which the node shall be connected.",
            "x-go-name" : "SubnetID"
          },
          "tags" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "additional instance tags",
            "x-go-name" : "Tags"
          },
          "volumeType" : {
            "type" : "string",
            "example" : "gp2, io1, st1, sc1, standard",
            "x-go-name" : "VolumeType"
          }
        },
        "description" : "AWSNodeSpec aws specific node settings",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AWSSecurityGroupList" : {
        "title" : "AWSSecurityGroupList represents an array of AWS Security Group.",
        "type" : "object",
        "properties" : {
          "ids" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "IDs"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AWSSize" : {
        "title" : "AWSSize represents a object of AWS size.",
        "type" : "object",
        "properties" : {
          "architecture" : {
            "type" : "string",
            "x-go-name" : "Architecture"
          },
          "gpus" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "GPUs"
          },
          "memory" : {
            "type" : "number",
            "format" : "float",
            "x-go-name" : "Memory"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "pretty_name" : {
            "type" : "string",
            "x-go-name" : "PrettyName"
          },
          "price" : {
            "type" : "number",
            "format" : "double",
            "x-go-name" : "Price"
          },
          "vcpus" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "VCPUs"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AWSSizeList" : {
        "title" : "AWSSizeList represents an array of AWS sizes.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/AWSSize"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AWSSubnet" : {
        "title" : "AWSSubnet represents a object of AWS availability subnet.",
        "type" : "object",
        "properties" : {
          "availability_zone" : {
            "type" : "string",
            "x-go-name" : "AvailabilityZone"
          },
          "availability_zone_id" : {
            "type" : "string",
            "x-go-name" : "AvailabilityZoneID"
          },
          "available_ip_address_count" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "AvailableIPAddressCount"
          },
          "default" : {
            "type" : "boolean",
            "x-go-name" : "DefaultForAz"
          },
          "id" : {
            "type" : "string",
            "x-go-name" : "ID"
          },
          "ipv4cidr" : {
            "type" : "string",
            "x-go-name" : "IPv4CIDR"
          },
          "ipv6cidr" : {
            "type" : "string",
            "x-go-name" : "IPv6CIDR"
          },
          "isDefaultSubnet" : {
            "type" : "boolean",
            "x-go-name" : "IsDefaultSubnet"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "state" : {
            "type" : "string",
            "x-go-name" : "State"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AWSTag"
            },
            "x-go-name" : "Tags"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AWSSubnetList" : {
        "title" : "AWSSubnetList represents an array of AWS availability subnets.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/AWSSubnet"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AWSTag" : {
        "title" : "AWSTag represents a object of AWS tags.",
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string",
            "x-go-name" : "Key"
          },
          "value" : {
            "type" : "string",
            "x-go-name" : "Value"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AWSVPC" : {
        "title" : "AWSVPC represents a object of AWS VPC.",
        "type" : "object",
        "properties" : {
          "cidrBlock" : {
            "type" : "string",
            "description" : "The primary IPv4 CIDR block for the VPC.",
            "x-go-name" : "CidrBlock"
          },
          "cidrBlockAssociationSet" : {
            "type" : "array",
            "description" : "Information about the IPv4 CIDR blocks associated with the VPC.",
            "items" : {
              "$ref" : "#/components/schemas/AWSVpcCidrBlockAssociation"
            },
            "x-go-name" : "CidrBlockAssociationSet"
          },
          "dhcpOptionsId" : {
            "type" : "string",
            "description" : "The ID of the set of DHCP options you've associated with the VPC (or default\nif the default options are associated with the VPC).",
            "x-go-name" : "DhcpOptionsID"
          },
          "instanceTenancy" : {
            "type" : "string",
            "description" : "The allowed tenancy of instances launched into the VPC.",
            "x-go-name" : "InstanceTenancy"
          },
          "ipv6CidrBlockAssociationSet" : {
            "type" : "array",
            "description" : "Information about the IPv6 CIDR blocks associated with the VPC.",
            "items" : {
              "$ref" : "#/components/schemas/AWSVpcIpv6CidrBlockAssociation"
            },
            "x-go-name" : "Ipv6CidrBlockAssociationSet"
          },
          "isDefault" : {
            "type" : "boolean",
            "description" : "Indicates whether the VPC is the default VPC.",
            "x-go-name" : "IsDefault"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "ownerId" : {
            "type" : "string",
            "description" : "The ID of the AWS account that owns the VPC.",
            "x-go-name" : "OwnerID"
          },
          "state" : {
            "type" : "string",
            "description" : "The current state of the VPC.",
            "x-go-name" : "State"
          },
          "tags" : {
            "type" : "array",
            "description" : "Any tags assigned to the VPC.",
            "items" : {
              "$ref" : "#/components/schemas/AWSTag"
            },
            "x-go-name" : "Tags"
          },
          "vpcId" : {
            "type" : "string",
            "description" : "The ID of the VPC.",
            "x-go-name" : "VpcID"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AWSVPCList" : {
        "title" : "AWSVPCList represents an array of AWS VPC's.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/AWSVPC"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AWSVpcCidrBlockAssociation" : {
        "title" : "AWSVpcCidrBlockAssociation describes an IPv4 CIDR block associated with a VPC.",
        "type" : "object",
        "properties" : {
          "associationId" : {
            "type" : "string",
            "description" : "The association ID for the IPv4 CIDR block.",
            "x-go-name" : "AssociationID"
          },
          "cidrBlock" : {
            "type" : "string",
            "description" : "The IPv4 CIDR block.",
            "x-go-name" : "CidrBlock"
          },
          "state" : {
            "type" : "string",
            "description" : "The state of the CIDR block.",
            "x-go-name" : "State"
          },
          "statusMessage" : {
            "type" : "string",
            "description" : "A message about the status of the CIDR block, if applicable.",
            "x-go-name" : "StatusMessage"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AWSVpcIpv6CidrBlockAssociation" : {
        "title" : "AWSVpcIpv6CidrBlockAssociation describes an IPv6 CIDR block associated with a VPC.",
        "type" : "object",
        "properties" : {
          "associationId" : {
            "type" : "string",
            "description" : "The association ID for the IPv4 CIDR block.",
            "x-go-name" : "AssociationID"
          },
          "cidrBlock" : {
            "type" : "string",
            "description" : "The IPv4 CIDR block.",
            "x-go-name" : "CidrBlock"
          },
          "state" : {
            "type" : "string",
            "description" : "The state of the CIDR block.",
            "x-go-name" : "State"
          },
          "statusMessage" : {
            "type" : "string",
            "description" : "A message about the status of the CIDR block, if applicable.",
            "x-go-name" : "StatusMessage"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AccessibleAddons" : {
        "title" : "AccessibleAddons represents an array of addons that can be configured in the user clusters.",
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "Addon" : {
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Annotations that can be added to the resource",
            "x-go-name" : "Annotations"
          },
          "creationTimestamp" : {
            "type" : "string",
            "description" : "CreationTimestamp is a timestamp representing the server time when this object was created.",
            "format" : "date-time",
            "x-go-name" : "CreationTimestamp"
          },
          "deletionTimestamp" : {
            "type" : "string",
            "description" : "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
            "format" : "date-time",
            "x-go-name" : "DeletionTimestamp"
          },
          "id" : {
            "type" : "string",
            "description" : "ID unique value that identifies the resource generated by the server. Read-Only.",
            "x-go-name" : "ID"
          },
          "name" : {
            "type" : "string",
            "description" : "Name represents human readable name for the resource",
            "x-go-name" : "Name"
          },
          "spec" : {
            "$ref" : "#/components/schemas/AddonSpec"
          }
        },
        "description" : "Addon represents a predefined addon that users may install into their cluster",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AddonConfig" : {
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Annotations that can be added to the resource",
            "x-go-name" : "Annotations"
          },
          "creationTimestamp" : {
            "type" : "string",
            "description" : "CreationTimestamp is a timestamp representing the server time when this object was created.",
            "format" : "date-time",
            "x-go-name" : "CreationTimestamp"
          },
          "deletionTimestamp" : {
            "type" : "string",
            "description" : "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
            "format" : "date-time",
            "x-go-name" : "DeletionTimestamp"
          },
          "id" : {
            "type" : "string",
            "description" : "ID unique value that identifies the resource generated by the server. Read-Only.",
            "x-go-name" : "ID"
          },
          "name" : {
            "type" : "string",
            "description" : "Name represents human readable name for the resource",
            "x-go-name" : "Name"
          },
          "spec" : {
            "$ref" : "#/components/schemas/AddonConfigSpec"
          }
        },
        "description" : "AddonConfig represents a addon configuration",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AddonConfigSpec" : {
        "title" : "AddonConfigSpec specifies configuration of addon.",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Description of the configured addon, it will be displayed in the addon overview in the UI",
            "x-go-name" : "Description"
          },
          "formSpec" : {
            "type" : "array",
            "description" : "Controls that can be set for configured addon",
            "items" : {
              "$ref" : "#/components/schemas/AddonFormControl"
            },
            "x-go-name" : "Controls"
          },
          "logo" : {
            "type" : "string",
            "description" : "Logo of the configured addon, encoded in base64",
            "x-go-name" : "Logo"
          },
          "logoFormat" : {
            "type" : "string",
            "description" : "LogoFormat contains logo format of the configured addon, i.e. svg+xml",
            "x-go-name" : "LogoFormat"
          },
          "shortDescription" : {
            "type" : "string",
            "description" : "ShortDescription of the configured addon that contains more detailed information about the addon,\nit will be displayed in the addon details view in the UI",
            "x-go-name" : "ShortDescription"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "AddonFormControl" : {
        "title" : "AddonFormControl specifies addon form control.",
        "type" : "object",
        "properties" : {
          "displayName" : {
            "type" : "string",
            "description" : "DisplayName is visible in the UI",
            "x-go-name" : "DisplayName"
          },
          "helpText" : {
            "type" : "string",
            "description" : "HelpText is visible in the UI next to the control",
            "x-go-name" : "HelpText"
          },
          "internalName" : {
            "type" : "string",
            "description" : "InternalName is used internally to save in the addon object",
            "x-go-name" : "InternalName"
          },
          "required" : {
            "type" : "boolean",
            "description" : "Required indicates if the control has to be set",
            "x-go-name" : "Required"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of displayed control",
            "x-go-name" : "Type"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "AddonSpec" : {
        "type" : "object",
        "properties" : {
          "continuouslyReconcile" : {
            "type" : "boolean",
            "description" : "ContinuouslyReconcile indicates that the addon cannot be deleted or modified outside of the UI after installation",
            "x-go-name" : "ContinuouslyReconcile"
          },
          "isDefault" : {
            "type" : "boolean",
            "description" : "IsDefault indicates whether the addon is default",
            "x-go-name" : "IsDefault"
          },
          "variables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "properties" : { }
            },
            "description" : "Variables is free form data to use for parsing the manifest templates",
            "x-go-name" : "Variables"
          }
        },
        "description" : "AddonSpec addon specification",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "Admin" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "Email address of the admin user",
            "x-go-name" : "Email"
          },
          "isAdmin" : {
            "type" : "boolean",
            "description" : "IsAdmin indicates admin role",
            "x-go-name" : "IsAdmin"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the admin user",
            "x-go-name" : "Name"
          }
        },
        "description" : "Admin represents admin user",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AdmissionPlugin" : {
        "type" : "object",
        "properties" : {
          "fromVersion" : {
            "$ref" : "#/components/schemas/Semver"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "plugin" : {
            "type" : "string",
            "x-go-name" : "Plugin"
          }
        },
        "description" : "AdmissionPlugin represents an admission plugin",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AdmissionPluginList" : {
        "type" : "array",
        "description" : "AdmissionPluginList represents a list of admission plugins",
        "items" : {
          "type" : "string"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AgentPoolBasics" : {
        "type" : "object",
        "properties" : {
          "availabilityZones" : {
            "type" : "array",
            "description" : "AvailabilityZones - The list of Availability zones to use for nodes. This can only be specified if the AgentPoolType property is 'VirtualMachineScaleSets'.",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "AvailabilityZones"
          },
          "count" : {
            "type" : "integer",
            "description" : "Required: Count - Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0 to 1000 (inclusive) for user pools and in the range of 1 to 1000 (inclusive) for system pools. The default value is 1.",
            "format" : "int32",
            "x-go-name" : "Count"
          },
          "enableAutoScaling" : {
            "type" : "boolean",
            "description" : "EnableAutoScaling - Whether to enable auto-scaler",
            "x-go-name" : "EnableAutoScaling"
          },
          "mode" : {
            "type" : "string",
            "description" : "Mode - Possible values include: 'System', 'User'.",
            "x-go-name" : "Mode"
          },
          "orchestratorVersion" : {
            "type" : "string",
            "description" : "OrchestratorVersion - As a best practice, you should upgrade all node pools in an AKS cluster to the same Kubernetes version. The node pool version must have the same major version as the control plane. The node pool minor version must be within two minor versions of the control plane version. The node pool version cannot be greater than the control plane version. For more information see [upgrading a node pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#upgrade-a-node-pool).",
            "x-go-name" : "OrchestratorVersion"
          },
          "osDiskSizeGB" : {
            "type" : "integer",
            "description" : "The OSDiskSize for Agent agentpool cannot be less than 30GB or larger than 2048GB.",
            "format" : "int32",
            "x-go-name" : "OsDiskSizeGB"
          },
          "scalingConfig" : {
            "$ref" : "#/components/schemas/AKSNodegroupScalingConfig"
          },
          "vmSize" : {
            "type" : "string",
            "description" : "Required: VMSize - VM size availability varies by region. If a node contains insufficient compute resources (memory, cpu, etc) pods might fail to run correctly. For more details on restricted VM sizes, see: https://docs.microsoft.com/azure/aks/quotas-skus-regions",
            "x-go-name" : "VMSize"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "AgentPoolConfig" : {
        "type" : "object",
        "properties" : {
          "enableNodePublicIP" : {
            "type" : "boolean",
            "description" : "EnableNodePublicIP - Some scenarios may require nodes in a node pool to receive their own dedicated public IP addresses. A common scenario is for gaming workloads, where a console needs to make a direct connection to a cloud virtual machine to minimize hops. For more information see [assigning a public IP per node](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#assign-a-public-ip-per-node-for-your-node-pools). The default is false.",
            "x-go-name" : "EnableNodePublicIP"
          },
          "maxPods" : {
            "type" : "integer",
            "description" : "MaxPods - The maximum number of pods that can run on a node.",
            "format" : "int32",
            "x-go-name" : "MaxPods"
          },
          "maxSurge" : {
            "type" : "string",
            "description" : "MaxSurgeUpgradeSetting - This can either be set to an integer (e.g. '5') or a percentage (e.g. '50%'). If a percentage is specified, it is the percentage of the total agent pool size at the time of the upgrade. For percentages, fractional nodes are rounded up. If not specified, the default is 1. For more information, including best practices, see: https://docs.microsoft.com/azure/aks/upgrade-cluster#customize-node-surge-upgrade",
            "x-go-name" : "MaxSurgeUpgradeSetting"
          },
          "osDiskType" : {
            "type" : "string",
            "description" : "OsDiskType - Possible values include: 'Managed', 'Ephemeral'",
            "x-go-name" : "OsDiskType"
          },
          "osType" : {
            "type" : "string",
            "description" : "OsType - Possible values include: 'Linux', 'Windows'. The default value is 'Linux'.\nWindows node pools are not supported on kubenet clusters",
            "x-go-name" : "OsType"
          },
          "podSubnetID" : {
            "type" : "string",
            "description" : "PodSubnetID - If omitted, pod IPs are statically assigned on the node subnet (see vnetSubnetID for more details). This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}",
            "x-go-name" : "PodSubnetID"
          },
          "vnetSubnetID" : {
            "type" : "string",
            "description" : "VnetSubnetID - If this is not specified, a VNET and subnet will be generated and used. If no podSubnetID is specified, this applies to nodes and pods, otherwise it applies to just nodes. This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}",
            "x-go-name" : "VnetSubnetID"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "AgentPoolOptionalSettings" : {
        "type" : "object",
        "properties" : {
          "nodeLabels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "NodeLabels - The node labels to be persisted across all nodes in agent pool.",
            "x-go-name" : "NodeLabels"
          },
          "nodeTaints" : {
            "type" : "array",
            "description" : "NodeTaints - The taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.\nPlacing custom taints on system pool is not supported(except 'CriticalAddonsOnly' taint or taint effect is 'PreferNoSchedule'). Please refer to https://aka.ms/aks/system-taints for detail",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "NodeTaints"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "Alertmanager" : {
        "type" : "object",
        "properties" : {
          "spec" : {
            "$ref" : "#/components/schemas/AlertmanagerSpec"
          }
        },
        "description" : "Alertmanager represents an Alertmanager Configuration",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "AlertmanagerSpec" : {
        "type" : "object",
        "properties" : {
          "config" : {
            "type" : "array",
            "description" : "Config contains the alertmanager configuration in YAML",
            "items" : {
              "type" : "integer",
              "format" : "uint8"
            },
            "x-go-name" : "Config"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "Alibaba" : {
        "type" : "object",
        "properties" : {
          "accessKeyID" : {
            "type" : "string",
            "x-go-name" : "AccessKeyID"
          },
          "accessKeySecret" : {
            "type" : "string",
            "x-go-name" : "AccessKeySecret"
          },
          "datacenter" : {
            "type" : "string",
            "x-go-name" : "Datacenter"
          },
          "enabled" : {
            "type" : "boolean",
            "x-go-name" : "Enabled"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "AlibabaCloudSpec" : {
        "title" : "AlibabaCloudSpec specifies the access data to Alibaba.",
        "type" : "object",
        "properties" : {
          "accessKeyID" : {
            "type" : "string",
            "x-go-name" : "AccessKeyID"
          },
          "accessKeySecret" : {
            "type" : "string",
            "x-go-name" : "AccessKeySecret"
          },
          "credentialsReference" : {
            "$ref" : "#/components/schemas/GlobalSecretKeySelector"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "AlibabaInstanceType" : {
        "title" : "AlibabaInstanceType represents a object of Alibaba instance type.",
        "type" : "object",
        "properties" : {
          "cpuCoreCount" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "CPUCoreCount"
          },
          "gpuCoreCount" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "GPUCoreCount"
          },
          "id" : {
            "type" : "string",
            "x-go-name" : "ID"
          },
          "memorySize" : {
            "type" : "number",
            "format" : "double",
            "x-go-name" : "MemorySize"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AlibabaInstanceTypeList" : {
        "title" : "AlibabaInstanceTypeList represents an array of Alibaba instance types.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/AlibabaInstanceType"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AlibabaNodeSpec" : {
        "type" : "object",
        "properties" : {
          "diskSize" : {
            "type" : "string",
            "x-go-name" : "DiskSize"
          },
          "diskType" : {
            "type" : "string",
            "x-go-name" : "DiskType"
          },
          "instanceType" : {
            "type" : "string",
            "x-go-name" : "InstanceType"
          },
          "internetMaxBandwidthOut" : {
            "type" : "string",
            "x-go-name" : "InternetMaxBandwidthOut"
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "x-go-name" : "Labels"
          },
          "vSwitchID" : {
            "type" : "string",
            "x-go-name" : "VSwitchID"
          },
          "zoneID" : {
            "type" : "string",
            "x-go-name" : "ZoneID"
          }
        },
        "description" : "AlibabaNodeSpec alibaba specific node settings",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AlibabaVSwitch" : {
        "title" : "AlibabaVSwitch represents a object of Alibaba vSwitch.",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "x-go-name" : "ID"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AlibabaVSwitchList" : {
        "title" : "AlibabaVSwitchList represents an array of Alibaba vSwitches.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/AlibabaVSwitch"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AlibabaZone" : {
        "title" : "AlibabaZone represents a object of Alibaba zone.",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "x-go-name" : "ID"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AlibabaZoneList" : {
        "title" : "AlibabaZoneList represents an array of Alibaba zones.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/AlibabaZone"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AllowedRegistry" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "spec" : {
            "$ref" : "#/components/schemas/AllowedRegistrySpec"
          }
        },
        "description" : "AllowedRegistry represents a object containing a allowed image registry prefix",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "AllowedRegistrySpec" : {
        "title" : "AllowedRegistrySpec specifies the data for allowed registry spec.",
        "type" : "object",
        "properties" : {
          "registryPrefix" : {
            "type" : "string",
            "description" : "RegistryPrefix contains the prefix of the registry which will be allowed. User clusters will be able to deploy\nonly images which are prefixed with one of the allowed image registry prefixes.",
            "x-go-name" : "RegistryPrefix"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "AmazonLinuxSpec" : {
        "type" : "object",
        "properties" : {
          "distUpgradeOnBoot" : {
            "type" : "boolean",
            "description" : "do a dist-upgrade on boot and reboot it required afterwards",
            "x-go-name" : "DistUpgradeOnBoot"
          }
        },
        "description" : "AmazonLinuxSpec amazon linux specific settings",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "Anexia" : {
        "type" : "object",
        "properties" : {
          "datacenter" : {
            "type" : "string",
            "x-go-name" : "Datacenter"
          },
          "enabled" : {
            "type" : "boolean",
            "x-go-name" : "Enabled"
          },
          "token" : {
            "type" : "string",
            "description" : "Token is used to authenticate with the Anexia API.",
            "x-go-name" : "Token"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "AnexiaCloudSpec" : {
        "title" : "AnexiaCloudSpec specifies the access data to Anexia.",
        "type" : "object",
        "properties" : {
          "credentialsReference" : {
            "$ref" : "#/components/schemas/GlobalSecretKeySelector"
          },
          "token" : {
            "type" : "string",
            "x-go-name" : "Token"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "AnexiaNodeSpec" : {
        "required" : [ "cpus", "diskSize", "memory", "templateID", "vlanID" ],
        "type" : "object",
        "properties" : {
          "cpus" : {
            "type" : "integer",
            "description" : "CPUs states how many cpus the node will have.",
            "format" : "int64",
            "x-go-name" : "CPUs"
          },
          "diskSize" : {
            "type" : "integer",
            "description" : "DiskSize states the disk size that node will have.",
            "format" : "int64",
            "x-go-name" : "DiskSize"
          },
          "memory" : {
            "type" : "integer",
            "description" : "Memory states the memory that node will have.",
            "format" : "int64",
            "x-go-name" : "Memory"
          },
          "templateID" : {
            "type" : "string",
            "description" : "TemplateID instance template",
            "x-go-name" : "TemplateID"
          },
          "vlanID" : {
            "type" : "string",
            "description" : "VlanID Instance vlanID",
            "x-go-name" : "VlanID"
          }
        },
        "description" : "AnexiaNodeSpec anexia specific node settings",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AnexiaTemplate" : {
        "title" : "AnexiaTemplate represents a object of Anexia template.",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "x-go-name" : "ID"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AnexiaTemplateList" : {
        "title" : "AnexiaTemplateList represents an array of Anexia templates.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/AnexiaTemplate"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AnexiaVlan" : {
        "title" : "AnexiaVlan represents a object of Anexia Vlan.",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "x-go-name" : "ID"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AnexiaVlanList" : {
        "title" : "AnexiaVlanList represents an array of Anexia Vlans.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/AnexiaVlan"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "Application" : {
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Annotations that can be added to the resource",
            "x-go-name" : "Annotations"
          },
          "creationTimestamp" : {
            "type" : "string",
            "description" : "CreationTimestamp is a timestamp representing the server time when this object was created.",
            "format" : "date-time",
            "x-go-name" : "CreationTimestamp"
          },
          "deletionTimestamp" : {
            "type" : "string",
            "description" : "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
            "format" : "date-time",
            "x-go-name" : "DeletionTimestamp"
          },
          "id" : {
            "type" : "string",
            "description" : "ID unique value that identifies the resource generated by the server. Read-Only.",
            "x-go-name" : "ID"
          },
          "name" : {
            "type" : "string",
            "description" : "Name represents human readable name for the resource",
            "x-go-name" : "Name"
          },
          "spec" : {
            "$ref" : "#/components/schemas/ApplicationSpec"
          }
        },
        "description" : "Application represents a set of applications that are to be installed for the cluster",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "ApplicationDefinition" : {
        "title" : "ApplicationDefinition is the object representing an ApplicationDefinition.",
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Annotations that can be added to the resource",
            "x-go-name" : "Annotations"
          },
          "creationTimestamp" : {
            "type" : "string",
            "description" : "CreationTimestamp is a timestamp representing the server time when this object was created.",
            "format" : "date-time",
            "x-go-name" : "CreationTimestamp"
          },
          "deletionTimestamp" : {
            "type" : "string",
            "description" : "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
            "format" : "date-time",
            "x-go-name" : "DeletionTimestamp"
          },
          "id" : {
            "type" : "string",
            "description" : "ID unique value that identifies the resource generated by the server. Read-Only.",
            "x-go-name" : "ID"
          },
          "name" : {
            "type" : "string",
            "description" : "Name represents human readable name for the resource",
            "x-go-name" : "Name"
          },
          "spec" : {
            "$ref" : "#/components/schemas/ApplicationDefinitionSpec"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ApplicationDefinitionSpec" : {
        "title" : "ApplicationDefinitionSpec defines the desired state of ApplicationDefinition.",
        "type" : "object",
        "properties" : {
          "defaultValues" : {
            "$ref" : "#/components/schemas/RawExtension"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the application. what is its purpose",
            "x-go-name" : "Description"
          },
          "method" : {
            "$ref" : "#/components/schemas/TemplateMethod"
          },
          "versions" : {
            "type" : "array",
            "description" : "Available version for this application",
            "items" : {
              "$ref" : "#/components/schemas/ApplicationVersion"
            },
            "x-go-name" : "Versions"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/apps.kubermatic/v1"
      },
      "ApplicationInstallation" : {
        "title" : "ApplicationInstallation is the object representing an ApplicationInstallation.",
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Annotations that can be added to the resource",
            "x-go-name" : "Annotations"
          },
          "creationTimestamp" : {
            "type" : "string",
            "description" : "CreationTimestamp is a timestamp representing the server time when this object was created.",
            "format" : "date-time",
            "x-go-name" : "CreationTimestamp"
          },
          "deletionTimestamp" : {
            "type" : "string",
            "description" : "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
            "format" : "date-time",
            "x-go-name" : "DeletionTimestamp"
          },
          "id" : {
            "type" : "string",
            "description" : "ID unique value that identifies the resource generated by the server. Read-Only.",
            "x-go-name" : "ID"
          },
          "name" : {
            "type" : "string",
            "description" : "Name represents human readable name for the resource",
            "x-go-name" : "Name"
          },
          "namespace" : {
            "type" : "string",
            "x-go-name" : "Namespace"
          },
          "spec" : {
            "$ref" : "#/components/schemas/ApplicationInstallationSpec"
          },
          "status" : {
            "$ref" : "#/components/schemas/ApplicationInstallationStatus"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ApplicationInstallationBody" : {
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Annotations that can be added to the resource",
            "x-go-name" : "Annotations"
          },
          "creationTimestamp" : {
            "type" : "string",
            "description" : "CreationTimestamp is a timestamp representing the server time when this object was created.",
            "format" : "date-time",
            "x-go-name" : "CreationTimestamp"
          },
          "deletionTimestamp" : {
            "type" : "string",
            "description" : "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
            "format" : "date-time",
            "x-go-name" : "DeletionTimestamp"
          },
          "id" : {
            "type" : "string",
            "description" : "ID unique value that identifies the resource generated by the server. Read-Only.",
            "x-go-name" : "ID"
          },
          "name" : {
            "type" : "string",
            "description" : "Name represents human readable name for the resource",
            "x-go-name" : "Name"
          },
          "namespace" : {
            "type" : "string",
            "x-go-name" : "Namespace"
          },
          "spec" : {
            "$ref" : "#/components/schemas/ApplicationInstallationSpec"
          }
        },
        "description" : "ApplicationInstallationBody is the object representing the POST/PUT payload of an ApplicationInstallation",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ApplicationInstallationCondition" : {
        "type" : "object",
        "properties" : {
          "lastHeartbeatTime" : {
            "$ref" : "#/components/schemas/Time"
          },
          "lastTransitionTime" : {
            "$ref" : "#/components/schemas/Time"
          },
          "message" : {
            "type" : "string",
            "description" : "Human readable message indicating details about last transition.",
            "x-go-name" : "Message"
          },
          "reason" : {
            "type" : "string",
            "description" : "(brief) reason for the condition's last transition.",
            "x-go-name" : "Reason"
          },
          "status" : {
            "$ref" : "#/components/schemas/ConditionStatus"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of ApplicationInstallation condition.\nManifestsRetrieved ManifestsRetrieved  ManifestsRetrieved indicates all necessary manifests have been fetched from the external source.\nReady Ready  Ready describes all components have been successfully rolled out and are ready.",
            "enum" : [ "ManifestsRetrieved", "Ready" ],
            "x-go-enum-desc" : "ManifestsRetrieved ManifestsRetrieved  ManifestsRetrieved indicates all necessary manifests have been fetched from the external source.\nReady Ready  Ready describes all components have been successfully rolled out and are ready.",
            "x-go-name" : "Type"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ApplicationInstallationSpec" : {
        "type" : "object",
        "properties" : {
          "applicationRef" : {
            "$ref" : "#/components/schemas/ApplicationRef"
          },
          "namespace" : {
            "$ref" : "#/components/schemas/NamespaceSpec"
          },
          "values" : {
            "$ref" : "#/components/schemas/RawExtension"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/apps.kubermatic/v1"
      },
      "ApplicationInstallationStatus" : {
        "title" : "ApplicationInstallationStatus is the object representing the status of an Application.",
        "type" : "object",
        "properties" : {
          "applicationVersion" : {
            "$ref" : "#/components/schemas/ApplicationVersion"
          },
          "conditions" : {
            "type" : "array",
            "description" : "Conditions contains conditions an installation is in, its primary use case is status signaling between controllers or between controllers and the API",
            "items" : {
              "$ref" : "#/components/schemas/ApplicationInstallationCondition"
            },
            "x-go-name" : "Conditions"
          },
          "method" : {
            "$ref" : "#/components/schemas/TemplateMethod"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ApplicationRef" : {
        "title" : "ApplicationRef describes a KKP-wide, unique reference to an Application.",
        "type" : "object",
        "properties" : {
          "name" : {
            "pattern" : "=`^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$`",
            "type" : "string",
            "description" : "Name of the Application.\nShould be a valid lowercase RFC1123 domain name",
            "x-go-name" : "Name"
          },
          "version" : {
            "$ref" : "#/components/schemas/Version"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/apps.kubermatic/v1"
      },
      "ApplicationSource" : {
        "type" : "object",
        "properties" : {
          "git" : {
            "$ref" : "#/components/schemas/GitSource"
          },
          "helm" : {
            "$ref" : "#/components/schemas/HelmSource"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/apps.kubermatic/v1"
      },
      "ApplicationSpec" : {
        "type" : "object",
        "properties" : {
          "applicationRef" : {
            "$ref" : "#/components/schemas/ApplicationRef"
          },
          "namespace" : {
            "$ref" : "#/components/schemas/NamespaceSpec"
          },
          "values" : {
            "type" : "object",
            "properties" : { },
            "description" : "Values describe overrides for manifest-rendering",
            "x-go-name" : "Values"
          }
        },
        "description" : "ApplicationSpec represents the specification for an application",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "ApplicationTemplate" : {
        "type" : "object",
        "properties" : {
          "source" : {
            "$ref" : "#/components/schemas/ApplicationSource"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/apps.kubermatic/v1"
      },
      "ApplicationVersion" : {
        "type" : "object",
        "properties" : {
          "template" : {
            "$ref" : "#/components/schemas/ApplicationTemplate"
          },
          "version" : {
            "type" : "string",
            "description" : "Version of the application (e.g. v1.2.3)",
            "x-go-name" : "Version"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/apps.kubermatic/v1"
      },
      "AuditLoggingSettings" : {
        "title" : "AuditLoggingSettings configures audit logging functionality.",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "description" : "Enabled will enable or disable audit logging.",
            "x-go-name" : "Enabled"
          },
          "policyPreset" : {
            "$ref" : "#/components/schemas/AuditPolicyPreset"
          },
          "sidecar" : {
            "$ref" : "#/components/schemas/AuditSidecarSettings"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "AuditPolicyPreset" : {
        "type" : "string",
        "description" : "AuditPolicyPreset refers to a pre-defined set of audit policy rules. Supported values\nare `metadata`, `recommended` and `minimal`. See KKP documentation for what each policy preset includes.",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "AuditSidecarConfiguration" : {
        "title" : "AuditSidecarConfiguration defines custom configuration for the fluent-bit sidecar deployed with a kube-apiserver.",
        "type" : "object",
        "properties" : {
          "filters" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            },
            "x-go-name" : "Filters"
          },
          "outputs" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            },
            "x-go-name" : "Outputs"
          },
          "service" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "x-go-name" : "Service"
          }
        },
        "description" : "Also see https://docs.fluentbit.io/manual/v/1.8/administration/configuring-fluent-bit/configuration-file.",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "AuditSidecarSettings" : {
        "type" : "object",
        "properties" : {
          "config" : {
            "$ref" : "#/components/schemas/AuditSidecarConfiguration"
          },
          "resources" : {
            "$ref" : "#/components/schemas/ResourceRequirements"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "Azure" : {
        "type" : "object",
        "properties" : {
          "clientID" : {
            "type" : "string",
            "x-go-name" : "ClientID"
          },
          "clientSecret" : {
            "type" : "string",
            "x-go-name" : "ClientSecret"
          },
          "datacenter" : {
            "type" : "string",
            "x-go-name" : "Datacenter"
          },
          "enabled" : {
            "type" : "boolean",
            "x-go-name" : "Enabled"
          },
          "loadBalancerSKU" : {
            "$ref" : "#/components/schemas/LBSKU"
          },
          "resourceGroup" : {
            "type" : "string",
            "x-go-name" : "ResourceGroup"
          },
          "routeTable" : {
            "type" : "string",
            "x-go-name" : "RouteTableName"
          },
          "securityGroup" : {
            "type" : "string",
            "x-go-name" : "SecurityGroup"
          },
          "subnet" : {
            "type" : "string",
            "x-go-name" : "SubnetName"
          },
          "subscriptionID" : {
            "type" : "string",
            "x-go-name" : "SubscriptionID"
          },
          "tenantID" : {
            "type" : "string",
            "x-go-name" : "TenantID"
          },
          "vnet" : {
            "type" : "string",
            "x-go-name" : "VNetName"
          },
          "vnetResourceGroup" : {
            "type" : "string",
            "x-go-name" : "VNetResourceGroup"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "AzureAvailabilityZonesList" : {
        "type" : "object",
        "properties" : {
          "zones" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Zones"
          }
        },
        "description" : "AzureAvailabilityZonesList is the object representing the availability zones for vms in azure cloud provider",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AzureCloudSpec" : {
        "title" : "AzureCloudSpec defines cloud resource references for Microsoft Azure.",
        "type" : "object",
        "properties" : {
          "assignAvailabilitySet" : {
            "type" : "boolean",
            "description" : "Optional: AssignAvailabilitySet determines whether KKP creates and assigns an AvailabilitySet to machines.\nDefaults to `true` internally if not set.",
            "x-go-name" : "AssignAvailabilitySet"
          },
          "availabilitySet" : {
            "type" : "string",
            "description" : "An availability set that will be associated with nodes created for this cluster. If this field is set to empty string\nat cluster creation and `AssignAvailabilitySet` is set to `true`, a new availability set will be created and this field\nwill be updated to the generated availability set's name.",
            "x-go-name" : "AvailabilitySet"
          },
          "clientID" : {
            "type" : "string",
            "description" : "ClientID is the service principal used to access Azure.\nCan be read from `credentialsReference` instead.",
            "x-go-name" : "ClientID"
          },
          "clientSecret" : {
            "type" : "string",
            "description" : "ClientSecret is the client secret corresponding to the given service principal.\nCan be read from `credentialsReference` instead.",
            "x-go-name" : "ClientSecret"
          },
          "credentialsReference" : {
            "$ref" : "#/components/schemas/GlobalSecretKeySelector"
          },
          "loadBalancerSKU" : {
            "$ref" : "#/components/schemas/LBSKU"
          },
          "nodePortsAllowedIPRange" : {
            "type" : "string",
            "description" : "A CIDR range that will be used to allow access to the node port range in the security group to. Only applies if\nthe security group is generated by KKP and not preexisting.\nIf NodePortsAllowedIPRange nor NodePortsAllowedIPRanges is set, the node port range can be accessed from anywhere.",
            "x-go-name" : "NodePortsAllowedIPRange"
          },
          "nodePortsAllowedIPRanges" : {
            "$ref" : "#/components/schemas/NetworkRanges"
          },
          "resourceGroup" : {
            "type" : "string",
            "description" : "The resource group that will be used to look up and create resources for the cluster in.\nIf set to empty string at cluster creation, a new resource group will be created and this field will be updated to\nthe generated resource group's name.",
            "x-go-name" : "ResourceGroup"
          },
          "routeTable" : {
            "type" : "string",
            "description" : "The name of a route table associated with the subnet referenced by `subnet`.\nIf set to empty string at cluster creation, a new route table will be created and this field will be updated to\nthe generated route table's name. If no subnet is defined at cluster creation, this field should be empty as well.",
            "x-go-name" : "RouteTableName"
          },
          "securityGroup" : {
            "type" : "string",
            "description" : "The name of a security group associated with the subnet referenced by `subnet`.\nIf set to empty string at cluster creation, a new security group will be created and this field will be updated to\nthe generated security group's name. If no subnet is defined at cluster creation, this field should be empty as well.",
            "x-go-name" : "SecurityGroup"
          },
          "subnet" : {
            "type" : "string",
            "description" : "The name of a subnet in the VNet referenced by `vnet`.\nIf set to empty string at cluster creation, a new subnet will be created and this field will be updated to\nthe generated subnet's name. If no VNet is defined at cluster creation, this field should be empty as well.",
            "x-go-name" : "SubnetName"
          },
          "subscriptionID" : {
            "type" : "string",
            "description" : "SubscriptionID is the Azure Subscription used for this cluster.\nCan be read from `credentialsReference` instead.",
            "x-go-name" : "SubscriptionID"
          },
          "tenantID" : {
            "type" : "string",
            "description" : "TenantID is the Azure Active Directory Tenant used for this cluster.\nCan be read from `credentialsReference` instead.",
            "x-go-name" : "TenantID"
          },
          "vnet" : {
            "type" : "string",
            "description" : "The name of the VNet resource used for setting up networking in.\nIf set to empty string at cluster creation, a new VNet will be created and this field will be updated to\nthe generated VNet's name.",
            "x-go-name" : "VNetName"
          },
          "vnetResourceGroup" : {
            "type" : "string",
            "description" : "Optional: VNetResourceGroup optionally defines a second resource group that will be used for VNet related resources instead.\nIf left empty, NO additional resource group will be created and all VNet related resources use the resource group defined by `resourceGroup`.",
            "x-go-name" : "VNetResourceGroup"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "AzureNodeSpec" : {
        "required" : [ "size" ],
        "type" : "object",
        "properties" : {
          "assignAvailabilitySet" : {
            "type" : "boolean",
            "description" : "AssignAvailabilitySet is used to check if an availability set should be created and assigned to the cluster.",
            "x-go-name" : "AssignAvailabilitySet"
          },
          "assignPublicIP" : {
            "type" : "boolean",
            "description" : "should the machine have a publicly accessible IP address",
            "x-go-name" : "AssignPublicIP"
          },
          "dataDiskSize" : {
            "type" : "integer",
            "description" : "Data disk size in GB",
            "format" : "int32",
            "x-go-name" : "DataDiskSize"
          },
          "imageID" : {
            "type" : "string",
            "description" : "ImageID represents the ID of the image that should be used to run the node",
            "x-go-name" : "ImageID"
          },
          "osDiskSize" : {
            "type" : "integer",
            "description" : "OS disk size in GB",
            "format" : "int32",
            "x-go-name" : "OSDiskSize"
          },
          "size" : {
            "type" : "string",
            "description" : "VM size",
            "x-go-name" : "Size"
          },
          "tags" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional metadata to set",
            "x-go-name" : "Tags"
          },
          "zones" : {
            "type" : "array",
            "description" : "Zones represents the availability zones for azure vms",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Zones"
          }
        },
        "description" : "AzureNodeSpec describes settings for an Azure node",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AzureResourceGroupsList" : {
        "type" : "object",
        "properties" : {
          "resourceGroups" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "ResourceGroups"
          }
        },
        "description" : "AzureResourceGroupsList is the object representing the resource groups for vms in azure cloud provider",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AzureRouteTablesList" : {
        "type" : "object",
        "properties" : {
          "routeTables" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "RouteTables"
          }
        },
        "description" : "AzureRouteTablesList is the object representing the route tables for vms in azure cloud provider",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AzureSecurityGroupsList" : {
        "type" : "object",
        "properties" : {
          "securityGroups" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "SecurityGroups"
          }
        },
        "description" : "AzureSecurityGroupsList is the object representing the security groups for vms in azure cloud provider",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AzureSize" : {
        "title" : "AzureSize is the object representing Azure VM sizes.",
        "type" : "object",
        "properties" : {
          "maxDataDiskCount" : {
            "type" : "integer",
            "format" : "int32",
            "x-go-name" : "MaxDataDiskCount"
          },
          "memoryInMB" : {
            "type" : "integer",
            "format" : "int32",
            "x-go-name" : "MemoryInMB"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "numberOfCores" : {
            "type" : "integer",
            "format" : "int32",
            "x-go-name" : "NumberOfCores"
          },
          "numberOfGPUs" : {
            "type" : "integer",
            "format" : "int32",
            "x-go-name" : "NumberOfGPUs"
          },
          "osDiskSizeInMB" : {
            "type" : "integer",
            "format" : "int32",
            "x-go-name" : "OsDiskSizeInMB"
          },
          "resourceDiskSizeInMB" : {
            "type" : "integer",
            "format" : "int32",
            "x-go-name" : "ResourceDiskSizeInMB"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AzureSizeList" : {
        "title" : "AzureSizeList represents an array of Azure VM sizes.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/AzureSize"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AzureSubnetsList" : {
        "type" : "object",
        "properties" : {
          "subnets" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Subnets"
          }
        },
        "description" : "AzureSubnetsList is the object representing the subnets for vms in azure cloud provider",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "AzureVirtualNetworksList" : {
        "type" : "object",
        "properties" : {
          "virtualNetworks" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "VirtualNetworks"
          }
        },
        "description" : "AzureVirtualNetworksList is the object representing the virtual network for vms in azure cloud provider",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "BackupCredentials" : {
        "type" : "object",
        "properties" : {
          "destination" : {
            "type" : "string",
            "description" : "Destination corresponds to the Seeds Seed.Spec.EtcdBackupRestore.Destinations, it defines for which destination\nthe backup credentials will be created. If set, it updates the credentials ref in the related Seed BackupDestination",
            "x-go-name" : "Destination"
          },
          "s3" : {
            "$ref" : "#/components/schemas/S3BackupCredentials"
          }
        },
        "description" : "BackupCredentials contains credentials for etcd backups",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "BackupDestination" : {
        "title" : "BackupDestination defines the bucket name and endpoint as a backup destination, and holds reference to the credentials secret.",
        "type" : "object",
        "properties" : {
          "bucketName" : {
            "type" : "string",
            "description" : "BucketName is the bucket name to use for backup and restore.",
            "x-go-name" : "BucketName"
          },
          "credentials" : {
            "$ref" : "#/components/schemas/SecretReference"
          },
          "endpoint" : {
            "type" : "string",
            "description" : "Endpoint is the API endpoint to use for backup and restore.",
            "x-go-name" : "Endpoint"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "BackupDestinationNames" : {
        "title" : "BackupDestinationNames represents an list of backup destination names.",
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "BackupStatus" : {
        "type" : "object",
        "properties" : {
          "backupFinishedTime" : {
            "$ref" : "#/components/schemas/Time"
          },
          "backupMessage" : {
            "type" : "string",
            "x-go-name" : "BackupMessage"
          },
          "backupName" : {
            "type" : "string",
            "x-go-name" : "BackupName"
          },
          "backupPhase" : {
            "$ref" : "#/components/schemas/BackupStatusPhase"
          },
          "backupStartTime" : {
            "$ref" : "#/components/schemas/Time"
          },
          "deleteFinishedTime" : {
            "$ref" : "#/components/schemas/Time"
          },
          "deleteJobName" : {
            "type" : "string",
            "x-go-name" : "DeleteJobName"
          },
          "deleteMessage" : {
            "type" : "string",
            "x-go-name" : "DeleteMessage"
          },
          "deletePhase" : {
            "$ref" : "#/components/schemas/BackupStatusPhase"
          },
          "deleteStartTime" : {
            "$ref" : "#/components/schemas/Time"
          },
          "jobName" : {
            "type" : "string",
            "x-go-name" : "JobName"
          },
          "scheduledTime" : {
            "$ref" : "#/components/schemas/Time"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "BackupStatusPhase" : {
        "type" : "string",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "BringYourOwnCloudSpec" : {
        "title" : "BringYourOwnCloudSpec specifies access data for a bring your own cluster.",
        "type" : "object",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "BringYourOwnSpec" : {
        "type" : "object",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ByPodStatus" : {
        "type" : "object",
        "properties" : {
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateCRDError"
            },
            "x-go-name" : "Errors"
          },
          "id" : {
            "type" : "string",
            "description" : "a unique identifier for the pod that wrote the status",
            "x-go-name" : "ID"
          },
          "observedGeneration" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "ObservedGeneration"
          }
        },
        "description" : "ByPodStatus defines the observed state of ConstraintTemplate as seen by\nan individual controller\n+kubebuilder:pruning:PreserveUnknownFields",
        "x-go-package" : "github.com/open-policy-agent/frameworks/constraint/pkg/apis/templates/v1"
      },
      "CNIPluginSettings" : {
        "title" : "CNIPluginSettings contains the spec of the CNI plugin used by the Cluster.",
        "type" : "object",
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/CNIPluginType"
          },
          "version" : {
            "type" : "string",
            "description" : "Version defines the CNI plugin version to be used. This varies by chosen CNI plugin type.",
            "x-go-name" : "Version"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "CNIPluginType" : {
        "title" : "CNIPluginType defines the type of CNI plugin installed.",
        "type" : "string",
        "description" : "Possible values are `canal`, `cilium` or `none`.",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "CNIVersions" : {
        "type" : "object",
        "properties" : {
          "cniPluginType" : {
            "type" : "string",
            "description" : "CNIPluginType represents the type of the CNI Plugin",
            "x-go-name" : "CNIPluginType"
          },
          "versions" : {
            "type" : "array",
            "description" : "Versions represents the list of the CNI Plugin versions that are supported",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Versions"
          }
        },
        "description" : "CNIVersions is a list of versions for a CNI Plugin",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "CRD" : {
        "type" : "object",
        "properties" : {
          "spec" : {
            "$ref" : "#/components/schemas/CRDSpec"
          }
        },
        "x-go-package" : "github.com/open-policy-agent/frameworks/constraint/pkg/apis/templates/v1"
      },
      "CRDSpec" : {
        "type" : "object",
        "properties" : {
          "names" : {
            "$ref" : "#/components/schemas/Names"
          },
          "validation" : {
            "$ref" : "#/components/schemas/Validation"
          }
        },
        "x-go-package" : "github.com/open-policy-agent/frameworks/constraint/pkg/apis/templates/v1"
      },
      "CentOSSpec" : {
        "title" : "CentOSSpec contains CentOS specific settings.",
        "type" : "object",
        "properties" : {
          "distUpgradeOnBoot" : {
            "type" : "boolean",
            "description" : "do a dist-upgrade on boot and reboot it required afterwards",
            "x-go-name" : "DistUpgradeOnBoot"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "CleanupOptions" : {
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "x-go-name" : "Enabled"
          },
          "enforced" : {
            "type" : "boolean",
            "x-go-name" : "Enforced"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "CloudSpec" : {
        "title" : "CloudSpec stores configuration options for a given cloud provider. Provider specs are mutually exclusive.",
        "type" : "object",
        "properties" : {
          "alibaba" : {
            "$ref" : "#/components/schemas/AlibabaCloudSpec"
          },
          "anexia" : {
            "$ref" : "#/components/schemas/AnexiaCloudSpec"
          },
          "aws" : {
            "$ref" : "#/components/schemas/AWSCloudSpec"
          },
          "azure" : {
            "$ref" : "#/components/schemas/AzureCloudSpec"
          },
          "bringyourown" : {
            "$ref" : "#/components/schemas/BringYourOwnCloudSpec"
          },
          "dc" : {
            "type" : "string",
            "description" : "DatacenterName states the name of a cloud provider \"datacenter\" (defined in `Seed` resources)\nthis cluster should be deployed into.",
            "x-go-name" : "DatacenterName"
          },
          "digitalocean" : {
            "$ref" : "#/components/schemas/DigitaloceanCloudSpec"
          },
          "fake" : {
            "$ref" : "#/components/schemas/FakeCloudSpec"
          },
          "gcp" : {
            "$ref" : "#/components/schemas/GCPCloudSpec"
          },
          "hetzner" : {
            "$ref" : "#/components/schemas/HetznerCloudSpec"
          },
          "kubevirt" : {
            "$ref" : "#/components/schemas/KubevirtCloudSpec"
          },
          "nutanix" : {
            "$ref" : "#/components/schemas/NutanixCloudSpec"
          },
          "openstack" : {
            "$ref" : "#/components/schemas/OpenstackCloudSpec"
          },
          "packet" : {
            "$ref" : "#/components/schemas/PacketCloudSpec"
          },
          "providerName" : {
            "type" : "string",
            "description" : "ProviderName is the name of the cloud provider used for this cluster.\nThis must match the given provider spec (e.g. if the providerName is\n\"aws\", then the `aws` field must be set).",
            "x-go-name" : "ProviderName"
          },
          "vmwareclouddirector" : {
            "$ref" : "#/components/schemas/VMwareCloudDirectorCloudSpec"
          },
          "vsphere" : {
            "$ref" : "#/components/schemas/VSphereCloudSpec"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "Cluster" : {
        "title" : "Cluster defines the cluster resource",
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Annotations that can be added to the resource",
            "x-go-name" : "Annotations"
          },
          "creationTimestamp" : {
            "type" : "string",
            "description" : "CreationTimestamp is a timestamp representing the server time when this object was created.",
            "format" : "date-time",
            "x-go-name" : "CreationTimestamp"
          },
          "credential" : {
            "type" : "string",
            "x-go-name" : "Credential"
          },
          "deletionTimestamp" : {
            "type" : "string",
            "description" : "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
            "format" : "date-time",
            "x-go-name" : "DeletionTimestamp"
          },
          "id" : {
            "type" : "string",
            "description" : "ID unique value that identifies the resource generated by the server. Read-Only.",
            "x-go-name" : "ID"
          },
          "inheritedLabels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "x-go-name" : "InheritedLabels"
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "x-go-name" : "Labels"
          },
          "machineDeploymentCount" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "MachineDeploymentCount"
          },
          "name" : {
            "type" : "string",
            "description" : "Name represents human readable name for the resource",
            "x-go-name" : "Name"
          },
          "spec" : {
            "$ref" : "#/components/schemas/ClusterSpec"
          },
          "status" : {
            "$ref" : "#/components/schemas/ClusterStatus"
          },
          "type" : {
            "type" : "string",
            "description" : "Type is deprecated and not used anymore.",
            "x-go-name" : "Type"
          }
        },
        "description" : "Note:\nCluster has a custom MarshalJSON method defined\nand thus the output may vary",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "ClusterHealth" : {
        "title" : "ClusterHealth stores health information about the cluster's components.",
        "type" : "object",
        "properties" : {
          "alertmanagerConfig" : {
            "$ref" : "#/components/schemas/HealthStatus"
          },
          "apiserver" : {
            "$ref" : "#/components/schemas/HealthStatus"
          },
          "applicationController" : {
            "$ref" : "#/components/schemas/HealthStatus"
          },
          "cloudProviderInfrastructure" : {
            "$ref" : "#/components/schemas/HealthStatus"
          },
          "controller" : {
            "$ref" : "#/components/schemas/HealthStatus"
          },
          "etcd" : {
            "$ref" : "#/components/schemas/HealthStatus"
          },
          "gatekeeperAudit" : {
            "$ref" : "#/components/schemas/HealthStatus"
          },
          "gatekeeperController" : {
            "$ref" : "#/components/schemas/HealthStatus"
          },
          "kubernetesDashboard" : {
            "$ref" : "#/components/schemas/HealthStatus"
          },
          "logging" : {
            "$ref" : "#/components/schemas/HealthStatus"
          },
          "machineController" : {
            "$ref" : "#/components/schemas/HealthStatus"
          },
          "mlaGateway" : {
            "$ref" : "#/components/schemas/HealthStatus"
          },
          "monitoring" : {
            "$ref" : "#/components/schemas/HealthStatus"
          },
          "operatingSystemManager" : {
            "$ref" : "#/components/schemas/HealthStatus"
          },
          "scheduler" : {
            "$ref" : "#/components/schemas/HealthStatus"
          },
          "userClusterControllerManager" : {
            "$ref" : "#/components/schemas/HealthStatus"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "ClusterList" : {
        "type" : "array",
        "description" : "ClusterList represents a list of clusters",
        "items" : {
          "$ref" : "#/components/schemas/Cluster"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "ClusterMetrics" : {
        "type" : "object",
        "properties" : {
          "controlPlane" : {
            "$ref" : "#/components/schemas/ControlPlaneMetrics"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "nodes" : {
            "$ref" : "#/components/schemas/NodesMetric"
          }
        },
        "description" : "ClusterMetrics defines a metric for the given cluster",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "ClusterNetworkingConfig" : {
        "type" : "object",
        "properties" : {
          "coreDNSReplicas" : {
            "type" : "integer",
            "description" : "CoreDNSReplicas is the number of desired pods of user cluster coredns deployment.",
            "format" : "int32",
            "x-go-name" : "CoreDNSReplicas"
          },
          "dnsDomain" : {
            "type" : "string",
            "description" : "Domain name for services.",
            "x-go-name" : "DNSDomain"
          },
          "ipFamily" : {
            "$ref" : "#/components/schemas/IPFamily"
          },
          "ipvs" : {
            "$ref" : "#/components/schemas/IPVSConfiguration"
          },
          "konnectivityEnabled" : {
            "type" : "boolean",
            "description" : "KonnectivityEnabled enables konnectivity for controlplane to node network communication.",
            "x-go-name" : "KonnectivityEnabled"
          },
          "nodeCidrMaskSizeIPv4" : {
            "type" : "integer",
            "description" : "NodeCIDRMaskSizeIPv4 is the mask size used to address the nodes within provided IPv4 Pods CIDR.\nIt has to be larger than the provided IPv4 Pods CIDR. Defaults to 24.\n+optional",
            "format" : "int32",
            "x-go-name" : "NodeCIDRMaskSizeIPv4"
          },
          "nodeCidrMaskSizeIPv6" : {
            "type" : "integer",
            "description" : "NodeCIDRMaskSizeIPv6 is the mask size used to address the nodes within provided IPv6 Pods CIDR.\nIt has to be larger than the provided IPv6 Pods CIDR. Defaults to 64.\n+optional",
            "format" : "int32",
            "x-go-name" : "NodeCIDRMaskSizeIPv6"
          },
          "nodeLocalDNSCacheEnabled" : {
            "type" : "boolean",
            "description" : "NodeLocalDNSCacheEnabled controls whether the NodeLocal DNS Cache feature is enabled.\nDefaults to true.",
            "x-go-name" : "NodeLocalDNSCacheEnabled"
          },
          "pods" : {
            "$ref" : "#/components/schemas/NetworkRanges"
          },
          "proxyMode" : {
            "type" : "string",
            "description" : "ProxyMode defines the kube-proxy mode (\"ipvs\" / \"iptables\" / \"ebpf\").\nDefaults to \"ipvs\". \"ebpf\" disables kube-proxy and requires CNI support.",
            "x-go-name" : "ProxyMode"
          },
          "services" : {
            "$ref" : "#/components/schemas/NetworkRanges"
          }
        },
        "description" : "ClusterNetworkingConfig specifies the different networking\nparameters for a cluster.",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "ClusterRole" : {
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Annotations that can be added to the resource",
            "x-go-name" : "Annotations"
          },
          "creationTimestamp" : {
            "type" : "string",
            "description" : "CreationTimestamp is a timestamp representing the server time when this object was created.",
            "format" : "date-time",
            "x-go-name" : "CreationTimestamp"
          },
          "deletionTimestamp" : {
            "type" : "string",
            "description" : "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
            "format" : "date-time",
            "x-go-name" : "DeletionTimestamp"
          },
          "id" : {
            "type" : "string",
            "description" : "ID unique value that identifies the resource generated by the server. Read-Only.",
            "x-go-name" : "ID"
          },
          "name" : {
            "type" : "string",
            "description" : "Name represents human readable name for the resource",
            "x-go-name" : "Name"
          },
          "rules" : {
            "type" : "array",
            "description" : "Rules holds all the PolicyRules for this ClusterRole",
            "items" : {
              "$ref" : "#/components/schemas/PolicyRule"
            },
            "x-go-name" : "Rules"
          }
        },
        "description" : "ClusterRole defines cluster RBAC role for the user cluster",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "ClusterRoleBinding" : {
        "title" : "ClusterRoleBinding references a cluster role, but does not contain it.",
        "type" : "object",
        "properties" : {
          "roleRefName" : {
            "type" : "string",
            "x-go-name" : "RoleRefName"
          },
          "subjects" : {
            "type" : "array",
            "description" : "Subjects holds references to the objects the role applies to.",
            "items" : {
              "$ref" : "#/components/schemas/Subject"
            },
            "x-go-name" : "Subjects"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "ClusterRoleName" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the cluster role.",
            "x-go-name" : "Name"
          }
        },
        "description" : "ClusterRoleName defines RBAC cluster role name object for the user cluster",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "ClusterRoleUser" : {
        "type" : "object",
        "properties" : {
          "group" : {
            "type" : "string",
            "x-go-name" : "Group"
          },
          "userEmail" : {
            "type" : "string",
            "x-go-name" : "UserEmail"
          }
        },
        "description" : "ClusterRoleUser defines associated user with cluster role",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "ClusterSpec" : {
        "title" : "ClusterSpec defines the cluster specification.",
        "type" : "object",
        "properties" : {
          "admissionPlugins" : {
            "type" : "array",
            "description" : "Additional Admission Controller plugins",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "AdmissionPlugins"
          },
          "auditLogging" : {
            "$ref" : "#/components/schemas/AuditLoggingSettings"
          },
          "cloud" : {
            "$ref" : "#/components/schemas/CloudSpec"
          },
          "clusterNetwork" : {
            "$ref" : "#/components/schemas/ClusterNetworkingConfig"
          },
          "cniPlugin" : {
            "$ref" : "#/components/schemas/CNIPluginSettings"
          },
          "containerRuntime" : {
            "type" : "string",
            "description" : "ContainerRuntime to use, i.e. Docker or containerd. By default containerd will be used.",
            "x-go-name" : "ContainerRuntime"
          },
          "enableOperatingSystemManager" : {
            "type" : "boolean",
            "description" : "EnableOperatingSystemManager enables OSM which in-turn is responsible for creating and managing worker node configuration.",
            "x-go-name" : "EnableOperatingSystemManager"
          },
          "enableUserSSHKeyAgent" : {
            "type" : "boolean",
            "description" : "EnableUserSSHKeyAgent control whether the UserSSHKeyAgent will be deployed in the user cluster or not.\nIf it was enabled, the agent will be deployed and used to sync the user ssh keys, that the user attach\nto the created cluster. If the agent was disabled, it won't be deployed in the user cluster, thus after\nthe cluster creation any attached ssh keys won't be synced to the worker nodes. Once the agent is enabled/disabled\nit cannot be changed after the cluster is being created.",
            "x-go-name" : "EnableUserSSHKeyAgent"
          },
          "eventRateLimitConfig" : {
            "$ref" : "#/components/schemas/EventRateLimitConfig"
          },
          "kubernetesDashboard" : {
            "$ref" : "#/components/schemas/KubernetesDashboard"
          },
          "machineNetworks" : {
            "type" : "array",
            "description" : "MachineNetworks optionally specifies the parameters for IPAM.",
            "items" : {
              "$ref" : "#/components/schemas/MachineNetworkingConfig"
            },
            "x-go-name" : "MachineNetworks"
          },
          "mla" : {
            "$ref" : "#/components/schemas/MLASettings"
          },
          "oidc" : {
            "$ref" : "#/components/schemas/OIDCSettings"
          },
          "opaIntegration" : {
            "$ref" : "#/components/schemas/OPAIntegrationSettings"
          },
          "podNodeSelectorAdmissionPluginConfig" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "PodNodeSelectorAdmissionPluginConfig provides the configuration for the PodNodeSelector.\nIt's used by the backend to create a configuration file for this plugin.\nThe key:value from the map is converted to the namespace:<node-selectors-labels> in the file.\nThe format in a file:\npodNodeSelectorPluginConfig:\nclusterDefaultNodeSelector: <node-selectors-labels>\nnamespace1: <node-selectors-labels>\nnamespace2: <node-selectors-labels>",
            "x-go-name" : "PodNodeSelectorAdmissionPluginConfig"
          },
          "serviceAccount" : {
            "$ref" : "#/components/schemas/ServiceAccountSettings"
          },
          "updateWindow" : {
            "$ref" : "#/components/schemas/UpdateWindow"
          },
          "useEventRateLimitAdmissionPlugin" : {
            "type" : "boolean",
            "description" : "If active the EventRateLimit admission plugin is configured at the apiserver",
            "x-go-name" : "UseEventRateLimitAdmissionPlugin"
          },
          "usePodNodeSelectorAdmissionPlugin" : {
            "type" : "boolean",
            "description" : "If active the PodNodeSelector admission plugin is configured at the apiserver",
            "x-go-name" : "UsePodNodeSelectorAdmissionPlugin"
          },
          "usePodSecurityPolicyAdmissionPlugin" : {
            "type" : "boolean",
            "description" : "If active the PodSecurityPolicy admission plugin is configured at the apiserver",
            "x-go-name" : "UsePodSecurityPolicyAdmissionPlugin"
          },
          "version" : {
            "$ref" : "#/components/schemas/Semver"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "ClusterStatus" : {
        "title" : "ClusterStatus defines the cluster status.",
        "type" : "object",
        "properties" : {
          "externalCCMMigration" : {
            "$ref" : "#/components/schemas/ExternalCCMMigrationStatus"
          },
          "url" : {
            "type" : "string",
            "description" : "URL specifies the address at which the cluster is available",
            "x-go-name" : "URL"
          },
          "version" : {
            "$ref" : "#/components/schemas/Semver"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "ClusterTemplate" : {
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Annotations that can be added to the resource",
            "x-go-name" : "Annotations"
          },
          "applications" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Application"
            },
            "x-go-name" : "Applications"
          },
          "cluster" : {
            "$ref" : "#/components/schemas/ClusterTemplateInfo"
          },
          "creationTimestamp" : {
            "type" : "string",
            "description" : "CreationTimestamp is a timestamp representing the server time when this object was created.",
            "format" : "date-time",
            "x-go-name" : "CreationTimestamp"
          },
          "deletionTimestamp" : {
            "type" : "string",
            "description" : "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
            "format" : "date-time",
            "x-go-name" : "DeletionTimestamp"
          },
          "id" : {
            "type" : "string",
            "description" : "ID unique value that identifies the resource generated by the server. Read-Only.",
            "x-go-name" : "ID"
          },
          "name" : {
            "type" : "string",
            "description" : "Name represents human readable name for the resource",
            "x-go-name" : "Name"
          },
          "nodeDeployment" : {
            "$ref" : "#/components/schemas/ClusterTemplateNodeDeployment"
          },
          "projectID" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "scope" : {
            "type" : "string",
            "x-go-name" : "Scope"
          },
          "user" : {
            "type" : "string",
            "x-go-name" : "User"
          },
          "userSshKeys" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ClusterTemplateSSHKey"
            },
            "x-go-name" : "UserSSHKeys"
          }
        },
        "description" : "ClusterTemplate represents a ClusterTemplate object",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ClusterTemplateInfo" : {
        "title" : "ClusterTemplateInfo represents a ClusterTemplateInfo object.",
        "type" : "object",
        "properties" : {
          "credential" : {
            "type" : "string",
            "description" : "indicates the preset name",
            "x-go-name" : "Credential"
          },
          "inheritedLabels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "x-go-name" : "InheritedLabels"
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "x-go-name" : "Labels"
          },
          "spec" : {
            "$ref" : "#/components/schemas/ClusterSpec"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ClusterTemplateInstance" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "spec" : {
            "$ref" : "#/components/schemas/ClusterTemplateInstanceSpec"
          }
        },
        "description" : "ClusterTemplateInstance represents a ClusterTemplateInstance object",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ClusterTemplateInstanceSpec" : {
        "title" : "ClusterTemplateInstanceSpec specifies the data for cluster instances.",
        "type" : "object",
        "properties" : {
          "clusterTemplateID" : {
            "type" : "string",
            "x-go-name" : "ClusterTemplateID"
          },
          "clusterTemplateName" : {
            "type" : "string",
            "x-go-name" : "ClusterTemplateName"
          },
          "projectID" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "replicas" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "Replicas"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "ClusterTemplateList" : {
        "type" : "array",
        "description" : "ClusterTemplateList represents a ClusterTemplate list",
        "items" : {
          "$ref" : "#/components/schemas/ClusterTemplate"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ClusterTemplateNodeDeployment" : {
        "type" : "object",
        "properties" : {
          "spec" : {
            "$ref" : "#/components/schemas/NodeDeploymentSpec"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ClusterTemplateSSHKey" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "x-go-name" : "ID"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          }
        },
        "description" : "ClusterTemplateSSHKey represents SSH Key object for Cluster Template",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ConditionStatus" : {
        "type" : "string",
        "x-go-package" : "k8s.io/api/core/v1"
      },
      "Constraint" : {
        "type" : "object",
        "properties" : {
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "x-go-name" : "Labels"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "spec" : {
            "$ref" : "#/components/schemas/ConstraintSpec"
          },
          "status" : {
            "$ref" : "#/components/schemas/ConstraintStatus"
          }
        },
        "description" : "Constraint represents a gatekeeper Constraint",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ConstraintSelector" : {
        "title" : "ConstraintSelector is the object holding the cluster selection filters.",
        "type" : "object",
        "properties" : {
          "labelSelector" : {
            "$ref" : "#/components/schemas/LabelSelector"
          },
          "providers" : {
            "type" : "array",
            "description" : "Providers is a list of cloud providers to which the Constraint applies to. Empty means all providers are selected.",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Providers"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "ConstraintSpec" : {
        "title" : "ConstraintSpec specifies the data for the constraint.",
        "type" : "object",
        "properties" : {
          "constraintType" : {
            "type" : "string",
            "description" : "ConstraintType specifies the type of gatekeeper constraint that the constraint applies to",
            "x-go-name" : "ConstraintType"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disabled  is the flag for disabling OPA constraints",
            "x-go-name" : "Disabled"
          },
          "match" : {
            "$ref" : "#/components/schemas/Match"
          },
          "parameters" : {
            "$ref" : "#/components/schemas/Parameters"
          },
          "selector" : {
            "$ref" : "#/components/schemas/ConstraintSelector"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "ConstraintStatus" : {
        "title" : "ConstraintStatus represents a constraint status which holds audit info.",
        "type" : "object",
        "properties" : {
          "auditTimestamp" : {
            "type" : "string",
            "x-go-name" : "AuditTimestamp"
          },
          "enforcement" : {
            "type" : "string",
            "x-go-name" : "Enforcement"
          },
          "synced" : {
            "type" : "boolean",
            "x-go-name" : "Synced"
          },
          "violations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Violation"
            },
            "x-go-name" : "Violations"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ConstraintTemplate" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "spec" : {
            "$ref" : "#/components/schemas/ConstraintTemplateSpec"
          },
          "status" : {
            "$ref" : "#/components/schemas/ConstraintTemplateStatus"
          }
        },
        "description" : "ConstraintTemplate represents a gatekeeper ConstraintTemplate",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ConstraintTemplateSelector" : {
        "title" : "ConstraintTemplateSelector is the object holding the cluster selection filters.",
        "type" : "object",
        "properties" : {
          "labelSelector" : {
            "$ref" : "#/components/schemas/LabelSelector"
          },
          "providers" : {
            "type" : "array",
            "description" : "Providers is a list of cloud providers to which the Constraint Template applies to. Empty means all providers are selected.",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Providers"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "ConstraintTemplateSpec" : {
        "title" : "ConstraintTemplateSpec is the object representing the gatekeeper constraint template spec and kubermatic related spec.",
        "type" : "object",
        "properties" : {
          "crd" : {
            "$ref" : "#/components/schemas/CRD"
          },
          "selector" : {
            "$ref" : "#/components/schemas/ConstraintTemplateSelector"
          },
          "targets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Target"
            },
            "x-go-name" : "Targets"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "ConstraintTemplateStatus" : {
        "title" : "ConstraintTemplateStatus defines the observed state of ConstraintTemplate.",
        "type" : "object",
        "properties" : {
          "byPod" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ByPodStatus"
            },
            "x-go-name" : "ByPod"
          },
          "created" : {
            "type" : "boolean",
            "x-go-name" : "Created"
          }
        },
        "x-go-package" : "github.com/open-policy-agent/frameworks/constraint/pkg/apis/templates/v1"
      },
      "ContainerRuntimeContainerd" : {
        "title" : "ContainerRuntimeContainerd defines containerd container runtime registries configs.",
        "type" : "object",
        "properties" : {
          "registries" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/ContainerdRegistry"
            },
            "description" : "A map of registries to use to render configs and mirrors for containerd registries",
            "x-go-name" : "Registries"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "ContainerdRegistry" : {
        "title" : "ContainerdRegistry defines endpoints and security for given container registry.",
        "type" : "object",
        "properties" : {
          "mirrors" : {
            "type" : "array",
            "description" : "List of registry mirrors to use",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Mirrors"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "ControlPlaneMetrics" : {
        "type" : "object",
        "properties" : {
          "cpuTotalMillicores" : {
            "type" : "integer",
            "description" : "CPUTotalMillicores in m cores",
            "format" : "int64",
            "x-go-name" : "CPUTotalMillicores"
          },
          "memoryTotalBytes" : {
            "type" : "integer",
            "description" : "MemoryTotalBytes in bytes",
            "format" : "int64",
            "x-go-name" : "MemoryTotalBytes"
          }
        },
        "description" : "ControlPlaneMetrics defines a metric for the user cluster control plane resources",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "CreateCRDError" : {
        "title" : "CreateCRDError represents a single error caught during parsing, compiling, etc.",
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "x-go-name" : "Code"
          },
          "location" : {
            "type" : "string",
            "x-go-name" : "Location"
          },
          "message" : {
            "type" : "string",
            "x-go-name" : "Message"
          }
        },
        "x-go-package" : "github.com/open-policy-agent/frameworks/constraint/pkg/apis/templates/v1"
      },
      "CreateClusterSpec" : {
        "type" : "object",
        "properties" : {
          "applications" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Application"
            },
            "x-go-name" : "Applications"
          },
          "cluster" : {
            "$ref" : "#/components/schemas/Cluster"
          },
          "nodeDeployment" : {
            "$ref" : "#/components/schemas/NodeDeployment"
          }
        },
        "description" : "CreateClusterSpec is the structure that is used to create cluster with its initial node deployment",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "CreateSeedMLASettings" : {
        "type" : "object",
        "properties" : {
          "userClusterMLAEnabled" : {
            "type" : "boolean",
            "description" : "Optional: UserClusterMLAEnabled controls whether the user cluster MLA (Monitoring, Logging & Alerting) stack is enabled in the seed.",
            "x-go-name" : "UserClusterMLAEnabled"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "CreateSeedProxySettings" : {
        "type" : "object",
        "properties" : {
          "httpProxy" : {
            "type" : "string",
            "description" : "Optional: If set, this proxy will be configured for both HTTP and HTTPS.",
            "x-go-name" : "HTTPProxy"
          },
          "noProxy" : {
            "type" : "string",
            "description" : "Optional: If set this will be set as NO_PROXY environment variable on the node;\nThe value must be a comma-separated list of domains for which no proxy\nshould be used, e.g. \"*.example.com,internal.dev\".\nNote that the in-cluster apiserver URL will be automatically prepended\nto this value.",
            "x-go-name" : "NoProxy"
          }
        },
        "description" : "CreateSeedProxySettings allow configuring a HTTP proxy for the controlplanes\nand nodes.",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "CreateSeedSpec" : {
        "title" : "CreateSeedSpec is the structure that is used to create seed.",
        "type" : "object",
        "properties" : {
          "country" : {
            "type" : "string",
            "description" : "Optional: Country of the seed as ISO-3166 two-letter code, e.g. DE or UK.\nFor informational purposes in the Kubermatic dashboard only.",
            "x-go-name" : "Country"
          },
          "defaultClusterTemplate" : {
            "type" : "string",
            "description" : "DefaultClusterTemplate is the name of a cluster template of scope \"seed\" that is used\nto default all new created clusters",
            "x-go-name" : "DefaultClusterTemplate"
          },
          "expose_strategy" : {
            "$ref" : "#/components/schemas/ExposeStrategy"
          },
          "kubeconfig" : {
            "type" : "string",
            "description" : "The raw Kubeconfig encoded to base64. This field is used for cluster creation or update.",
            "x-go-name" : "Kubeconfig"
          },
          "location" : {
            "type" : "string",
            "description" : "Optional: Detailed location of the cluster, like \"Hamburg\" or \"Datacenter 7\".\nFor informational purposes in the Kubermatic dashboard only.",
            "x-go-name" : "Location"
          },
          "mla" : {
            "$ref" : "#/components/schemas/CreateSeedMLASettings"
          },
          "proxy_settings" : {
            "$ref" : "#/components/schemas/CreateSeedProxySettings"
          },
          "seed_dns_overwrite" : {
            "type" : "string",
            "description" : "Optional: This can be used to override the DNS name used for this seed.\nBy default the seed name is used.",
            "x-go-name" : "SeedDNSOverwrite"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "CredentialList" : {
        "title" : "CredentialList represents a object for provider credential names.",
        "type" : "object",
        "properties" : {
          "names" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Names"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "CustomLink" : {
        "type" : "object",
        "properties" : {
          "icon" : {
            "type" : "string",
            "x-go-name" : "Icon"
          },
          "label" : {
            "type" : "string",
            "x-go-name" : "Label"
          },
          "location" : {
            "type" : "string",
            "x-go-name" : "Location"
          },
          "url" : {
            "type" : "string",
            "x-go-name" : "URL"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "CustomLinks" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/CustomLink"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "Datacenter" : {
        "title" : "Datacenter is the object representing a Kubernetes infra datacenter.",
        "type" : "object",
        "properties" : {
          "metadata" : {
            "$ref" : "#/components/schemas/DatacenterMeta"
          },
          "spec" : {
            "$ref" : "#/components/schemas/DatacenterSpec"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "DatacenterList" : {
        "type" : "array",
        "description" : "DatacenterList represents a list of datacenters",
        "items" : {
          "$ref" : "#/components/schemas/Datacenter"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "DatacenterMeta" : {
        "title" : "DatacenterMeta holds datacenter metadata information.",
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "DatacenterSpec" : {
        "title" : "DatacenterSpec specifies the data for a datacenter.",
        "type" : "object",
        "properties" : {
          "alibaba" : {
            "$ref" : "#/components/schemas/DatacenterSpecAlibaba"
          },
          "anexia" : {
            "$ref" : "#/components/schemas/DatacenterSpecAnexia"
          },
          "aws" : {
            "$ref" : "#/components/schemas/DatacenterSpecAWS"
          },
          "azure" : {
            "$ref" : "#/components/schemas/DatacenterSpecAzure"
          },
          "bringyourown" : {
            "$ref" : "#/components/schemas/DatacenterSpecBringYourOwn"
          },
          "country" : {
            "type" : "string",
            "description" : "Optional: Country of the seed as ISO-3166 two-letter code, e.g. DE or UK.\nIt is used for informational purposes.",
            "x-go-name" : "Country"
          },
          "digitalocean" : {
            "$ref" : "#/components/schemas/DatacenterSpecDigitalocean"
          },
          "enforceAuditLogging" : {
            "type" : "boolean",
            "description" : "EnforceAuditLogging enforces audit logging on every cluster within the DC,\nignoring cluster-specific settings.",
            "x-go-name" : "EnforceAuditLogging"
          },
          "enforcePodSecurityPolicy" : {
            "type" : "boolean",
            "description" : "EnforcePodSecurityPolicy enforces pod security policy plugin on every clusters within the DC,\nignoring cluster-specific settings",
            "x-go-name" : "EnforcePodSecurityPolicy"
          },
          "fake" : {
            "$ref" : "#/components/schemas/DatacenterSpecFake"
          },
          "gcp" : {
            "$ref" : "#/components/schemas/DatacenterSpecGCP"
          },
          "hetzner" : {
            "$ref" : "#/components/schemas/DatacenterSpecHetzner"
          },
          "ipv6Enabled" : {
            "type" : "boolean",
            "description" : "IPv6Enabled is a flag to indicate if the ipv6 is enabled for the datacenter.",
            "x-go-name" : "IPv6Enabled"
          },
          "kubevirt" : {
            "$ref" : "#/components/schemas/DatacenterSpecKubevirt"
          },
          "location" : {
            "type" : "string",
            "description" : "Optional: Detailed location of the cluster, like \"Hamburg\" or \"Datacenter 7\".\nIt is used for informational purposes.",
            "x-go-name" : "Location"
          },
          "node" : {
            "$ref" : "#/components/schemas/NodeSettings"
          },
          "nutanix" : {
            "$ref" : "#/components/schemas/DatacenterSpecNutanix"
          },
          "openstack" : {
            "$ref" : "#/components/schemas/DatacenterSpecOpenstack"
          },
          "packet" : {
            "$ref" : "#/components/schemas/DatacenterSpecPacket"
          },
          "provider" : {
            "type" : "string",
            "description" : "Name of the datacenter provider. Extracted based on which provider is defined in the spec.\nIt is used for informational purposes.",
            "x-go-name" : "Provider"
          },
          "requiredEmails" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "RequiredEmails"
          },
          "seed" : {
            "type" : "string",
            "description" : "Name of the seed this datacenter belongs to.",
            "x-go-name" : "Seed"
          },
          "vmwareclouddirector" : {
            "$ref" : "#/components/schemas/DatacenterSpecVMwareCloudDirector"
          },
          "vsphere" : {
            "$ref" : "#/components/schemas/DatacenterSpecVSphere"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "DatacenterSpecAWS" : {
        "title" : "DatacenterSpecAWS describes an AWS datacenter.",
        "type" : "object",
        "properties" : {
          "images" : {
            "$ref" : "#/components/schemas/ImageList"
          },
          "region" : {
            "type" : "string",
            "description" : "The AWS region to use, e.g. \"us-east-1\". For a list of available regions, see\nhttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html",
            "x-go-name" : "Region"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "DatacenterSpecAlibaba" : {
        "title" : "DatacenterSpecAlibaba describes a alibaba datacenter.",
        "type" : "object",
        "properties" : {
          "region" : {
            "type" : "string",
            "description" : "Region to use, for a full list of regions see\nhttps://www.alibabacloud.com/help/doc-detail/40654.htm",
            "x-go-name" : "Region"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "DatacenterSpecAnexia" : {
        "title" : "DatacenterSpecAnexia describes a anexia datacenter.",
        "type" : "object",
        "properties" : {
          "locationID" : {
            "type" : "string",
            "description" : "LocationID the location of the region",
            "x-go-name" : "LocationID"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "DatacenterSpecAzure" : {
        "title" : "DatacenterSpecAzure describes an Azure cloud datacenter.",
        "type" : "object",
        "properties" : {
          "location" : {
            "type" : "string",
            "description" : "Region to use, for example \"westeurope\". A list of available regions can be\nfound at https://azure.microsoft.com/en-us/global-infrastructure/locations/",
            "x-go-name" : "Location"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "DatacenterSpecBringYourOwn" : {
        "title" : "DatacenterSpecBringYourOwn describes a datacenter our of bring your own nodes.",
        "type" : "object",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "DatacenterSpecDigitalocean" : {
        "title" : "DatacenterSpecDigitalocean describes a DigitalOcean datacenter.",
        "type" : "object",
        "properties" : {
          "region" : {
            "type" : "string",
            "description" : "Datacenter location, e.g. \"ams3\". A list of existing datacenters can be found\nat https://www.digitalocean.com/docs/platform/availability-matrix/",
            "x-go-name" : "Region"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "DatacenterSpecFake" : {
        "title" : "DatacenterSpecFake describes a fake datacenter.",
        "type" : "object",
        "properties" : {
          "fakeProperty" : {
            "type" : "string",
            "x-go-name" : "FakeProperty"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "DatacenterSpecGCP" : {
        "title" : "DatacenterSpecGCP describes a GCP datacenter.",
        "type" : "object",
        "properties" : {
          "region" : {
            "type" : "string",
            "description" : "Region to use, for example \"europe-west3\", for a full list of regions see\nhttps://cloud.google.com/compute/docs/regions-zones/",
            "x-go-name" : "Region"
          },
          "regional" : {
            "type" : "boolean",
            "description" : "Optional: Regional clusters spread their resources across multiple availability zones.\nRefer to the official documentation for more details on this:\nhttps://cloud.google.com/kubernetes-engine/docs/concepts/regional-clusters",
            "x-go-name" : "Regional"
          },
          "zoneSuffixes" : {
            "type" : "array",
            "description" : "List of enabled zones, for example [a, c]. See the link above for the available\nzones in your chosen region.",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "ZoneSuffixes"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "DatacenterSpecHetzner" : {
        "title" : "DatacenterSpecHetzner describes a Hetzner cloud datacenter.",
        "type" : "object",
        "properties" : {
          "datacenter" : {
            "type" : "string",
            "description" : "Datacenter location, e.g. \"nbg1-dc3\". A list of existing datacenters can be found\nat https://docs.hetzner.com/general/others/data-centers-and-connection/",
            "x-go-name" : "Datacenter"
          },
          "location" : {
            "type" : "string",
            "description" : "Optional: Detailed location of the datacenter, like \"Hamburg\" or \"Datacenter 7\".\nFor informational purposes only.",
            "x-go-name" : "Location"
          },
          "network" : {
            "type" : "string",
            "description" : "Network is the pre-existing Hetzner network in which the machines are running.\nWhile machines can be in multiple networks, a single one must be chosen for the\nHCloud CCM to work.",
            "x-go-name" : "Network"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "DatacenterSpecKubevirt" : {
        "title" : "DatacenterSpecKubevirt describes a kubevirt datacenter.",
        "type" : "object",
        "properties" : {
          "dnsConfig" : {
            "$ref" : "#/components/schemas/PodDNSConfig"
          },
          "dnsPolicy" : {
            "type" : "string",
            "description" : "DNSPolicy represents the dns policy for the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst',\n'Default' or 'None'. Defaults to \"ClusterFirst\". DNS parameters given in DNSConfig will be merged with the\npolicy selected with DNSPolicy.",
            "x-go-name" : "DNSPolicy"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "DatacenterSpecNutanix" : {
        "title" : "DatacenterSpecNutanix describes a Nutanix datacenter.",
        "type" : "object",
        "properties" : {
          "allowInsecure" : {
            "type" : "boolean",
            "description" : "Optional: AllowInsecure allows to disable the TLS certificate check against the endpoint (defaults to false)",
            "x-go-name" : "AllowInsecure"
          },
          "endpoint" : {
            "type" : "string",
            "description" : "Endpoint to use for accessing Nutanix Prism Central. No protocol or port should be passed,\nfor example \"nutanix.example.com\" or \"10.0.0.1\"",
            "x-go-name" : "Endpoint"
          },
          "images" : {
            "$ref" : "#/components/schemas/ImageList"
          },
          "port" : {
            "type" : "integer",
            "description" : "Optional: Port to use when connecting to the Nutanix Prism Central endpoint (defaults to 9440)",
            "format" : "int32",
            "x-go-name" : "Port"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "DatacenterSpecOpenstack" : {
        "title" : "DatacenterSpecOpenstack describes an OpenStack datacenter.",
        "type" : "object",
        "properties" : {
          "authURL" : {
            "type" : "string",
            "x-go-name" : "AuthURL"
          },
          "availabilityZone" : {
            "type" : "string",
            "x-go-name" : "AvailabilityZone"
          },
          "dnsServers" : {
            "type" : "array",
            "description" : "Used for automatic network creation",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "DNSServers"
          },
          "enabledFlavors" : {
            "type" : "array",
            "description" : "Optional: List of enabled flavors for the given datacenter",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "EnabledFlavors"
          },
          "enforceFloatingIP" : {
            "type" : "boolean",
            "description" : "Optional",
            "x-go-name" : "EnforceFloatingIP"
          },
          "ignoreVolumeAZ" : {
            "type" : "boolean",
            "description" : "Optional",
            "x-go-name" : "IgnoreVolumeAZ"
          },
          "images" : {
            "$ref" : "#/components/schemas/ImageList"
          },
          "ipv6Enabled" : {
            "type" : "boolean",
            "description" : "Optional: defines if the IPv6 is enabled for the datacenter",
            "x-go-name" : "IPv6Enabled"
          },
          "manageSecurityGroups" : {
            "type" : "boolean",
            "description" : "Optional: Gets mapped to the \"manage-security-groups\" setting in the cloud config.\nSee https://kubernetes.io/docs/concepts/cluster-administration/cloud-providers/#load-balancer\nThis setting defaults to true.",
            "x-go-name" : "ManageSecurityGroups"
          },
          "nodeSizeRequirements" : {
            "$ref" : "#/components/schemas/OpenstackNodeSizeRequirements"
          },
          "region" : {
            "type" : "string",
            "x-go-name" : "Region"
          },
          "trustDevicePath" : {
            "type" : "boolean",
            "description" : "Optional: Gets mapped to the \"trust-device-path\" setting in the cloud config.\nSee https://kubernetes.io/docs/concepts/cluster-administration/cloud-providers/#block-storage\nThis setting defaults to false.",
            "x-go-name" : "TrustDevicePath"
          },
          "useOctavia" : {
            "type" : "boolean",
            "description" : "Optional: Gets mapped to the \"use-octavia\" setting in the cloud config.\nuse-octavia is enabled by default in CCM since v1.17.0, and disabled by\ndefault with the in-tree cloud provider.",
            "x-go-name" : "UseOctavia"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "DatacenterSpecPacket" : {
        "title" : "DatacenterSpecPacket describes a Packet datacenter.",
        "type" : "object",
        "properties" : {
          "facilities" : {
            "type" : "array",
            "description" : "The list of enabled facilities, for example \"ams1\", for a full list of available\nfacilities see https://support.packet.com/kb/articles/data-centers",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Facilities"
          },
          "metro" : {
            "type" : "string",
            "description" : "Metros are facilities that are grouped together geographically and share capacity\nand networking features, see https://metal.equinix.com/developers/docs/locations/metros/",
            "x-go-name" : "Metro"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "DatacenterSpecVMwareCloudDirector" : {
        "type" : "object",
        "properties" : {
          "allowInsecure" : {
            "type" : "boolean",
            "description" : "If set to true, disables the TLS certificate check against the endpoint.",
            "x-go-name" : "AllowInsecure"
          },
          "catalog" : {
            "type" : "string",
            "description" : "The default catalog which contains the VM templates.",
            "x-go-name" : "DefaultCatalog"
          },
          "storageProfile" : {
            "type" : "string",
            "description" : "The name of the storage profile to use for disks attached to the VMs.",
            "x-go-name" : "DefaultStorageProfile"
          },
          "templates" : {
            "$ref" : "#/components/schemas/ImageList"
          },
          "url" : {
            "type" : "string",
            "description" : "Endpoint URL to use, including protocol, for example \"https://vclouddirector.example.com\".",
            "x-go-name" : "URL"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "DatacenterSpecVSphere" : {
        "title" : "DatacenterSpecVSphere describes a vSphere datacenter.",
        "type" : "object",
        "properties" : {
          "allowInsecure" : {
            "type" : "boolean",
            "description" : "If set to true, disables the TLS certificate check against the endpoint.",
            "x-go-name" : "AllowInsecure"
          },
          "cluster" : {
            "type" : "string",
            "description" : "The name of the vSphere cluster to use. Used for out-of-tree CSI Driver.",
            "x-go-name" : "Cluster"
          },
          "datacenter" : {
            "type" : "string",
            "description" : "The name of the datacenter to use.",
            "x-go-name" : "Datacenter"
          },
          "datastore" : {
            "type" : "string",
            "description" : "The default Datastore to be used for provisioning volumes using storage\nclasses/dynamic provisioning and for storing virtual machine files in\ncase no `Datastore` or `DatastoreCluster` is provided at Cluster level.",
            "x-go-name" : "DefaultDatastore"
          },
          "endpoint" : {
            "type" : "string",
            "description" : "Endpoint URL to use, including protocol, for example \"https://vcenter.example.com\".",
            "x-go-name" : "Endpoint"
          },
          "infraManagementUser" : {
            "$ref" : "#/components/schemas/VSphereCredentials"
          },
          "ipv6Enabled" : {
            "type" : "boolean",
            "description" : "Optional: defines if the IPv6 is enabled for the datacenter",
            "x-go-name" : "IPv6Enabled"
          },
          "rootPath" : {
            "type" : "string",
            "description" : "Optional: The root path for cluster specific VM folders. Each cluster gets its own\nfolder below the root folder. Must be the FQDN (for example\n\"/datacenter-1/vm/all-kubermatic-vms-in-here\") and defaults to the root VM\nfolder: \"/datacenter-1/vm\"",
            "x-go-name" : "RootPath"
          },
          "storagePolicy" : {
            "type" : "string",
            "description" : "The name of the storage policy to use for the storage class created in the user cluster.",
            "x-go-name" : "DefaultStoragePolicy"
          },
          "templates" : {
            "$ref" : "#/components/schemas/ImageList"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "Digitalocean" : {
        "type" : "object",
        "properties" : {
          "datacenter" : {
            "type" : "string",
            "x-go-name" : "Datacenter"
          },
          "enabled" : {
            "type" : "boolean",
            "x-go-name" : "Enabled"
          },
          "token" : {
            "type" : "string",
            "description" : "Token is used to authenticate with the DigitalOcean API.",
            "x-go-name" : "Token"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "DigitaloceanCloudSpec" : {
        "title" : "DigitaloceanCloudSpec specifies access data to DigitalOcean.",
        "type" : "object",
        "properties" : {
          "credentialsReference" : {
            "$ref" : "#/components/schemas/GlobalSecretKeySelector"
          },
          "token" : {
            "type" : "string",
            "x-go-name" : "Token"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "DigitaloceanNodeSpec" : {
        "required" : [ "size" ],
        "type" : "object",
        "properties" : {
          "backups" : {
            "type" : "boolean",
            "description" : "enable backups for the droplet",
            "x-go-name" : "Backups"
          },
          "ipv6" : {
            "type" : "boolean",
            "description" : "DEPRECATED\nIPv6 is enabled automatically based on IP Family of the cluster so setting this field is not needed.\nenable ipv6 for the droplet",
            "x-go-name" : "IPv6"
          },
          "monitoring" : {
            "type" : "boolean",
            "description" : "enable monitoring for the droplet",
            "x-go-name" : "Monitoring"
          },
          "size" : {
            "type" : "string",
            "description" : "droplet size slug",
            "x-go-name" : "Size"
          },
          "tags" : {
            "type" : "array",
            "description" : "additional droplet tags",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Tags"
          }
        },
        "description" : "DigitaloceanNodeSpec digitalocean node settings",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "DigitaloceanSize" : {
        "title" : "DigitaloceanSize is the object representing digitalocean sizes.",
        "type" : "object",
        "properties" : {
          "available" : {
            "type" : "boolean",
            "x-go-name" : "Available"
          },
          "disk" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "Disk"
          },
          "memory" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "Memory"
          },
          "price_hourly" : {
            "type" : "number",
            "format" : "double",
            "x-go-name" : "PriceHourly"
          },
          "price_monthly" : {
            "type" : "number",
            "format" : "double",
            "x-go-name" : "PriceMonthly"
          },
          "regions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Regions"
          },
          "slug" : {
            "type" : "string",
            "x-go-name" : "Slug"
          },
          "transfer" : {
            "type" : "number",
            "format" : "double",
            "x-go-name" : "Transfer"
          },
          "vcpus" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "VCPUs"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "DigitaloceanSizeList" : {
        "title" : "DigitaloceanSizeList represents a object of digitalocean sizes.",
        "type" : "object",
        "properties" : {
          "optimized" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DigitaloceanSize"
            },
            "x-go-name" : "Optimized"
          },
          "standard" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DigitaloceanSize"
            },
            "x-go-name" : "Standard"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "EKS" : {
        "type" : "object",
        "properties" : {
          "accessKeyID" : {
            "type" : "string",
            "x-go-name" : "AccessKeyID"
          },
          "datacenter" : {
            "type" : "string",
            "x-go-name" : "Datacenter"
          },
          "enabled" : {
            "type" : "boolean",
            "x-go-name" : "Enabled"
          },
          "region" : {
            "type" : "string",
            "x-go-name" : "Region"
          },
          "secretAccessKey" : {
            "type" : "string",
            "x-go-name" : "SecretAccessKey"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "EKSAMITypeList" : {
        "title" : "EKSAMITypeList represents a list of EKS AMI Types for node group.",
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "EKSCapacityTypeList" : {
        "title" : "EKSCapacityTypeList represents a list of EKS Capacity Types for node group.",
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "EKSCloudSpec" : {
        "type" : "object",
        "properties" : {
          "accessKeyID" : {
            "type" : "string",
            "x-go-name" : "AccessKeyID"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "region" : {
            "type" : "string",
            "x-go-name" : "Region"
          },
          "secretAccessKey" : {
            "type" : "string",
            "x-go-name" : "SecretAccessKey"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "EKSCluster" : {
        "title" : "EKSCluster represents a object of EKS cluster.",
        "type" : "object",
        "properties" : {
          "imported" : {
            "type" : "boolean",
            "x-go-name" : "IsImported"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "region" : {
            "type" : "string",
            "x-go-name" : "Region"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "EKSClusterList" : {
        "title" : "EKSClusterList represents a list of EKS clusters.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/EKSCluster"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "EKSClusterSpec" : {
        "type" : "object",
        "properties" : {
          "createdAt" : {
            "type" : "string",
            "description" : "The Unix epoch timestamp in seconds for when the cluster was created.",
            "format" : "date-time",
            "x-go-name" : "CreatedAt"
          },
          "kubernetesNetworkConfig" : {
            "$ref" : "#/components/schemas/EKSKubernetesNetworkConfigResponse"
          },
          "roleArn" : {
            "type" : "string",
            "description" : "The Amazon Resource Name (ARN) of the IAM role that provides permissions\nfor the Kubernetes control plane to make calls to AWS API operations on your\nbehalf. For more information, see Amazon EKS Service IAM Role (https://docs.aws.amazon.com/eks/latest/userguide/service_IAM_role.html)\nin the Amazon EKS User Guide .\n\nRoleArn is a required field",
            "x-go-name" : "RoleArn"
          },
          "tags" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The metadata that you apply to the cluster to assist with categorization\nand organization. Each tag consists of a key and an optional value. You define\nboth. Cluster tags do not propagate to any other resources associated with\nthe cluster.",
            "x-go-name" : "Tags"
          },
          "version" : {
            "type" : "string",
            "description" : "The desired Kubernetes version for your cluster. If you don't specify a value\nhere, the latest version available in Amazon EKS is used.",
            "x-go-name" : "Version"
          },
          "vpcConfigRequest" : {
            "$ref" : "#/components/schemas/VpcConfigRequest"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "EKSInstanceType" : {
        "title" : "EKSInstanceType is the object representing EKS nodegroup instancetype..",
        "type" : "object",
        "properties" : {
          "gpus" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "GPUs"
          },
          "memory" : {
            "type" : "number",
            "format" : "float",
            "x-go-name" : "Memory"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "pretty_name" : {
            "type" : "string",
            "x-go-name" : "PrettyName"
          },
          "vcpus" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "VCPUs"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "EKSInstanceTypeList" : {
        "title" : "EKSInstanceTypeList represents a list of EKS InstanceType object for node group.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/EKSInstanceType"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "EKSKubernetesNetworkConfigResponse" : {
        "type" : "object",
        "properties" : {
          "ipFamily" : {
            "type" : "string",
            "description" : "The IP family used to assign Kubernetes pod and service IP addresses. The\nIP family is always ipv4, unless you have a 1.21 or later cluster running\nversion 1.10.1 or later of the Amazon VPC CNI add-on and specified ipv6 when\nyou created the cluster.",
            "x-go-name" : "IpFamily"
          },
          "serviceIpv4Cidr" : {
            "type" : "string",
            "description" : "The CIDR block that Kubernetes pod and service IP addresses are assigned\nfrom. Kubernetes assigns addresses from an IPv4 CIDR block assigned to a\nsubnet that the node is in. If you didn't specify a CIDR block when you created\nthe cluster, then Kubernetes assigns addresses from either the 10.100.0.0/16\nor 172.20.0.0/16 CIDR blocks. If this was specified, then it was specified\nwhen the cluster was created and it can't be changed.",
            "x-go-name" : "ServiceIpv4Cidr"
          },
          "serviceIpv6Cidr" : {
            "type" : "string",
            "description" : "The CIDR block that Kubernetes pod and service IP addresses are assigned\nfrom if you created a 1.21 or later cluster with version 1.10.1 or later\nof the Amazon VPC CNI add-on and specified ipv6 for ipFamily when you created\nthe cluster. Kubernetes assigns service addresses from the unique local address\nrange (fc00::/7) because you can't specify a custom IPv6 CIDR block when\nyou create the cluster.",
            "x-go-name" : "ServiceIpv6Cidr"
          }
        },
        "description" : "The Kubernetes network configuration for the cluster. The response contains\na value for serviceIpv6Cidr or serviceIpv4Cidr, but not both.",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "EKSMachineDeploymentCloudSpec" : {
        "type" : "object",
        "properties" : {
          "amiType" : {
            "type" : "string",
            "description" : "The AMI type for your node group. GPU instance types should use the AL2_x86_64_GPU\nAMI type. Non-GPU instances should use the AL2_x86_64 AMI type. Arm instances\nshould use the AL2_ARM_64 AMI type. All types use the Amazon EKS optimized\nAmazon Linux 2 AMI. If you specify launchTemplate, and your launch template\nuses a custom AMI, then don't specify amiType, or the node group deployment\nwill fail. For more information about using launch templates with Amazon\nEKS, see Launch template support (https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html)\nin the Amazon EKS User Guide.",
            "x-go-name" : "AmiType"
          },
          "capacityType" : {
            "type" : "string",
            "description" : "The capacity type for your node group. Possible values ON_DEMAND | SPOT",
            "x-go-name" : "CapacityType"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "The Unix epoch timestamp in seconds for when the managed node group was created.",
            "format" : "date-time",
            "x-go-name" : "CreatedAt"
          },
          "diskSize" : {
            "type" : "integer",
            "description" : "The root device disk size (in GiB) for your node group instances. The default\ndisk size is 20 GiB. If you specify launchTemplate, then don't specify diskSize,\nor the node group deployment will fail. For more information about using\nlaunch templates with Amazon EKS, see Launch template support (https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html)\nin the Amazon EKS User Guide.",
            "format" : "int64",
            "x-go-name" : "DiskSize"
          },
          "instanceTypes" : {
            "type" : "array",
            "description" : "Specify the instance types for a node group. If you specify a GPU instance\ntype, be sure to specify AL2_x86_64_GPU with the amiType parameter. If you\nspecify launchTemplate, then you can specify zero or one instance type in\nyour launch template or you can specify 0-20 instance types for instanceTypes.\nIf however, you specify an instance type in your launch template and specify\nany instanceTypes, the node group deployment will fail. If you don't specify\nan instance type in a launch template or for instanceTypes, then t3.medium\nis used, by default. If you specify Spot for capacityType, then we recommend\nspecifying multiple values for instanceTypes. For more information, see Managed\nnode group capacity types (https://docs.aws.amazon.com/eks/latest/userguide/managed-node-groups.html#managed-node-group-capacity-types)\nand Launch template support (https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html)\nin the Amazon EKS User Guide.",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "InstanceTypes"
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The Kubernetes labels to be applied to the nodes in the node group when they\nare created.",
            "x-go-name" : "Labels"
          },
          "nodeRole" : {
            "type" : "string",
            "description" : "The Amazon Resource Name (ARN) of the IAM role to associate with your node\ngroup. The Amazon EKS worker node kubelet daemon makes calls to AWS APIs\non your behalf. Nodes receive permissions for these API calls through an\nIAM instance profile and associated policies. Before you can launch nodes\nand register them into a cluster, you must create an IAM role for those nodes\nto use when they are launched. For more information, see Amazon EKS node\nIAM role (https://docs.aws.amazon.com/eks/latest/userguide/worker_node_IAM_role.html)\nin the Amazon EKS User Guide . If you specify launchTemplate, then don't\nspecify IamInstanceProfile (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_IamInstanceProfile.html)\nin your launch template, or the node group deployment will fail. For more\ninformation about using launch templates with Amazon EKS, see Launch template\nsupport (https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html)\nin the Amazon EKS User Guide.\n\nNodeRole is a required field",
            "x-go-name" : "NodeRole"
          },
          "scalingConfig" : {
            "$ref" : "#/components/schemas/EKSNodegroupScalingConfig"
          },
          "subnets" : {
            "type" : "array",
            "description" : "The subnets to use for the Auto Scaling group that is created for your node\ngroup. These subnets must have the tag key kubernetes.io/cluster/CLUSTER_NAME\nwith a value of shared, where CLUSTER_NAME is replaced with the name of your\ncluster. If you specify launchTemplate, then don't specify SubnetId (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateNetworkInterface.html)\nin your launch template, or the node group deployment will fail. For more\ninformation about using launch templates with Amazon EKS, see Launch template\nsupport (https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html)\nin the Amazon EKS User Guide.\n\nSubnets is a required field",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Subnets"
          },
          "tags" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The metadata applied to the node group to assist with categorization and\norganization. Each tag consists of a key and an optional value. You define\nboth. Node group tags do not propagate to any other resources associated\nwith the node group, such as the Amazon EC2 instances or subnets.",
            "x-go-name" : "Tags"
          },
          "version" : {
            "type" : "string",
            "description" : "The Kubernetes version to use for your managed nodes. By default, the Kubernetes\nversion of the cluster is used, and this is the only accepted specified value.\nIf you specify launchTemplate, and your launch template uses a custom AMI,\nthen don't specify version, or the node group deployment will fail. For more\ninformation about using launch templates with Amazon EKS, see Launch template\nsupport (https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html)\nin the Amazon EKS User Guide.",
            "x-go-name" : "Version"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "EKSNodegroupScalingConfig" : {
        "type" : "object",
        "properties" : {
          "desiredSize" : {
            "type" : "integer",
            "description" : "The current number of nodes that the managed node group should maintain.",
            "format" : "int64",
            "x-go-name" : "DesiredSize"
          },
          "maxSize" : {
            "type" : "integer",
            "description" : "The maximum number of nodes that the managed node group can scale out to.\nFor information about the maximum number that you can specify, see Amazon\nEKS service quotas (https://docs.aws.amazon.com/eks/latest/userguide/service-quotas.html)\nin the Amazon EKS User Guide.",
            "format" : "int64",
            "x-go-name" : "MaxSize"
          },
          "minSize" : {
            "type" : "integer",
            "description" : "The minimum number of nodes that the managed node group can scale in to.\nThis number must be greater than zero.",
            "format" : "int64",
            "x-go-name" : "MinSize"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "EKSRegionList" : {
        "title" : "EKSRegionList represents a list of EKS regions.",
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "EKSSecurityGroup" : {
        "title" : "EKSSecurityGroup represents a object of EKS securityGroup.",
        "type" : "object",
        "properties" : {
          "groupId" : {
            "type" : "string",
            "description" : "The ID of the security group.",
            "x-go-name" : "GroupId"
          },
          "vpcId" : {
            "type" : "string",
            "description" : "[VPC only] The ID of the VPC for the security group.",
            "x-go-name" : "VpcId"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "EKSSecurityGroupList" : {
        "title" : "EKSSecurityGroupList represents an array of EKS securityGroup.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/EKSSecurityGroup"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "EKSSubnet" : {
        "title" : "EKSSubnet represents a object of EKS subnet.",
        "type" : "object",
        "properties" : {
          "availabilityZone" : {
            "type" : "string",
            "description" : "The Availability Zone of the subnet.",
            "x-go-name" : "AvailabilityZone"
          },
          "subnetId" : {
            "type" : "string",
            "description" : "The ID of the subnet.",
            "x-go-name" : "SubnetId"
          },
          "vpcId" : {
            "type" : "string",
            "description" : "The ID of the VPC the subnet is in.",
            "x-go-name" : "VpcId"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "EKSSubnetList" : {
        "title" : "EKSSubnetList represents an array of EKS subnet.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/EKSSubnet"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "EKSVPC" : {
        "title" : "EKSVPC represents a object of EKS VpcId.",
        "type" : "object",
        "properties" : {
          "default" : {
            "type" : "boolean",
            "x-go-name" : "IsDefault"
          },
          "id" : {
            "type" : "string",
            "x-go-name" : "ID"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "EKSVPCList" : {
        "title" : "EKSVPCList represents an array of EKS VPC.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/EKSVPC"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ErrorDetails" : {
        "title" : "ErrorDetails contains details about the error.",
        "required" : [ "code", "message" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "The error code",
            "format" : "int64",
            "x-go-name" : "Code"
          },
          "details" : {
            "type" : "array",
            "description" : "Additional error messages",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Additional"
          },
          "message" : {
            "type" : "string",
            "description" : "The error message",
            "x-go-name" : "Message"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/handler"
      },
      "EtcdBackupConfig" : {
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Annotations that can be added to the resource",
            "x-go-name" : "Annotations"
          },
          "creationTimestamp" : {
            "type" : "string",
            "description" : "CreationTimestamp is a timestamp representing the server time when this object was created.",
            "format" : "date-time",
            "x-go-name" : "CreationTimestamp"
          },
          "deletionTimestamp" : {
            "type" : "string",
            "description" : "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
            "format" : "date-time",
            "x-go-name" : "DeletionTimestamp"
          },
          "id" : {
            "type" : "string",
            "description" : "ID unique value that identifies the resource generated by the server. Read-Only.",
            "x-go-name" : "ID"
          },
          "name" : {
            "type" : "string",
            "description" : "Name represents human readable name for the resource",
            "x-go-name" : "Name"
          },
          "spec" : {
            "$ref" : "#/components/schemas/EtcdBackupConfigSpec"
          },
          "status" : {
            "$ref" : "#/components/schemas/EtcdBackupConfigStatus"
          }
        },
        "description" : "EtcdBackupConfig represents an object holding the configuration for etcd backups",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "EtcdBackupConfigCondition" : {
        "type" : "object",
        "properties" : {
          "lastHeartbeatTime" : {
            "$ref" : "#/components/schemas/Time"
          },
          "lastTransitionTime" : {
            "$ref" : "#/components/schemas/Time"
          },
          "message" : {
            "type" : "string",
            "description" : "Human readable message indicating details about last transition.\n+optional",
            "x-go-name" : "Message"
          },
          "reason" : {
            "type" : "string",
            "description" : "(brief) reason for the condition's last transition.\n+optional",
            "x-go-name" : "Reason"
          },
          "status" : {
            "$ref" : "#/components/schemas/ConditionStatus"
          },
          "type" : {
            "$ref" : "#/components/schemas/EtcdBackupConfigConditionType"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "EtcdBackupConfigConditionType" : {
        "type" : "string",
        "description" : "EtcdBackupConfigConditionType is used to indicate the type of a EtcdBackupConfig condition. For all condition\ntypes, the `true` value must indicate success. All condition types must be registered within\nthe `AllClusterConditionTypes` variable.",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "EtcdBackupConfigSpec" : {
        "type" : "object",
        "properties" : {
          "clusterId" : {
            "type" : "string",
            "description" : "ClusterID is the id of the cluster which will be backed up",
            "x-go-name" : "ClusterID"
          },
          "destination" : {
            "type" : "string",
            "description" : "Destination indicates where the backup will be stored. The destination name should correspond to a destination in\nthe cluster's Seed.Spec.EtcdBackupRestore.",
            "x-go-name" : "Destination"
          },
          "keep" : {
            "type" : "integer",
            "description" : "Keep is the number of backups to keep around before deleting the oldest one\nIf not set, defaults to DefaultKeptBackupsCount. Only used if Schedule is set.",
            "format" : "int64",
            "x-go-name" : "Keep"
          },
          "schedule" : {
            "type" : "string",
            "description" : "Schedule is a cron expression defining when to perform\nthe backup. If not set, the backup is performed exactly\nonce, immediately.",
            "x-go-name" : "Schedule"
          }
        },
        "description" : "EtcdBackupConfigSpec represents an object holding the etcd backup configuration specification",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "EtcdBackupConfigStatus" : {
        "type" : "object",
        "properties" : {
          "cleanupRunning" : {
            "type" : "boolean",
            "description" : "If the controller was configured with a cleanupContainer, CleanupRunning keeps track of the corresponding job",
            "x-go-name" : "CleanupRunning"
          },
          "conditions" : {
            "type" : "array",
            "description" : "Conditions contains conditions of the EtcdBackupConfig",
            "items" : {
              "$ref" : "#/components/schemas/EtcdBackupConfigCondition"
            },
            "x-go-name" : "Conditions"
          },
          "lastBackups" : {
            "type" : "array",
            "description" : "CurrentBackups tracks the creation and deletion progress if all backups managed by the EtcdBackupConfig",
            "items" : {
              "$ref" : "#/components/schemas/BackupStatus"
            },
            "x-go-name" : "CurrentBackups"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "EtcdBackupRestore" : {
        "title" : "EtcdBackupRestore holds the configuration of the automatic backup and restores.",
        "type" : "object",
        "properties" : {
          "defaultDestination" : {
            "type" : "string",
            "description" : "DefaultDestination marks the default destination that will be used for the default etcd backup config which is\ncreated for every user cluster. Has to correspond to a destination in Destinations.\nIf removed, it removes the related default etcd backup configs.",
            "x-go-name" : "DefaultDestination"
          },
          "destinations" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/BackupDestination"
            },
            "description" : "Destinations stores all the possible destinations where the backups for the Seed can be stored. If not empty,\nit enables automatic backup and restore for the seed.",
            "x-go-name" : "Destinations"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "EtcdRestore" : {
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Annotations that can be added to the resource",
            "x-go-name" : "Annotations"
          },
          "creationTimestamp" : {
            "type" : "string",
            "description" : "CreationTimestamp is a timestamp representing the server time when this object was created.",
            "format" : "date-time",
            "x-go-name" : "CreationTimestamp"
          },
          "deletionTimestamp" : {
            "type" : "string",
            "description" : "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
            "format" : "date-time",
            "x-go-name" : "DeletionTimestamp"
          },
          "id" : {
            "type" : "string",
            "description" : "ID unique value that identifies the resource generated by the server. Read-Only.",
            "x-go-name" : "ID"
          },
          "name" : {
            "type" : "string",
            "description" : "Name represents human readable name for the resource",
            "x-go-name" : "Name"
          },
          "spec" : {
            "$ref" : "#/components/schemas/EtcdRestoreSpec"
          },
          "status" : {
            "$ref" : "#/components/schemas/EtcdRestoreStatus"
          }
        },
        "description" : "EtcdRestore represents an object holding the configuration for etcd backup restore",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "EtcdRestorePhase" : {
        "title" : "EtcdRestorePhase represents the lifecycle phase of an EtcdRestore.",
        "type" : "string",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "EtcdRestoreSpec" : {
        "type" : "object",
        "properties" : {
          "backupDownloadCredentialsSecret" : {
            "type" : "string",
            "description" : "BackupDownloadCredentialsSecret is the name of a secret in the cluster-xxx namespace containing\ncredentials needed to download the backup",
            "x-go-name" : "BackupDownloadCredentialsSecret"
          },
          "backupName" : {
            "type" : "string",
            "description" : "BackupName is the name of the backup to restore from",
            "x-go-name" : "BackupName"
          },
          "clusterId" : {
            "type" : "string",
            "description" : "ClusterID is the id of the cluster which will be restored from the backup",
            "x-go-name" : "ClusterID"
          },
          "destination" : {
            "type" : "string",
            "description" : "Destination indicates where the backup was stored. The destination name should correspond to a destination in\nthe cluster's Seed.Spec.EtcdBackupRestore.",
            "x-go-name" : "Destination"
          }
        },
        "description" : "EtcdRestoreSpec represents an object holding the etcd backup restore configuration specification",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "EtcdRestoreStatus" : {
        "type" : "object",
        "properties" : {
          "phase" : {
            "$ref" : "#/components/schemas/EtcdRestorePhase"
          },
          "restoreTime" : {
            "$ref" : "#/components/schemas/Time"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "Event" : {
        "title" : "Event is a report of an event somewhere in the cluster.",
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Annotations that can be added to the resource",
            "x-go-name" : "Annotations"
          },
          "count" : {
            "type" : "integer",
            "description" : "The number of times this event has occurred.",
            "format" : "int32",
            "x-go-name" : "Count"
          },
          "creationTimestamp" : {
            "type" : "string",
            "description" : "CreationTimestamp is a timestamp representing the server time when this object was created.",
            "format" : "date-time",
            "x-go-name" : "CreationTimestamp"
          },
          "deletionTimestamp" : {
            "type" : "string",
            "description" : "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
            "format" : "date-time",
            "x-go-name" : "DeletionTimestamp"
          },
          "id" : {
            "type" : "string",
            "description" : "ID unique value that identifies the resource generated by the server. Read-Only.",
            "x-go-name" : "ID"
          },
          "involvedObject" : {
            "$ref" : "#/components/schemas/ObjectReferenceResource"
          },
          "lastTimestamp" : {
            "type" : "string",
            "description" : "The time at which the most recent occurrence of this event was recorded.",
            "format" : "date-time",
            "x-go-name" : "LastTimestamp"
          },
          "message" : {
            "type" : "string",
            "description" : "A human-readable description of the status of this operation.",
            "x-go-name" : "Message"
          },
          "name" : {
            "type" : "string",
            "description" : "Name represents human readable name for the resource",
            "x-go-name" : "Name"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of this event (i.e. normal or warning). New types could be added in the future.",
            "x-go-name" : "Type"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "EventRateLimitConfig" : {
        "title" : "EventRateLimitConfig configures the `EventRateLimit` admission plugin.",
        "type" : "object",
        "properties" : {
          "namespace" : {
            "$ref" : "#/components/schemas/EventRateLimitConfigItem"
          },
          "server" : {
            "$ref" : "#/components/schemas/EventRateLimitConfigItem"
          },
          "sourceAndObject" : {
            "$ref" : "#/components/schemas/EventRateLimitConfigItem"
          },
          "user" : {
            "$ref" : "#/components/schemas/EventRateLimitConfigItem"
          }
        },
        "description" : "More info: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#eventratelimit",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "EventRateLimitConfigItem" : {
        "type" : "object",
        "properties" : {
          "burst" : {
            "type" : "integer",
            "format" : "int32",
            "x-go-name" : "Burst"
          },
          "cacheSize" : {
            "type" : "integer",
            "format" : "int32",
            "x-go-name" : "CacheSize"
          },
          "qps" : {
            "type" : "integer",
            "format" : "int32",
            "x-go-name" : "QPS"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "ExposeStrategy" : {
        "title" : "ExposeStrategy is the strategy used to expose a cluster control plane.",
        "type" : "string",
        "description" : "Possible values are `NodePort`, `LoadBalancer` or `Tunneling` (requires a feature gate).",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "ExternalCCMMigrationStatus" : {
        "type" : "string",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "ExternalCluster" : {
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Annotations that can be added to the resource",
            "x-go-name" : "Annotations"
          },
          "cloud" : {
            "$ref" : "#/components/schemas/ExternalClusterCloudSpec"
          },
          "creationTimestamp" : {
            "type" : "string",
            "description" : "CreationTimestamp is a timestamp representing the server time when this object was created.",
            "format" : "date-time",
            "x-go-name" : "CreationTimestamp"
          },
          "deletionTimestamp" : {
            "type" : "string",
            "description" : "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
            "format" : "date-time",
            "x-go-name" : "DeletionTimestamp"
          },
          "id" : {
            "type" : "string",
            "description" : "ID unique value that identifies the resource generated by the server. Read-Only.",
            "x-go-name" : "ID"
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "x-go-name" : "Labels"
          },
          "name" : {
            "type" : "string",
            "description" : "Name represents human readable name for the resource",
            "x-go-name" : "Name"
          },
          "spec" : {
            "$ref" : "#/components/schemas/ExternalClusterSpec"
          },
          "status" : {
            "$ref" : "#/components/schemas/ExternalClusterStatus"
          }
        },
        "description" : "ExternalCluster represents an object holding cluster details",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ExternalClusterCloudSpec" : {
        "type" : "object",
        "properties" : {
          "aks" : {
            "$ref" : "#/components/schemas/AKSCloudSpec"
          },
          "bringYourOwn" : {
            "$ref" : "#/components/schemas/BringYourOwnSpec"
          },
          "eks" : {
            "$ref" : "#/components/schemas/EKSCloudSpec"
          },
          "gke" : {
            "$ref" : "#/components/schemas/GKECloudSpec"
          },
          "kubeOne" : {
            "$ref" : "#/components/schemas/KubeOneSpec"
          }
        },
        "description" : "ExternalClusterCloudSpec represents an object holding cluster cloud details",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ExternalClusterMDPhase" : {
        "title" : "ExternalClusterMDPhase defines the external cluster machinedeployment phase.",
        "type" : "object",
        "properties" : {
          "state" : {
            "$ref" : "#/components/schemas/ExternalClusterMDState"
          },
          "statusMessage" : {
            "type" : "string",
            "x-go-name" : "StatusMessage"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ExternalClusterMDState" : {
        "type" : "string",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ExternalClusterMachineDeployment" : {
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Annotations that can be added to the resource",
            "x-go-name" : "Annotations"
          },
          "cloud" : {
            "$ref" : "#/components/schemas/ExternalClusterMachineDeploymentCloudSpec"
          },
          "creationTimestamp" : {
            "type" : "string",
            "description" : "CreationTimestamp is a timestamp representing the server time when this object was created.",
            "format" : "date-time",
            "x-go-name" : "CreationTimestamp"
          },
          "deletionTimestamp" : {
            "type" : "string",
            "description" : "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
            "format" : "date-time",
            "x-go-name" : "DeletionTimestamp"
          },
          "id" : {
            "type" : "string",
            "description" : "ID unique value that identifies the resource generated by the server. Read-Only.",
            "x-go-name" : "ID"
          },
          "name" : {
            "type" : "string",
            "description" : "Name represents human readable name for the resource",
            "x-go-name" : "Name"
          },
          "phase" : {
            "$ref" : "#/components/schemas/ExternalClusterMDPhase"
          },
          "spec" : {
            "$ref" : "#/components/schemas/NodeDeploymentSpec"
          },
          "status" : {
            "$ref" : "#/components/schemas/MachineDeploymentStatus"
          }
        },
        "description" : "ExternalClusterMachineDeployment represents an object holding external cluster machine deployment",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ExternalClusterMachineDeploymentCloudSpec" : {
        "title" : "ExternalClusterMachineDeploymentCloudSpec represents an object holding machine deployment cloud details.",
        "type" : "object",
        "properties" : {
          "aks" : {
            "$ref" : "#/components/schemas/AKSMachineDeploymentCloudSpec"
          },
          "eks" : {
            "$ref" : "#/components/schemas/EKSMachineDeploymentCloudSpec"
          },
          "gke" : {
            "$ref" : "#/components/schemas/GKEMachineDeploymentCloudSpec"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ExternalClusterNode" : {
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Annotations that can be added to the resource",
            "x-go-name" : "Annotations"
          },
          "creationTimestamp" : {
            "type" : "string",
            "description" : "CreationTimestamp is a timestamp representing the server time when this object was created.",
            "format" : "date-time",
            "x-go-name" : "CreationTimestamp"
          },
          "deletionTimestamp" : {
            "type" : "string",
            "description" : "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
            "format" : "date-time",
            "x-go-name" : "DeletionTimestamp"
          },
          "id" : {
            "type" : "string",
            "description" : "ID unique value that identifies the resource generated by the server. Read-Only.",
            "x-go-name" : "ID"
          },
          "name" : {
            "type" : "string",
            "description" : "Name represents human readable name for the resource",
            "x-go-name" : "Name"
          },
          "spec" : {
            "$ref" : "#/components/schemas/NodeSpec"
          },
          "status" : {
            "$ref" : "#/components/schemas/NodeStatus"
          }
        },
        "description" : "ExternalClusterNode represents an object holding external cluster node",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ExternalClusterSpec" : {
        "title" : "ExternalClusterSpec defines the external cluster specification.",
        "type" : "object",
        "properties" : {
          "aksclusterSpec" : {
            "$ref" : "#/components/schemas/AKSClusterSpec"
          },
          "eksclusterSpec" : {
            "$ref" : "#/components/schemas/EKSClusterSpec"
          },
          "gkeclusterSpec" : {
            "$ref" : "#/components/schemas/GKEClusterSpec"
          },
          "version" : {
            "$ref" : "#/components/schemas/Semver"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ExternalClusterState" : {
        "type" : "string",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ExternalClusterStatus" : {
        "title" : "ExternalClusterStatus defines the external cluster status.",
        "type" : "object",
        "properties" : {
          "state" : {
            "$ref" : "#/components/schemas/ExternalClusterState"
          },
          "statusMessage" : {
            "type" : "string",
            "x-go-name" : "StatusMessage"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ExternalDocumentation" : {
        "title" : "ExternalDocumentation allows referencing an external resource for extended documentation.",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "x-go-name" : "Description"
          },
          "url" : {
            "type" : "string",
            "x-go-name" : "URL"
          }
        },
        "x-go-package" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
      },
      "Fake" : {
        "type" : "object",
        "properties" : {
          "datacenter" : {
            "type" : "string",
            "x-go-name" : "Datacenter"
          },
          "enabled" : {
            "type" : "boolean",
            "x-go-name" : "Enabled"
          },
          "token" : {
            "type" : "string",
            "x-go-name" : "Token"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "FakeCloudSpec" : {
        "title" : "FakeCloudSpec specifies access data for a fake cloud.",
        "type" : "object",
        "properties" : {
          "token" : {
            "type" : "string",
            "x-go-name" : "Token"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "FeatureGates" : {
        "type" : "object",
        "properties" : {
          "konnectivityService" : {
            "type" : "boolean",
            "x-go-name" : "KonnectivityService"
          },
          "oidcKubeCfgEndpoint" : {
            "type" : "boolean",
            "x-go-name" : "OIDCKubeCfgEndpoint"
          },
          "operatingSystemManager" : {
            "type" : "boolean",
            "x-go-name" : "OperatingSystemManager"
          }
        },
        "description" : "FeatureGates represents an object holding feature gate settings",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "FlatcarSpec" : {
        "type" : "object",
        "properties" : {
          "disableAutoUpdate" : {
            "type" : "boolean",
            "description" : "disable flatcar linux auto-update feature",
            "x-go-name" : "DisableAutoUpdate"
          }
        },
        "description" : "FlatcarSpec contains Flatcar Linux specific settings",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "GCP" : {
        "type" : "object",
        "properties" : {
          "datacenter" : {
            "type" : "string",
            "x-go-name" : "Datacenter"
          },
          "enabled" : {
            "type" : "boolean",
            "x-go-name" : "Enabled"
          },
          "network" : {
            "type" : "string",
            "x-go-name" : "Network"
          },
          "serviceAccount" : {
            "type" : "string",
            "x-go-name" : "ServiceAccount"
          },
          "subnetwork" : {
            "type" : "string",
            "x-go-name" : "Subnetwork"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "GCPCloudSpec" : {
        "title" : "GCPCloudSpec specifies access data to GCP.",
        "type" : "object",
        "properties" : {
          "credentialsReference" : {
            "$ref" : "#/components/schemas/GlobalSecretKeySelector"
          },
          "network" : {
            "type" : "string",
            "x-go-name" : "Network"
          },
          "nodePortsAllowedIPRange" : {
            "type" : "string",
            "description" : "A CIDR range that will be used to allow access to the node port range in the firewall rules to.\nIf NodePortsAllowedIPRange nor NodePortsAllowedIPRanges is set, the node port range can be accessed from anywhere.",
            "x-go-name" : "NodePortsAllowedIPRange"
          },
          "nodePortsAllowedIPRanges" : {
            "$ref" : "#/components/schemas/NetworkRanges"
          },
          "serviceAccount" : {
            "type" : "string",
            "description" : "The Google Service Account (JSON format), encoded with base64.",
            "x-go-name" : "ServiceAccount"
          },
          "subnetwork" : {
            "type" : "string",
            "x-go-name" : "Subnetwork"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "GCPDiskType" : {
        "title" : "GCPDiskType represents a object of GCP disk type.",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "x-go-name" : "Description"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "GCPDiskTypeList" : {
        "title" : "GCPDiskTypeList represents an array of GCP disk types.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/GCPDiskType"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "GCPMachineSize" : {
        "title" : "GCPMachineSize represents a object of GCP machine size.",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "x-go-name" : "Description"
          },
          "memory" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "Memory"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "vcpus" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "VCPUs"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "GCPMachineSizeList" : {
        "title" : "GCPMachineSizeList represents an array of GCP machine sizes.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/GCPMachineSize"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "GCPNetwork" : {
        "title" : "GCPNetwork represents a object of GCP networks.",
        "type" : "object",
        "properties" : {
          "autoCreateSubnetworks" : {
            "type" : "boolean",
            "x-go-name" : "AutoCreateSubnetworks"
          },
          "id" : {
            "type" : "integer",
            "format" : "uint64",
            "x-go-name" : "ID"
          },
          "kind" : {
            "type" : "string",
            "x-go-name" : "Kind"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "path" : {
            "type" : "string",
            "x-go-name" : "Path"
          },
          "subnetworks" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Subnetworks"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "GCPNetworkList" : {
        "title" : "GCPNetworkList represents an array of GCP networks.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/GCPNetwork"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "GCPNodeSpec" : {
        "type" : "object",
        "properties" : {
          "customImage" : {
            "type" : "string",
            "x-go-name" : "CustomImage"
          },
          "diskSize" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "DiskSize"
          },
          "diskType" : {
            "type" : "string",
            "x-go-name" : "DiskType"
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "x-go-name" : "Labels"
          },
          "machineType" : {
            "type" : "string",
            "x-go-name" : "MachineType"
          },
          "preemptible" : {
            "type" : "boolean",
            "x-go-name" : "Preemptible"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Tags"
          },
          "zone" : {
            "type" : "string",
            "x-go-name" : "Zone"
          }
        },
        "description" : "GCPNodeSpec gcp specific node settings",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "GCPSubnetwork" : {
        "title" : "GCPSubnetwork represents a object of GCP subnetworks.",
        "type" : "object",
        "properties" : {
          "gatewayAddress" : {
            "type" : "string",
            "x-go-name" : "GatewayAddress"
          },
          "id" : {
            "type" : "integer",
            "format" : "uint64",
            "x-go-name" : "ID"
          },
          "ipCidrRange" : {
            "type" : "string",
            "x-go-name" : "IPCidrRange"
          },
          "ipFamily" : {
            "$ref" : "#/components/schemas/IPFamily"
          },
          "kind" : {
            "type" : "string",
            "x-go-name" : "Kind"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "network" : {
            "type" : "string",
            "x-go-name" : "Network"
          },
          "path" : {
            "type" : "string",
            "x-go-name" : "Path"
          },
          "privateIpGoogleAccess" : {
            "type" : "boolean",
            "x-go-name" : "PrivateIPGoogleAccess"
          },
          "region" : {
            "type" : "string",
            "x-go-name" : "Region"
          },
          "selfLink" : {
            "type" : "string",
            "x-go-name" : "SelfLink"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "GCPSubnetworkList" : {
        "title" : "GCPSubnetworkList represents an array of GCP subnetworks.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/GCPSubnetwork"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "GCPZone" : {
        "title" : "GCPZone represents a object of GCP zone.",
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "GCPZoneList" : {
        "title" : "GCPZoneList represents an array of GCP zones.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/GCPZone"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "GKE" : {
        "type" : "object",
        "properties" : {
          "datacenter" : {
            "type" : "string",
            "x-go-name" : "Datacenter"
          },
          "enabled" : {
            "type" : "boolean",
            "x-go-name" : "Enabled"
          },
          "serviceAccount" : {
            "type" : "string",
            "x-go-name" : "ServiceAccount"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "GKEAutoprovisioningNodePoolDefaults" : {
        "type" : "object",
        "properties" : {
          "bootDiskKmsKey" : {
            "type" : "string",
            "description" : "BootDiskKmsKey: The Customer Managed Encryption Key used to encrypt\nthe boot disk attached to each node in the node pool. This should be\nof the form\nprojects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cr\nyptoKeys/[KEY_NAME]. For more information about protecting resources\nwith Cloud KMS Keys please see:\nhttps://cloud.google.com/compute/docs/disks/customer-managed-encryption",
            "x-go-name" : "BootDiskKmsKey"
          },
          "diskSizeGb" : {
            "type" : "integer",
            "description" : "DiskSizeGb: Size of the disk attached to each node, specified in GB.\nThe smallest allowed disk size is 10GB. If unspecified, the default\ndisk size is 100GB.",
            "format" : "int64",
            "x-go-name" : "DiskSizeGb"
          },
          "diskType" : {
            "type" : "string",
            "description" : "DiskType: Type of the disk attached to each node (e.g. 'pd-standard',\n'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is\n'pd-standard'",
            "x-go-name" : "DiskType"
          },
          "management" : {
            "$ref" : "#/components/schemas/GKENodeManagement"
          },
          "minCpuPlatform" : {
            "type" : "string",
            "description" : "MinCpuPlatform: Minimum CPU platform to be used for NAP created node\npools. The instance may be scheduled on the specified or newer CPU\nplatform. Applicable values are the friendly names of CPU platforms,\nsuch as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy\nBridge. For more information, read how to specify min CPU platform\n(https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)\nTo unset the min cpu platform field pass \"automatic\" as field value.",
            "x-go-name" : "MinCpuPlatform"
          },
          "oauthScopes" : {
            "type" : "array",
            "description" : "OauthScopes: Scopes that are used by NAP when creating node pools.",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "OauthScopes"
          },
          "serviceAccount" : {
            "type" : "string",
            "description" : "ServiceAccount: The Google Cloud Platform Service Account to be used\nby the node VMs.",
            "x-go-name" : "ServiceAccount"
          },
          "shieldedInstanceConfig" : {
            "$ref" : "#/components/schemas/GKEShieldedInstanceConfig"
          },
          "upgradeSettings" : {
            "$ref" : "#/components/schemas/GKEUpgradeSettings"
          }
        },
        "description" : "GKEAutoprovisioningNodePoolDefaults\ncontains defaults for a node pool created by NAP.",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "GKECloudSpec" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "serviceAccount" : {
            "type" : "string",
            "x-go-name" : "ServiceAccount"
          },
          "zone" : {
            "type" : "string",
            "x-go-name" : "Zone"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "GKECluster" : {
        "title" : "GKECluster represents a object of GKE cluster.",
        "type" : "object",
        "properties" : {
          "imported" : {
            "type" : "boolean",
            "x-go-name" : "IsImported"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "zone" : {
            "type" : "string",
            "x-go-name" : "Zone"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "GKEClusterAutoscaling" : {
        "type" : "object",
        "properties" : {
          "autoprovisioningLocations" : {
            "type" : "array",
            "description" : "AutoprovisioningLocations: The list of Google Compute Engine zones\n(https://cloud.google.com/compute/docs/zones#available) in which the\nNodePool's nodes can be created by NAP.",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "AutoprovisioningLocations"
          },
          "autoprovisioningNodePoolDefaults" : {
            "$ref" : "#/components/schemas/GKEAutoprovisioningNodePoolDefaults"
          },
          "enableNodeAutoprovisioning" : {
            "type" : "boolean",
            "description" : "EnableNodeAutoprovisioning: Enables automatic node pool creation and\ndeletion.",
            "x-go-name" : "EnableNodeAutoprovisioning"
          },
          "resourceLimits" : {
            "type" : "array",
            "description" : "ResourceLimits: Contains global constraints regarding minimum and\nmaximum amount of resources in the cluster.",
            "items" : {
              "$ref" : "#/components/schemas/GKEResourceLimit"
            },
            "x-go-name" : "ResourceLimits"
          }
        },
        "description" : "GKEClusterAutoscaling contains global, per-cluster\ninformation required by Cluster Autoscaler to automatically adjust\nthe size of the cluster and create/delete node pools based on the\ncurrent needs.",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "GKEClusterList" : {
        "title" : "GKEClusterList represents an array of GKE clusters.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/GKECluster"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "GKEClusterSpec" : {
        "title" : "GKEClusterSpec A Google Kubernetes Engine cluster.",
        "type" : "object",
        "properties" : {
          "autopilot" : {
            "type" : "boolean",
            "description" : "Autopilot: Autopilot configuration for the cluster.",
            "x-go-name" : "Autopilot"
          },
          "autoscaling" : {
            "$ref" : "#/components/schemas/GKEClusterAutoscaling"
          },
          "clusterIpv4Cidr" : {
            "type" : "string",
            "description" : "ClusterIpv4Cidr: The IP address range of the container pods in this\ncluster, in CIDR\n(http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)\nnotation (e.g. `10.96.0.0/14`). Leave blank to have one automatically\nchosen or specify a `/14` block in `10.0.0.0/8`.",
            "x-go-name" : "ClusterIpv4Cidr"
          },
          "createTime" : {
            "type" : "string",
            "description" : "CreateTime: [Output only] The time the cluster was created, in\nRFC3339 (https://www.ietf.org/rfc/rfc3339.txt) text format.",
            "x-go-name" : "CreateTime"
          },
          "defaultMaxPodsConstraint" : {
            "type" : "integer",
            "description" : "DefaultMaxPodsConstraint: The default constraint on the maximum\nnumber of pods that can be run simultaneously on a node in the node\npool of this cluster. Only honored if cluster created with IP Alias\nsupport.",
            "format" : "int64",
            "x-go-name" : "DefaultMaxPodsConstraint"
          },
          "enableKubernetesAlpha" : {
            "type" : "boolean",
            "description" : "EnableKubernetesAlpha: Kubernetes alpha features are enabled on this\ncluster. This includes alpha API groups (e.g. v1alpha1) and features\nthat may not be production ready in the kubernetes version of the\nmaster and nodes. The cluster has no SLA for uptime and master/node\nupgrades are disabled. Alpha enabled clusters are automatically\ndeleted thirty days after creation.",
            "x-go-name" : "EnableKubernetesAlpha"
          },
          "enableTpu" : {
            "type" : "boolean",
            "description" : "EnableTpu: Enable the ability to use Cloud TPUs in this cluster.",
            "x-go-name" : "EnableTpu"
          },
          "initialClusterVersion" : {
            "type" : "string",
            "description" : "InitialClusterVersion: The initial Kubernetes version for this\ncluster. Valid versions are those found in validMasterVersions\nreturned by getServerConfig. The version can be upgraded over time;\nsuch upgrades are reflected in currentMasterVersion and\ncurrentNodeVersion. Users may specify either explicit versions\noffered by Kubernetes Engine or version aliases, which have the\nfollowing behavior: - \"latest\": picks the highest valid Kubernetes\nversion - \"1.X\": picks the highest valid patch+gke.N patch in the 1.X\nversion - \"1.X.Y\": picks the highest valid gke.N patch in the 1.X.Y\nversion - \"1.X.Y-gke.N\": picks an explicit Kubernetes version -\n\"\",\"-\": picks the default Kubernetes version",
            "x-go-name" : "InitialClusterVersion"
          },
          "initialNodeCount" : {
            "type" : "integer",
            "description" : "InitialNodeCount: The number of nodes to create in this cluster. You\nmust ensure that your Compute Engine resource quota\n(https://cloud.google.com/compute/quotas) is sufficient for this\nnumber of instances. You must also have available firewall and routes\nquota. For requests, this field should only be used in lieu of a\n\"node_pool\" object, since this configuration (along with the\n\"node_config\") will be used to create a \"NodePool\" object with an\nauto-generated name. Do not use this and a node_pool at the same\ntime. This field is deprecated, use node_pool.initial_node_count\ninstead.",
            "format" : "int64",
            "x-go-name" : "InitialNodeCount"
          },
          "locations" : {
            "type" : "array",
            "description" : "Locations: The list of Google Compute Engine zones\n(https://cloud.google.com/compute/docs/zones#available) in which the\ncluster's nodes should be located. This field provides a default\nvalue if NodePool.Locations\n(https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools#NodePool.FIELDS.locations)\nare not specified during node pool creation. Warning: changing\ncluster locations will update the NodePool.Locations\n(https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools#NodePool.FIELDS.locations)\nof all node pools and will result in nodes being added and/or\nremoved.",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Locations"
          },
          "network" : {
            "type" : "string",
            "description" : "Network: The name of the Google Compute Engine network\n(https://cloud.google.com/compute/docs/networks-and-firewalls#networks)\nto which the cluster is connected. If left unspecified, the `default`\nnetwork will be used.",
            "x-go-name" : "Network"
          },
          "nodeConfig" : {
            "$ref" : "#/components/schemas/GKENodeConfig"
          },
          "releaseChannel" : {
            "type" : "string",
            "description" : "ReleaseChannel: channel specifies which release channel the cluster is\nsubscribed to.\n\nPossible values:\n\"UNSPECIFIED\" - No channel specified.\n\"RAPID\" - RAPID channel is offered on an early access basis for\ncustomers who want to test new releases. WARNING: Versions available\nin the RAPID Channel may be subject to unresolved issues with no\nknown workaround and are not subject to any SLAs.\n\"REGULAR\" - Clusters subscribed to REGULAR receive versions that\nare considered GA quality. REGULAR is intended for production users\nwho want to take advantage of new features.\n\"STABLE\" - Clusters subscribed to STABLE receive versions that are\nknown to be stable and reliable in production.",
            "x-go-name" : "ReleaseChannel"
          },
          "subnetwork" : {
            "type" : "string",
            "description" : "Subnetwork: The name of the Google Compute Engine subnetwork\n(https://cloud.google.com/compute/docs/subnetworks) to which the\ncluster is connected.",
            "x-go-name" : "Subnetwork"
          },
          "tpuIpv4CidrBlock" : {
            "type" : "string",
            "description" : "TpuIpv4CidrBlock: [Output only] The IP address range of the Cloud\nTPUs in this cluster, in CIDR\n(http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)\nnotation (e.g. `1.2.3.4/29`).",
            "x-go-name" : "TpuIpv4CidrBlock"
          },
          "verticalPodAutoscaling" : {
            "type" : "boolean",
            "description" : "VerticalPodAutoscaling: Cluster-level Vertical Pod Autoscaling\nconfiguration.",
            "x-go-name" : "VerticalPodAutoscaling"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "GKEDiskType" : {
        "title" : "GKEDiskType represents a object of GKE disk type.",
        "type" : "object",
        "properties" : {
          "defaultDiskSizeGb" : {
            "type" : "integer",
            "description" : "DefaultDiskSizeGb: Server-defined default disk size in GB.",
            "format" : "int64",
            "x-go-name" : "DefaultDiskSizeGb"
          },
          "description" : {
            "type" : "string",
            "description" : "Description: An optional description of this resource.",
            "x-go-name" : "Description"
          },
          "kind" : {
            "type" : "string",
            "description" : "Kind: Type of the resource. Always compute#diskType for\ndisk types.",
            "x-go-name" : "Kind"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the resource.",
            "x-go-name" : "Name"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "GKEDiskTypeList" : {
        "title" : "GKEDiskTypeList represents an array of GKE disk types.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/GKEDiskType"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "GKEImage" : {
        "title" : "GKEImage represents an object of GKE image.",
        "type" : "object",
        "properties" : {
          "default" : {
            "type" : "boolean",
            "x-go-name" : "IsDefault"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "GKEImageList" : {
        "title" : "GKEImageList represents an array of GKE images.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/GKEImage"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "GKEMachineDeploymentCloudSpec" : {
        "title" : "GKEMachineDeploymentCloudSpec represents an object holding GKE machine deployment cloud details.",
        "type" : "object",
        "properties" : {
          "autoscaling" : {
            "$ref" : "#/components/schemas/GKENodePoolAutoscaling"
          },
          "config" : {
            "$ref" : "#/components/schemas/GKENodeConfig"
          },
          "locations" : {
            "type" : "array",
            "description" : "Locations: The list of Google Compute Engine zones\n(https://cloud.google.com/compute/docs/zones#available) in which the\nNodePool's nodes should be located. If this value is unspecified\nduring node pool creation, the Cluster.Locations\n(https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations)\nvalue will be used, instead. Warning: changing node pool locations\nwill result in nodes being added and/or removed.",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Locations"
          },
          "management" : {
            "$ref" : "#/components/schemas/GKENodeManagement"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "GKENodeConfig" : {
        "title" : "GKENodeConfig Parameters that describe the nodes in a cluster.",
        "type" : "object",
        "properties" : {
          "diskSizeGb" : {
            "type" : "integer",
            "description" : "DiskSizeGb: Size of the disk attached to each node, specified in GB.\nThe smallest allowed disk size is 10GB. If unspecified, the default\ndisk size is 100GB.",
            "format" : "int64",
            "x-go-name" : "DiskSizeGb"
          },
          "diskType" : {
            "type" : "string",
            "description" : "DiskType: Type of the disk attached to each node (e.g. 'pd-standard',\n'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is\n'pd-standard'",
            "x-go-name" : "DiskType"
          },
          "imageType" : {
            "type" : "string",
            "description" : "ImageType: The image type to use for this node. Note that for a given\nimage type, the latest version of it will be used.",
            "x-go-name" : "ImageType"
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Labels: The map of Kubernetes labels (key/value pairs) to be applied\nto each node. These will added in addition to any default label(s)\nthat Kubernetes may apply to the node. In case of conflict in label\nkeys, the applied set may differ depending on the Kubernetes version\nit's best to assume the behavior is undefined and conflicts should\nbe avoided. For more information, including usage and the valid\nvalues, see:\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/",
            "x-go-name" : "Labels"
          },
          "localSsdCount" : {
            "type" : "integer",
            "description" : "LocalSsdCount: The number of local SSD disks to be attached to the\nnode. The limit for this value is dependent upon the maximum number\nof disks available on a machine per zone. See:\nhttps://cloud.google.com/compute/docs/disks/local-ssd for more\ninformation.",
            "format" : "int64",
            "x-go-name" : "LocalSsdCount"
          },
          "machineType" : {
            "type" : "string",
            "description" : "MachineType: The name of a Google Compute Engine machine type\n(https://cloud.google.com/compute/docs/machine-types) If unspecified,\nthe default machine type is `e2-medium`.",
            "x-go-name" : "MachineType"
          },
          "preemptible" : {
            "type" : "boolean",
            "description" : "Preemptible: Whether the nodes are created as preemptible VM\ninstances. See:\nhttps://cloud.google.com/compute/docs/instances/preemptible for more\ninformation about preemptible VM instances.",
            "x-go-name" : "Preemptible"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "GKENodeManagement" : {
        "type" : "object",
        "properties" : {
          "autoRepair" : {
            "type" : "boolean",
            "description" : "AutoRepair: A flag that specifies whether the node auto-repair is\nenabled for the node pool. If enabled, the nodes in this node pool\nwill be monitored and, if they fail health checks too many times, an\nautomatic repair action will be triggered.",
            "x-go-name" : "AutoRepair"
          },
          "autoUpgrade" : {
            "type" : "boolean",
            "description" : "AutoUpgrade: A flag that specifies whether node auto-upgrade is\nenabled for the node pool. If enabled, node auto-upgrade helps keep\nthe nodes in your node pool up to date with the latest release\nversion of Kubernetes.",
            "x-go-name" : "AutoUpgrade"
          }
        },
        "description" : "GKENodeManagement defines the set of node management\nservices turned on for the node pool.",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "GKENodePoolAutoscaling" : {
        "type" : "object",
        "properties" : {
          "autoprovisioned" : {
            "type" : "boolean",
            "description" : "Autoprovisioned: Can this node pool be deleted automatically.",
            "x-go-name" : "Autoprovisioned"
          },
          "enabled" : {
            "type" : "boolean",
            "description" : "Enabled: Is autoscaling enabled for this node pool.",
            "x-go-name" : "Enabled"
          },
          "maxNodeCount" : {
            "type" : "integer",
            "description" : "MaxNodeCount: Maximum number of nodes in the NodePool. Must be >=\nmin_node_count. There has to enough quota to scale up the cluster.",
            "format" : "int64",
            "x-go-name" : "MaxNodeCount"
          },
          "minNodeCount" : {
            "type" : "integer",
            "description" : "MinNodeCount: Minimum number of nodes in the NodePool. Must be >= 1\nand <= max_node_count.",
            "format" : "int64",
            "x-go-name" : "MinNodeCount"
          }
        },
        "description" : "GKENodePoolAutoscaling contains information\nrequired by cluster autoscaler to adjust the size of the node pool to\nthe current cluster usage.",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "GKEResourceLimit" : {
        "type" : "object",
        "properties" : {
          "maximum" : {
            "type" : "string",
            "description" : "Maximum: Maximum amount of the resource in the cluster.",
            "format" : "int64",
            "x-go-name" : "Maximum"
          },
          "minimum" : {
            "type" : "string",
            "description" : "Minimum: Minimum amount of the resource in the cluster.",
            "format" : "int64",
            "x-go-name" : "Minimum"
          },
          "resourceType" : {
            "type" : "string",
            "description" : "ResourceType: Resource name \"cpu\", \"memory\" or gpu-specific string.",
            "x-go-name" : "ResourceType"
          }
        },
        "description" : "GKEResourceLimit Contains information about amount of some resource in\nthe cluster. For memory, value should be in GB.",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "GKEShieldedInstanceConfig" : {
        "title" : "GKEShieldedInstanceConfig a set of Shielded Instance options.",
        "type" : "object",
        "properties" : {
          "enableIntegrityMonitoring" : {
            "type" : "boolean",
            "description" : "EnableIntegrityMonitoring: Defines whether the instance has integrity\nmonitoring enabled. Enables monitoring and attestation of the boot\nintegrity of the instance. The attestation is performed against the\nintegrity policy baseline. This baseline is initially derived from\nthe implicitly trusted boot image when the instance is created.",
            "x-go-name" : "EnableIntegrityMonitoring"
          },
          "enableSecureBoot" : {
            "type" : "boolean",
            "description" : "EnableSecureBoot: Defines whether the instance has Secure Boot\nenabled. Secure Boot helps ensure that the system only runs authentic\nsoftware by verifying the digital signature of all boot components,\nand halting the boot process if signature verification fails.",
            "x-go-name" : "EnableSecureBoot"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "GKEUpgradeSettings" : {
        "type" : "object",
        "properties" : {
          "maxSurge" : {
            "type" : "integer",
            "description" : "MaxSurge: The maximum number of nodes that can be created beyond the\ncurrent size of the node pool during the upgrade process.",
            "format" : "int64",
            "x-go-name" : "MaxSurge"
          },
          "maxUnavailable" : {
            "type" : "integer",
            "description" : "MaxUnavailable: The maximum number of nodes that can be\nsimultaneously unavailable during the upgrade process. A node is\nconsidered available if its status is Ready.",
            "format" : "int64",
            "x-go-name" : "MaxUnavailable"
          }
        },
        "description" : "GKEUpgradeSettings These upgrade settings control the level of\nparallelism and the level of disruption caused by an upgrade.\nmaxUnavailable controls the number of nodes that can be\nsimultaneously unavailable. maxSurge controls the number of\nadditional nodes that can be added to the node pool temporarily for\nthe time of the upgrade to increase the number of available nodes.\n(maxUnavailable + maxSurge) determines the level of parallelism (how\nmany nodes are being upgraded at the same time). Note: upgrades\ninevitably introduce some disruption since workloads need to be moved\nfrom old nodes to new, upgraded ones. Even if maxUnavailable=0, this\nholds true. (Disruption stays within the limits of\nPodDisruptionBudget, if it is configured.) Consider a hypothetical\nnode pool with 5 nodes having maxSurge=2, maxUnavailable=1. This\nmeans the upgrade process upgrades 3 nodes simultaneously. It creates\n2 additional (upgraded) nodes, then it brings down 3 old (not yet\nupgraded) nodes at the same time. This ensures that there are always\nat least 4 nodes available.",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "GKEZone" : {
        "title" : "GKEZone represents a object of GKE zone.",
        "type" : "object",
        "properties" : {
          "default" : {
            "type" : "boolean",
            "x-go-name" : "IsDefault"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "GKEZoneList" : {
        "title" : "GKEZoneList represents an array of GKE zones.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/GKEZone"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "GVK" : {
        "title" : "GVK group version kind of a resource.",
        "type" : "object",
        "properties" : {
          "group" : {
            "type" : "string",
            "x-go-name" : "Group"
          },
          "kind" : {
            "type" : "string",
            "x-go-name" : "Kind"
          },
          "version" : {
            "type" : "string",
            "x-go-name" : "Version"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "GatekeeperConfig" : {
        "type" : "object",
        "properties" : {
          "spec" : {
            "$ref" : "#/components/schemas/GatekeeperConfigSpec"
          }
        },
        "description" : "GatekeeperConfig represents a gatekeeper config",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "GatekeeperConfigSpec" : {
        "type" : "object",
        "properties" : {
          "match" : {
            "type" : "array",
            "description" : "Configuration for namespace exclusion",
            "items" : {
              "$ref" : "#/components/schemas/MatchEntry"
            },
            "x-go-name" : "Match"
          },
          "readiness" : {
            "$ref" : "#/components/schemas/ReadinessSpec"
          },
          "sync" : {
            "$ref" : "#/components/schemas/Sync"
          },
          "validation" : {
            "$ref" : "#/components/schemas/Validation"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "GitAuthMethod" : {
        "type" : "string",
        "description" : "+kubebuilder:validation:Enum=password;token;ssh-key",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/apps.kubermatic/v1"
      },
      "GitCredentials" : {
        "type" : "object",
        "properties" : {
          "method" : {
            "$ref" : "#/components/schemas/GitAuthMethod"
          },
          "password" : {
            "$ref" : "#/components/schemas/SecretKeySelector"
          },
          "sshKey" : {
            "$ref" : "#/components/schemas/SecretKeySelector"
          },
          "token" : {
            "$ref" : "#/components/schemas/SecretKeySelector"
          },
          "username" : {
            "$ref" : "#/components/schemas/SecretKeySelector"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/apps.kubermatic/v1"
      },
      "GitReference" : {
        "type" : "object",
        "properties" : {
          "branch" : {
            "type" : "string",
            "description" : "Branch to checkout. Only the last commit of the branch will be checkout in order to reduce the amount of data to download.\n+optional",
            "x-go-name" : "Branch"
          },
          "commit" : {
            "pattern" : "=`^[a-f0-9]{40}$`",
            "type" : "string",
            "description" : "Commit SHA in a Branch to checkout.\n\nIt must be used in conjunction with branch field.",
            "x-go-name" : "Commit"
          },
          "tag" : {
            "type" : "string",
            "description" : "Tag to check out.\nIt can not be used in conjunction with commit or branch.\n+kubebuilder:validation:Type=string\n+optional",
            "x-go-name" : "Tag"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/apps.kubermatic/v1"
      },
      "GitSource" : {
        "type" : "object",
        "properties" : {
          "credentials" : {
            "$ref" : "#/components/schemas/GitCredentials"
          },
          "path" : {
            "type" : "string",
            "description" : "Path of the \"source\" in the repository. default is repository root",
            "x-go-name" : "Path"
          },
          "ref" : {
            "$ref" : "#/components/schemas/GitReference"
          },
          "remote" : {
            "type" : "string",
            "description" : "URL to the repository. Can be HTTP(s) (e.g. https://example.com/myrepo) or SSH (e.g. git://example.com[:port]/path/to/repo.git/)\n+kubebuilder:validation:MinLength=1",
            "x-go-name" : "Remote"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/apps.kubermatic/v1"
      },
      "GlobalCustomLinks" : {
        "type" : "array",
        "description" : "GlobalCustomLinks defines custom links for global settings",
        "items" : {
          "$ref" : "#/components/schemas/CustomLink"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "GlobalObjectKeySelector" : {
        "type" : "object",
        "properties" : {
          "apiVersion" : {
            "type" : "string",
            "description" : "API version of the referent.\n+optional",
            "x-go-name" : "APIVersion"
          },
          "fieldPath" : {
            "type" : "string",
            "description" : "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.\n+optional",
            "x-go-name" : "FieldPath"
          },
          "key" : {
            "type" : "string",
            "x-go-name" : "Key"
          },
          "kind" : {
            "type" : "string",
            "description" : "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
            "x-go-name" : "Kind"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional",
            "x-go-name" : "Name"
          },
          "namespace" : {
            "type" : "string",
            "description" : "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n+optional",
            "x-go-name" : "Namespace"
          },
          "resourceVersion" : {
            "type" : "string",
            "description" : "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional",
            "x-go-name" : "ResourceVersion"
          },
          "uid" : {
            "$ref" : "#/components/schemas/UID"
          }
        },
        "description" : "GlobalObjectKeySelector is needed as we can not use v1.SecretKeySelector\nbecause it is not cross namespace.",
        "x-go-package" : "github.com/kubermatic/machine-controller/pkg/providerconfig/types"
      },
      "GlobalSecretKeySelector" : {
        "$ref" : "#/components/schemas/GlobalObjectKeySelector"
      },
      "GlobalSettings" : {
        "$ref" : "#/components/schemas/SettingSpec"
      },
      "GroupProjectBinding" : {
        "type" : "object",
        "properties" : {
          "group" : {
            "type" : "string",
            "x-go-name" : "Group"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "projectID" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "role" : {
            "type" : "string",
            "x-go-name" : "Role"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "HealthStatus" : {
        "type" : "string",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "HelmCredentials" : {
        "type" : "object",
        "properties" : {
          "password" : {
            "$ref" : "#/components/schemas/SecretKeySelector"
          },
          "registryConfigFile" : {
            "$ref" : "#/components/schemas/SecretKeySelector"
          },
          "username" : {
            "$ref" : "#/components/schemas/SecretKeySelector"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/apps.kubermatic/v1"
      },
      "HelmSource" : {
        "type" : "object",
        "properties" : {
          "chartName" : {
            "type" : "string",
            "description" : "Name of the Chart.\n+kubebuilder:validation:MinLength=1",
            "x-go-name" : "ChartName"
          },
          "chartVersion" : {
            "type" : "string",
            "description" : "Version of the Chart.\n+kubebuilder:validation:MinLength=1",
            "x-go-name" : "ChartVersion"
          },
          "credentials" : {
            "$ref" : "#/components/schemas/HelmCredentials"
          },
          "url" : {
            "type" : "string",
            "description" : "URl of the helm repository.\nIt can be an HTTP(s) repository (e.g. https://localhost/myrepo) or on OCI repository (e.g. oci://localhost:5000/myrepo).\n+kubebuilder:validation:Pattern=\"^(http|https|oci)://.+\"",
            "x-go-name" : "URL"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/apps.kubermatic/v1"
      },
      "Hetzner" : {
        "type" : "object",
        "properties" : {
          "datacenter" : {
            "type" : "string",
            "x-go-name" : "Datacenter"
          },
          "enabled" : {
            "type" : "boolean",
            "x-go-name" : "Enabled"
          },
          "network" : {
            "type" : "string",
            "description" : "Network is the pre-existing Hetzner network in which the machines are running.\nWhile machines can be in multiple networks, a single one must be chosen for the\nHCloud CCM to work.\nIf this is empty, the network configured on the datacenter will be used.",
            "x-go-name" : "Network"
          },
          "token" : {
            "type" : "string",
            "description" : "Token is used to authenticate with the Hetzner API.",
            "x-go-name" : "Token"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "HetznerCloudSpec" : {
        "title" : "HetznerCloudSpec specifies access data to hetzner cloud.",
        "type" : "object",
        "properties" : {
          "credentialsReference" : {
            "$ref" : "#/components/schemas/GlobalSecretKeySelector"
          },
          "network" : {
            "type" : "string",
            "description" : "Network is the pre-existing Hetzner network in which the machines are running.\nWhile machines can be in multiple networks, a single one must be chosen for the\nHCloud CCM to work.\nIf this is empty, the network configured on the datacenter will be used.",
            "x-go-name" : "Network"
          },
          "token" : {
            "type" : "string",
            "description" : "Token is used to authenticate with the Hetzner cloud API.",
            "x-go-name" : "Token"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "HetznerNodeSpec" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "network" : {
            "type" : "string",
            "description" : "network name",
            "x-go-name" : "Network"
          },
          "type" : {
            "type" : "string",
            "description" : "server type",
            "x-go-name" : "Type"
          }
        },
        "description" : "HetznerNodeSpec Hetzner node settings",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "HetznerSize" : {
        "title" : "HetznerSize is the object representing Hetzner sizes.",
        "type" : "object",
        "properties" : {
          "cores" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "Cores"
          },
          "description" : {
            "type" : "string",
            "x-go-name" : "Description"
          },
          "disk" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "Disk"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "ID"
          },
          "memory" : {
            "type" : "number",
            "format" : "float",
            "x-go-name" : "Memory"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "HetznerSizeList" : {
        "title" : "HetznerSizeList represents an array of Hetzner sizes.",
        "type" : "object",
        "properties" : {
          "dedicated" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/HetznerSize"
            },
            "x-go-name" : "Dedicated"
          },
          "standard" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/HetznerSize"
            },
            "x-go-name" : "Standard"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "IPAMPool" : {
        "type" : "object",
        "properties" : {
          "datacenters" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/IPAMPoolDatacenterSettings"
            },
            "x-go-name" : "Datacenters"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "IPAMPoolAllocationType" : {
        "type" : "string",
        "description" : "+kubebuilder:validation:Enum=prefix;range\nIPAMPoolAllocationType defines the type of allocation to be used.\nPossible values are `prefix` and `range`.",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "IPAMPoolDatacenterSettings" : {
        "type" : "object",
        "properties" : {
          "allocationPrefix" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "AllocationPrefix"
          },
          "allocationRange" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "AllocationRange"
          },
          "poolCidr" : {
            "$ref" : "#/components/schemas/SubnetCIDR"
          },
          "type" : {
            "$ref" : "#/components/schemas/IPAMPoolAllocationType"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "IPAllocationMode" : {
        "type" : "string",
        "x-go-package" : "github.com/kubermatic/machine-controller/pkg/cloudprovider/provider/vmwareclouddirector/types"
      },
      "IPFamily" : {
        "type" : "string",
        "description" : "+kubebuilder:validation:Enum=\"\";IPv4;IPv4+IPv6",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "IPVSConfiguration" : {
        "title" : "IPVSConfiguration contains ipvs-related configuration details for kube-proxy.",
        "type" : "object",
        "properties" : {
          "strictArp" : {
            "type" : "boolean",
            "description" : "StrictArp configure arp_ignore and arp_announce to avoid answering ARP queries from kube-ipvs0 interface.\ndefaults to true.",
            "x-go-name" : "StrictArp"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "ImageList" : {
        "title" : "ImageList defines a map of operating system and the image to use.",
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "JSON" : {
        "title" : "JSON represents any valid JSON value.",
        "type" : "object",
        "properties" : {
          "Raw" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "uint8"
            }
          }
        },
        "description" : "These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.",
        "x-go-package" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
      },
      "JSONSchemaDefinitions" : {
        "title" : "JSONSchemaDefinitions contains the models explicitly defined in this spec.",
        "type" : "object",
        "additionalProperties" : {
          "$ref" : "#/components/schemas/JSONSchemaProps"
        },
        "x-go-package" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
      },
      "JSONSchemaDependencies" : {
        "title" : "JSONSchemaDependencies represent a dependencies property.",
        "type" : "object",
        "additionalProperties" : {
          "$ref" : "#/components/schemas/JSONSchemaPropsOrStringArray"
        },
        "x-go-package" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
      },
      "JSONSchemaProps" : {
        "title" : "JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).",
        "type" : "object",
        "properties" : {
          "$ref" : {
            "type" : "string",
            "x-go-name" : "Ref"
          },
          "$schema" : {
            "$ref" : "#/components/schemas/JSONSchemaURL"
          },
          "additionalItems" : {
            "$ref" : "#/components/schemas/JSONSchemaPropsOrBool"
          },
          "additionalProperties" : {
            "$ref" : "#/components/schemas/JSONSchemaPropsOrBool"
          },
          "allOf" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JSONSchemaProps"
            },
            "x-go-name" : "AllOf"
          },
          "anyOf" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JSONSchemaProps"
            },
            "x-go-name" : "AnyOf"
          },
          "default" : {
            "$ref" : "#/components/schemas/JSON"
          },
          "definitions" : {
            "$ref" : "#/components/schemas/JSONSchemaDefinitions"
          },
          "dependencies" : {
            "$ref" : "#/components/schemas/JSONSchemaDependencies"
          },
          "description" : {
            "type" : "string",
            "x-go-name" : "Description"
          },
          "enum" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JSON"
            },
            "x-go-name" : "Enum"
          },
          "example" : {
            "$ref" : "#/components/schemas/JSON"
          },
          "exclusiveMaximum" : {
            "type" : "boolean",
            "x-go-name" : "ExclusiveMaximum"
          },
          "exclusiveMinimum" : {
            "type" : "boolean",
            "x-go-name" : "ExclusiveMinimum"
          },
          "externalDocs" : {
            "$ref" : "#/components/schemas/ExternalDocumentation"
          },
          "format" : {
            "type" : "string",
            "description" : "format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated:\n\nbsonobjectid: a bson object ID, i.e. a 24 characters hex string\nuri: an URI as parsed by Golang net/url.ParseRequestURI\nemail: an email address as parsed by Golang net/mail.ParseAddress\nhostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034].\nipv4: an IPv4 IP as parsed by Golang net.ParseIP\nipv6: an IPv6 IP as parsed by Golang net.ParseIP\ncidr: a CIDR as parsed by Golang net.ParseCIDR\nmac: a MAC address as parsed by Golang net.ParseMAC\nuuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$\nuuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$\nuuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$\nuuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$\nisbn: an ISBN10 or ISBN13 number string like \"0321751043\" or \"978-0321751041\"\nisbn10: an ISBN10 number string like \"0321751043\"\nisbn13: an ISBN13 number string like \"978-0321751041\"\ncreditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\\\d{3})\\\\d{11})$ with any non digit characters mixed in\nssn: a U.S. social security number following the regex ^\\\\d{3}[- ]?\\\\d{2}[- ]?\\\\d{4}$\nhexcolor: an hexadecimal color code like \"#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$\nrgbcolor: an RGB color code like rgb like \"rgb(255,255,2559\"\nbyte: base64 encoded binary data\npassword: any kind of string\ndate: a date string like \"2006-01-02\" as defined by full-date in RFC3339\nduration: a duration string like \"22 ns\" as parsed by Golang time.ParseDuration or compatible with Scala duration format\ndatetime: a date time string like \"2014-12-15T19:30:20.000Z\" as defined by date-time in RFC3339.",
            "x-go-name" : "Format"
          },
          "id" : {
            "type" : "string",
            "x-go-name" : "ID"
          },
          "items" : {
            "$ref" : "#/components/schemas/JSONSchemaPropsOrArray"
          },
          "maxItems" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "MaxItems"
          },
          "maxLength" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "MaxLength"
          },
          "maxProperties" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "MaxProperties"
          },
          "maximum" : {
            "type" : "number",
            "format" : "double",
            "x-go-name" : "Maximum"
          },
          "minItems" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "MinItems"
          },
          "minLength" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "MinLength"
          },
          "minProperties" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "MinProperties"
          },
          "minimum" : {
            "type" : "number",
            "format" : "double",
            "x-go-name" : "Minimum"
          },
          "multipleOf" : {
            "type" : "number",
            "format" : "double",
            "x-go-name" : "MultipleOf"
          },
          "not" : {
            "$ref" : "#/components/schemas/JSONSchemaProps"
          },
          "nullable" : {
            "type" : "boolean",
            "x-go-name" : "Nullable"
          },
          "oneOf" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JSONSchemaProps"
            },
            "x-go-name" : "OneOf"
          },
          "pattern" : {
            "type" : "string",
            "x-go-name" : "Pattern"
          },
          "patternProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/JSONSchemaProps"
            },
            "x-go-name" : "PatternProperties"
          },
          "properties" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/JSONSchemaProps"
            },
            "x-go-name" : "Properties"
          },
          "required" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Required"
          },
          "title" : {
            "type" : "string",
            "x-go-name" : "Title"
          },
          "type" : {
            "type" : "string",
            "x-go-name" : "Type"
          },
          "uniqueItems" : {
            "type" : "boolean",
            "x-go-name" : "UniqueItems"
          },
          "x-kubernetes-embedded-resource" : {
            "type" : "boolean",
            "description" : "x-kubernetes-embedded-resource defines that the value is an\nembedded Kubernetes runtime.Object, with TypeMeta and\nObjectMeta. The type must be object. It is allowed to further\nrestrict the embedded object. kind, apiVersion and metadata\nare validated automatically. x-kubernetes-preserve-unknown-fields\nis allowed to be true, but does not have to be if the object\nis fully specified (up to kind, apiVersion, metadata).",
            "x-go-name" : "XEmbeddedResource"
          },
          "x-kubernetes-int-or-string" : {
            "type" : "boolean",
            "description" : "x-kubernetes-int-or-string specifies that this value is\neither an integer or a string. If this is true, an empty\ntype is allowed and type as child of anyOf is permitted\nif following one of the following patterns:\n\n1) anyOf:\ntype: integer\ntype: string\n2) allOf:\nanyOf:\ntype: integer\ntype: string\n... zero or more",
            "x-go-name" : "XIntOrString"
          },
          "x-kubernetes-list-map-keys" : {
            "type" : "array",
            "description" : "x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by specifying the keys used\nas the index of the map.\n\nThis tag MUST only be used on lists that have the \"x-kubernetes-list-type\"\nextension set to \"map\". Also, the values specified for this attribute must\nbe a scalar typed field of the child structure (no nesting is supported).\n\nThe properties specified must either be required or have a default value,\nto ensure those properties are present for all list items.\n\n+optional",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "XListMapKeys"
          },
          "x-kubernetes-list-type" : {
            "type" : "string",
            "description" : "x-kubernetes-list-type annotates an array to further describe its topology.\nThis extension must only be used on lists and may have 3 possible values:\n\n1) `atomic`: the list is treated as a single entity, like a scalar.\nAtomic lists will be entirely replaced when updated. This extension\nmay be used on any type of list (struct, scalar, ...).\n2) `set`:\nSets are lists that must not have multiple items with the same value. Each\nvalue must be a scalar, an object with x-kubernetes-map-type `atomic` or an\narray with x-kubernetes-list-type `atomic`.\n3) `map`:\nThese lists are like maps in that their elements have a non-index key\nused to identify them. Order is preserved upon merge. The map tag\nmust only be used on a list with elements of type object.\nDefaults to atomic for arrays.\n+optional",
            "x-go-name" : "XListType"
          },
          "x-kubernetes-map-type" : {
            "type" : "string",
            "description" : "x-kubernetes-map-type annotates an object to further describe its topology.\nThis extension must only be used when type is object and may have 2 possible values:\n\n1) `granular`:\nThese maps are actual maps (key-value pairs) and each fields are independent\nfrom each other (they can each be manipulated by separate actors). This is\nthe default behaviour for all maps.\n2) `atomic`: the list is treated as a single entity, like a scalar.\nAtomic maps will be entirely replaced when updated.\n+optional",
            "x-go-name" : "XMapType"
          },
          "x-kubernetes-preserve-unknown-fields" : {
            "type" : "boolean",
            "description" : "x-kubernetes-preserve-unknown-fields stops the API server\ndecoding step from pruning fields which are not specified\nin the validation schema. This affects fields recursively,\nbut switches back to normal pruning behaviour if nested\nproperties or additionalProperties are specified in the schema.\nThis can either be true or undefined. False is forbidden.",
            "x-go-name" : "XPreserveUnknownFields"
          },
          "x-kubernetes-validations" : {
            "$ref" : "#/components/schemas/ValidationRules"
          }
        },
        "x-go-package" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
      },
      "JSONSchemaPropsOrArray" : {
        "type" : "object",
        "properties" : {
          "JSONSchemas" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JSONSchemaProps"
            }
          },
          "Schema" : {
            "$ref" : "#/components/schemas/JSONSchemaProps"
          }
        },
        "description" : "JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps\nor an array of JSONSchemaProps. Mainly here for serialization purposes.",
        "x-go-package" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
      },
      "JSONSchemaPropsOrBool" : {
        "title" : "JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value.",
        "type" : "object",
        "properties" : {
          "Allows" : {
            "type" : "boolean"
          },
          "Schema" : {
            "$ref" : "#/components/schemas/JSONSchemaProps"
          }
        },
        "description" : "Defaults to true for the boolean property.",
        "x-go-package" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
      },
      "JSONSchemaPropsOrStringArray" : {
        "title" : "JSONSchemaPropsOrStringArray represents a JSONSchemaProps or a string array.",
        "type" : "object",
        "properties" : {
          "Property" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "Schema" : {
            "$ref" : "#/components/schemas/JSONSchemaProps"
          }
        },
        "x-go-package" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
      },
      "JSONSchemaURL" : {
        "title" : "JSONSchemaURL represents a schema url.",
        "type" : "string",
        "x-go-package" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
      },
      "Kind" : {
        "title" : "Kind specifies the resource Kind and APIGroup.",
        "type" : "object",
        "properties" : {
          "apiGroups" : {
            "type" : "array",
            "description" : "APIGroups specifies the APIGroups of the resources",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "APIGroups"
          },
          "kinds" : {
            "type" : "array",
            "description" : "Kinds specifies the kinds of the resources",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Kinds"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "KubeOneAWSCloudSpec" : {
        "title" : "KubeOneAWSCloudSpec specifies access data to Amazon Web Services.",
        "type" : "object",
        "properties" : {
          "accessKeyID" : {
            "type" : "string",
            "x-go-name" : "AccessKeyID"
          },
          "secretAccessKey" : {
            "type" : "string",
            "x-go-name" : "SecretAccessKey"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "KubeOneAzureCloudSpec" : {
        "title" : "KubeOneAzureCloudSpec specifies access credentials to Azure cloud.",
        "type" : "object",
        "properties" : {
          "clientID" : {
            "type" : "string",
            "x-go-name" : "ClientID"
          },
          "clientSecret" : {
            "type" : "string",
            "x-go-name" : "ClientSecret"
          },
          "subscriptionID" : {
            "type" : "string",
            "x-go-name" : "SubscriptionID"
          },
          "tenantID" : {
            "type" : "string",
            "x-go-name" : "TenantID"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "KubeOneCloudSpec" : {
        "type" : "object",
        "properties" : {
          "aws" : {
            "$ref" : "#/components/schemas/KubeOneAWSCloudSpec"
          },
          "azure" : {
            "$ref" : "#/components/schemas/KubeOneAzureCloudSpec"
          },
          "digitalocean" : {
            "$ref" : "#/components/schemas/KubeOneDigitalOceanCloudSpec"
          },
          "equinix" : {
            "$ref" : "#/components/schemas/KubeOneEquinixCloudSpec"
          },
          "gcp" : {
            "$ref" : "#/components/schemas/KubeOneGCPCloudSpec"
          },
          "hetzner" : {
            "$ref" : "#/components/schemas/KubeOneHetznerCloudSpec"
          },
          "nutanix" : {
            "$ref" : "#/components/schemas/KubeOneNutanixCloudSpec"
          },
          "openstack" : {
            "$ref" : "#/components/schemas/KubeOneOpenStackCloudSpec"
          },
          "vmwareclouddirector" : {
            "$ref" : "#/components/schemas/KubeOneVMwareCloudDirectorCloudSpec"
          },
          "vsphere" : {
            "$ref" : "#/components/schemas/KubeOneVSphereCloudSpec"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "KubeOneDigitalOceanCloudSpec" : {
        "title" : "KubeOneDigitalOceanCloudSpec specifies access data to DigitalOcean.",
        "type" : "object",
        "properties" : {
          "token" : {
            "type" : "string",
            "description" : "Token is used to authenticate with the DigitalOcean API.",
            "x-go-name" : "Token"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "KubeOneEquinixCloudSpec" : {
        "title" : "KubeOneEquinixCloudSpec specifies access data to a Equinix cloud.",
        "type" : "object",
        "properties" : {
          "apiKey" : {
            "type" : "string",
            "x-go-name" : "APIKey"
          },
          "projectID" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "KubeOneGCPCloudSpec" : {
        "title" : "KubeOneGCPCloudSpec specifies access data to GCP.",
        "type" : "object",
        "properties" : {
          "serviceAccount" : {
            "type" : "string",
            "x-go-name" : "ServiceAccount"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "KubeOneHetznerCloudSpec" : {
        "title" : "KubeOneHetznerCloudSpec specifies access data to hetzner cloud.",
        "type" : "object",
        "properties" : {
          "token" : {
            "type" : "string",
            "description" : "Token is used to authenticate with the Hetzner cloud API.",
            "x-go-name" : "Token"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "KubeOneNutanixCloudSpec" : {
        "title" : "KubeOneNutanixCloudSpec specifies the access data to Nutanix.",
        "type" : "object",
        "properties" : {
          "allowInsecure" : {
            "type" : "boolean",
            "x-go-name" : "AllowInsecure"
          },
          "clusterName" : {
            "type" : "string",
            "description" : "ClusterName is the Nutanix cluster that this user cluster will be deployed to.\n+optional",
            "x-go-name" : "ClusterName"
          },
          "elementEndpoint" : {
            "type" : "string",
            "description" : "PrismElementEndpoint to access Nutanix Prism Element for the CSI driver",
            "x-go-name" : "PrismElementEndpoint"
          },
          "elementPassword" : {
            "type" : "string",
            "description" : "PrismElementPassword to be used for the CSI driver",
            "x-go-name" : "PrismElementPassword"
          },
          "elementUsername" : {
            "type" : "string",
            "description" : "PrismElementUsername to be used for the CSI driver",
            "x-go-name" : "PrismElementUsername"
          },
          "endpoint" : {
            "type" : "string",
            "description" : "Endpoint is the Nutanix API (Prism Central) endpoint",
            "x-go-name" : "Endpoint"
          },
          "password" : {
            "type" : "string",
            "x-go-name" : "Password"
          },
          "port" : {
            "type" : "string",
            "description" : "Port is the Nutanix API (Prism Central) port",
            "x-go-name" : "Port"
          },
          "proxyURL" : {
            "type" : "string",
            "x-go-name" : "ProxyURL"
          },
          "username" : {
            "type" : "string",
            "x-go-name" : "Username"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "KubeOneOpenStackCloudSpec" : {
        "title" : "KubeOneOpenStackCloudSpec specifies access data to an OpenStack cloud.",
        "type" : "object",
        "properties" : {
          "authURL" : {
            "type" : "string",
            "x-go-name" : "AuthURL"
          },
          "domain" : {
            "type" : "string",
            "x-go-name" : "Domain"
          },
          "password" : {
            "type" : "string",
            "x-go-name" : "Password"
          },
          "project" : {
            "type" : "string",
            "description" : "Project, formally known as tenant.",
            "x-go-name" : "Project"
          },
          "projectID" : {
            "type" : "string",
            "description" : "ProjectID, formally known as tenantID.",
            "x-go-name" : "ProjectID"
          },
          "region" : {
            "type" : "string",
            "x-go-name" : "Region"
          },
          "username" : {
            "type" : "string",
            "x-go-name" : "Username"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "KubeOneSSHKey" : {
        "title" : "SSHKeySpec represents the details of a ssh key.",
        "type" : "object",
        "properties" : {
          "passphrase" : {
            "type" : "string",
            "x-go-name" : "Passphrase"
          },
          "privateKey" : {
            "type" : "string",
            "description" : "PrivateKey Base64 encoded privateKey",
            "x-go-name" : "PrivateKey"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "KubeOneSpec" : {
        "type" : "object",
        "properties" : {
          "cloudSpec" : {
            "$ref" : "#/components/schemas/KubeOneCloudSpec"
          },
          "containerRuntime" : {
            "type" : "string",
            "x-go-name" : "ContainerRuntime"
          },
          "manifest" : {
            "type" : "string",
            "description" : "Manifest Base64 encoded manifest",
            "x-go-name" : "Manifest"
          },
          "sshKey" : {
            "$ref" : "#/components/schemas/KubeOneSSHKey"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "KubeOneVMwareCloudDirectorCloudSpec" : {
        "title" : "KubeOneVMwareCloudDirectorCloudSpec represents credentials for accessing VMWare Cloud Director.",
        "type" : "object",
        "properties" : {
          "organization" : {
            "type" : "string",
            "x-go-name" : "Organization"
          },
          "password" : {
            "type" : "string",
            "x-go-name" : "Password"
          },
          "url" : {
            "type" : "string",
            "x-go-name" : "URL"
          },
          "username" : {
            "type" : "string",
            "x-go-name" : "Username"
          },
          "vdc" : {
            "type" : "string",
            "x-go-name" : "VDC"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "KubeOneVSphereCloudSpec" : {
        "title" : "KubeOneVSphereCloudSpec credentials represents a credential for accessing vSphere.",
        "type" : "object",
        "properties" : {
          "password" : {
            "type" : "string",
            "x-go-name" : "Password"
          },
          "server" : {
            "type" : "string",
            "x-go-name" : "Server"
          },
          "username" : {
            "type" : "string",
            "x-go-name" : "Username"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "KubermaticVersions" : {
        "title" : "KubermaticVersions describes the versions of running Kubermatic components.",
        "type" : "object",
        "properties" : {
          "api" : {
            "type" : "string",
            "description" : "Version of the Kubermatic API server.",
            "x-go-name" : "API"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "KubernetesDashboard" : {
        "title" : "KubernetesDashboard contains settings for the kubernetes-dashboard component as part of the cluster control plane.",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "description" : "Controls whether kubernetes-dashboard is deployed to the user cluster or not.\nEnabled by default.",
            "x-go-name" : "Enabled"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "Kubevirt" : {
        "type" : "object",
        "properties" : {
          "datacenter" : {
            "type" : "string",
            "x-go-name" : "Datacenter"
          },
          "enabled" : {
            "type" : "boolean",
            "x-go-name" : "Enabled"
          },
          "kubeconfig" : {
            "type" : "string",
            "x-go-name" : "Kubeconfig"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "KubevirtCloudSpec" : {
        "title" : "KubevirtCloudSpec specifies the access data to Kubevirt.",
        "type" : "object",
        "properties" : {
          "credentialsReference" : {
            "$ref" : "#/components/schemas/GlobalSecretKeySelector"
          },
          "csiKubeconfig" : {
            "type" : "string",
            "x-go-name" : "CSIKubeconfig"
          },
          "infraStorageClasses" : {
            "type" : "array",
            "description" : "InfraStorageClasses is a list of storage classes from KubeVirt infra cluster that are used for\ninitialization of user cluster storage classes by the CSI driver kubevirt (hot pluggable disks)",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "InfraStorageClasses"
          },
          "kubeconfig" : {
            "type" : "string",
            "description" : "The cluster's kubeconfig file, encoded with base64.",
            "x-go-name" : "Kubeconfig"
          },
          "preAllocatedDataVolumes" : {
            "type" : "array",
            "description" : "PreAllocatedDataVolumes holds list of preallocated DataVolumes which can be used as reference for DataVolume cloning.",
            "items" : {
              "$ref" : "#/components/schemas/PreAllocatedDataVolume"
            },
            "x-go-name" : "PreAllocatedDataVolumes"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "KubevirtNodeSpec" : {
        "required" : [ "cpus", "memory", "primaryDiskOSImage", "primaryDiskSize", "primaryDiskStorageClassName" ],
        "type" : "object",
        "properties" : {
          "cpus" : {
            "type" : "string",
            "description" : "CPUs states how many cpus the kubevirt node will have.",
            "x-go-name" : "CPUs"
          },
          "flavorName" : {
            "type" : "string",
            "description" : "FlavorName states name of the virtual-machine flavor.",
            "x-go-name" : "FlavorName"
          },
          "flavorProfile" : {
            "type" : "string",
            "description" : "FlavorProfile states name of virtual-machine profile.",
            "x-go-name" : "FlavorProfile"
          },
          "memory" : {
            "type" : "string",
            "description" : "Memory states the memory that kubevirt node will have.",
            "x-go-name" : "Memory"
          },
          "nodeAffinityPreset" : {
            "$ref" : "#/components/schemas/NodeAffinityPreset"
          },
          "podAffinityPreset" : {
            "type" : "string",
            "description" : "PodAffinityPreset describes pod affinity scheduling rules",
            "x-go-name" : "PodAffinityPreset"
          },
          "podAntiAffinityPreset" : {
            "type" : "string",
            "description" : "PodAntiAffinityPreset describes pod anti-affinity scheduling rules",
            "x-go-name" : "PodAntiAffinityPreset"
          },
          "primaryDiskOSImage" : {
            "type" : "string",
            "description" : "PrimaryDiskOSImage states the source from which the imported image will be downloaded.\nThis field contains:\na URL to download an Os Image from a HTTP source.\na DataVolume Name as source for DataVolume cloning.",
            "x-go-name" : "PrimaryDiskOSImage"
          },
          "primaryDiskSize" : {
            "type" : "string",
            "description" : "PrimaryDiskSize states the size of the provisioned pvc per node.",
            "x-go-name" : "PrimaryDiskSize"
          },
          "primaryDiskStorageClassName" : {
            "type" : "string",
            "description" : "PrimaryDiskStorageClassName states the storage class name for the provisioned PVCs.",
            "x-go-name" : "PrimaryDiskStorageClassName"
          },
          "secondaryDisks" : {
            "type" : "array",
            "description" : "SecondaryDisks contains list of secondary-disks",
            "items" : {
              "$ref" : "#/components/schemas/SecondaryDisks"
            },
            "x-go-name" : "SecondaryDisks"
          }
        },
        "description" : "KubevirtNodeSpec kubevirt specific node settings",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "LBSKU" : {
        "title" : "Azure SKU for Load Balancers. Possible values are `basic` and `standard`.",
        "type" : "string",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "LabelKeyList" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "LabelSelector" : {
        "type" : "object",
        "properties" : {
          "matchExpressions" : {
            "type" : "array",
            "description" : "matchExpressions is a list of label selector requirements. The requirements are ANDed.\n+optional",
            "items" : {
              "$ref" : "#/components/schemas/LabelSelectorRequirement"
            },
            "x-go-name" : "MatchExpressions"
          },
          "matchLabels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n+optional",
            "x-go-name" : "MatchLabels"
          }
        },
        "description" : "A label selector is a label query over a set of resources. The result of matchLabels and\nmatchExpressions are ANDed. An empty label selector matches all objects. A null\nlabel selector matches no objects.\n+structType=atomic",
        "x-go-package" : "k8s.io/apimachinery/pkg/apis/meta/v1"
      },
      "LabelSelectorOperator" : {
        "title" : "A label selector operator is the set of operators that can be used in a selector requirement.",
        "type" : "string",
        "x-go-package" : "k8s.io/apimachinery/pkg/apis/meta/v1"
      },
      "LabelSelectorRequirement" : {
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string",
            "description" : "key is the label key that the selector applies to.\n+patchMergeKey=key\n+patchStrategy=merge",
            "x-go-name" : "Key"
          },
          "operator" : {
            "$ref" : "#/components/schemas/LabelSelectorOperator"
          },
          "values" : {
            "type" : "array",
            "description" : "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.\n+optional",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Values"
          }
        },
        "description" : "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
        "x-go-package" : "k8s.io/apimachinery/pkg/apis/meta/v1"
      },
      "LocalObjectReference" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
            "x-go-name" : "Name"
          }
        },
        "description" : "LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.\n+structType=atomic",
        "x-go-package" : "k8s.io/api/core/v1"
      },
      "LoggingRateLimitSettings" : {
        "title" : "LoggingRateLimitSettings contains rate-limiting configuration for logging in the user cluster.",
        "type" : "object",
        "properties" : {
          "ingestionBurstSize" : {
            "type" : "integer",
            "description" : "IngestionBurstSize represents ingestion burst size in number of requests (nginx `burst`).",
            "format" : "int32",
            "x-go-name" : "IngestionBurstSize"
          },
          "ingestionRate" : {
            "type" : "integer",
            "description" : "IngestionRate represents ingestion rate limit in requests per second (nginx `rate` in `r/s`).",
            "format" : "int32",
            "x-go-name" : "IngestionRate"
          },
          "queryBurstSize" : {
            "type" : "integer",
            "description" : "QueryBurstSize represents query burst size in number of requests (nginx `burst`).",
            "format" : "int32",
            "x-go-name" : "QueryBurstSize"
          },
          "queryRate" : {
            "type" : "integer",
            "description" : "QueryRate represents query request rate limit per second (nginx `rate` in `r/s`).",
            "format" : "int32",
            "x-go-name" : "QueryRate"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "MLA" : {
        "type" : "object",
        "properties" : {
          "user_cluster_mla_enabled" : {
            "type" : "boolean",
            "description" : "whether the user cluster MLA (Monitoring, Logging & Alerting) stack is enabled in the seed",
            "x-go-name" : "UserClusterMLAEnabled"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "MLAAdminSetting" : {
        "title" : "MLAAdminSetting represents an object holding admin setting options for user cluster MLA (Monitoring, Logging and Alerting).",
        "type" : "object",
        "properties" : {
          "loggingRateLimits" : {
            "$ref" : "#/components/schemas/LoggingRateLimitSettings"
          },
          "monitoringRateLimits" : {
            "$ref" : "#/components/schemas/MonitoringRateLimitSettings"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "MLASettings" : {
        "type" : "object",
        "properties" : {
          "loggingEnabled" : {
            "type" : "boolean",
            "description" : "LoggingEnabled is the flag for enabling logging in user cluster.",
            "x-go-name" : "LoggingEnabled"
          },
          "loggingResources" : {
            "$ref" : "#/components/schemas/ResourceRequirements"
          },
          "monitoringEnabled" : {
            "type" : "boolean",
            "description" : "MonitoringEnabled is the flag for enabling monitoring in user cluster.",
            "x-go-name" : "MonitoringEnabled"
          },
          "monitoringReplicas" : {
            "type" : "integer",
            "description" : "MonitoringReplicas is the number of desired pods of user cluster prometheus deployment.",
            "format" : "int32",
            "x-go-name" : "MonitoringReplicas"
          },
          "monitoringResources" : {
            "$ref" : "#/components/schemas/ResourceRequirements"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "MachineDeploymentStatus" : {
        "type" : "object",
        "properties" : {
          "availableReplicas" : {
            "type" : "integer",
            "description" : "Total number of available machines (ready for at least minReadySeconds)\ntargeted by this deployment.\n+optional",
            "format" : "int32",
            "x-go-name" : "AvailableReplicas"
          },
          "observedGeneration" : {
            "type" : "integer",
            "description" : "The generation observed by the deployment controller.\n+optional",
            "format" : "int64",
            "x-go-name" : "ObservedGeneration"
          },
          "readyReplicas" : {
            "type" : "integer",
            "description" : "Total number of ready machines targeted by this deployment.\n+optional",
            "format" : "int32",
            "x-go-name" : "ReadyReplicas"
          },
          "replicas" : {
            "type" : "integer",
            "description" : "Total number of non-terminated machines targeted by this deployment\n(their labels match the selector).\n+optional",
            "format" : "int32",
            "x-go-name" : "Replicas"
          },
          "unavailableReplicas" : {
            "type" : "integer",
            "description" : "Total number of unavailable machines targeted by this deployment.\nThis is the total number of machines that are still required for\nthe deployment to have 100% available capacity. They may either\nbe machines that are running but not yet available or machines\nthat still have not been created.\n+optional",
            "format" : "int32",
            "x-go-name" : "UnavailableReplicas"
          },
          "updatedReplicas" : {
            "type" : "integer",
            "description" : "Total number of non-terminated machines targeted by this deployment\nthat have the desired template spec.\n+optional",
            "format" : "int32",
            "x-go-name" : "UpdatedReplicas"
          }
        },
        "description" : "[MachineDeploymentStatus]\nMachineDeploymentStatus defines the observed state of MachineDeployment.",
        "x-go-package" : "github.com/kubermatic/machine-controller/pkg/apis/cluster/v1alpha1"
      },
      "MachineDeploymentVMResourceQuota" : {
        "type" : "object",
        "properties" : {
          "enableGPU" : {
            "type" : "boolean",
            "x-go-name" : "EnableGPU"
          },
          "maxCPU" : {
            "type" : "integer",
            "description" : "Maximal number of vCPU",
            "format" : "int64",
            "x-go-name" : "MaxCPU"
          },
          "maxRAM" : {
            "type" : "integer",
            "description" : "Maximum RAM size in GB",
            "format" : "int64",
            "x-go-name" : "MaxRAM"
          },
          "minCPU" : {
            "type" : "integer",
            "description" : "Minimal number of vCPU",
            "format" : "int64",
            "x-go-name" : "MinCPU"
          },
          "minRAM" : {
            "type" : "integer",
            "description" : "Minimal RAM size in GB",
            "format" : "int64",
            "x-go-name" : "MinRAM"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "MachineNetworkingConfig" : {
        "title" : "MachineNetworkingConfig specifies the networking parameters used for IPAM.",
        "type" : "object",
        "properties" : {
          "cidr" : {
            "type" : "string",
            "x-go-name" : "CIDR"
          },
          "dnsServers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "DNSServers"
          },
          "gateway" : {
            "type" : "string",
            "x-go-name" : "Gateway"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "MasterVersion" : {
        "type" : "object",
        "properties" : {
          "default" : {
            "type" : "boolean",
            "x-go-name" : "Default"
          },
          "restrictedByKubeletVersion" : {
            "type" : "boolean",
            "description" : "If true, then given version control plane version is not compatible\nwith one of the kubelets inside cluster and shouldn't be used.",
            "x-go-name" : "RestrictedByKubeletVersion"
          },
          "version" : {
            "$ref" : "#/components/schemas/Version"
          }
        },
        "description" : "MasterVersion describes a version of the master components",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "Match" : {
        "title" : "Match contains the constraint to resource matching data.",
        "type" : "object",
        "properties" : {
          "excludedNamespaces" : {
            "type" : "array",
            "description" : "ExcludedNamespaces is a list of namespace names. If defined, a constraint will only apply to resources not in a listed namespace.",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "ExcludedNamespaces"
          },
          "kinds" : {
            "type" : "array",
            "description" : "Kinds accepts a list of objects with apiGroups and kinds fields that list the groups/kinds of objects to which\nthe constraint will apply. If multiple groups/kinds objects are specified, only one match is needed for the resource to be in scope",
            "items" : {
              "$ref" : "#/components/schemas/Kind"
            },
            "x-go-name" : "Kinds"
          },
          "labelSelector" : {
            "$ref" : "#/components/schemas/LabelSelector"
          },
          "namespaceSelector" : {
            "$ref" : "#/components/schemas/LabelSelector"
          },
          "namespaces" : {
            "type" : "array",
            "description" : "Namespaces is a list of namespace names. If defined, a constraint will only apply to resources in a listed namespace.",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Namespaces"
          },
          "scope" : {
            "type" : "string",
            "description" : "Scope accepts *, Cluster, or Namespaced which determines if cluster-scoped and/or namesapced-scoped resources are selected. (defaults to *)",
            "x-go-name" : "Scope"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "MatchEntry" : {
        "type" : "object",
        "properties" : {
          "excludedNamespaces" : {
            "type" : "array",
            "description" : "Namespaces which will be excluded",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "ExcludedNamespaces"
          },
          "processes" : {
            "type" : "array",
            "description" : "Processes which will be excluded in the given namespaces (sync, webhook, audit, *)",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Processes"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "MeteringConfiguration" : {
        "title" : "MeteringConfiguration contains all the configuration for the metering tool.",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "x-go-name" : "Enabled"
          },
          "reports" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/MeteringReportConfiguration"
            },
            "description" : "ReportConfigurations is a map of report configuration definitions.",
            "x-go-name" : "ReportConfigurations"
          },
          "storageClassName" : {
            "type" : "string",
            "description" : "StorageClassName is the name of the storage class that the metering prometheus instance uses to store metric data for reporting.",
            "x-go-name" : "StorageClassName"
          },
          "storageSize" : {
            "type" : "string",
            "description" : "StorageSize is the size of the storage class. Default value is 100Gi.",
            "x-go-name" : "StorageSize"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "MeteringReport" : {
        "type" : "object",
        "properties" : {
          "lastModified" : {
            "type" : "string",
            "format" : "date-time",
            "x-go-name" : "LastModified"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "size" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "Size"
          }
        },
        "description" : "MeteringReport holds objects names and metadata for available reports",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "MeteringReportConfiguration" : {
        "type" : "object",
        "properties" : {
          "interval" : {
            "type" : "integer",
            "description" : "Interval defines the number of days consulted in the metering report.",
            "format" : "uint32",
            "x-go-name" : "Interval"
          },
          "retention" : {
            "type" : "integer",
            "description" : "Retention defines a number of days after which reports are queued for removal. If not set, reports are kept forever.\nPlease note that this functionality works only for object storage that supports an object lifecycle management mechanism.",
            "format" : "uint32",
            "x-go-name" : "Retention"
          },
          "schedule" : {
            "type" : "string",
            "description" : "Schedule in Cron format, see https://en.wikipedia.org/wiki/Cron. Please take a note that Schedule is responsible\nonly for setting the time when a report generation mechanism kicks off. The Interval MUST be set independently.",
            "x-go-name" : "Schedule"
          },
          "type" : {
            "type" : "array",
            "description" : "Types of reports to generate. Available report types are cluster and namespace. By default, all types of reports are generated.",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Types"
          }
        },
        "description" : "MeteringReportConfiguration holds report configuration",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "MeteringReportURL" : {
        "type" : "string",
        "description" : "ReportURL represent an S3 pre signed URL to download a report",
        "x-go-name" : "ReportURL",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "MlaOptions" : {
        "type" : "object",
        "properties" : {
          "loggingEnabled" : {
            "type" : "boolean",
            "x-go-name" : "LoggingEnabled"
          },
          "loggingEnforced" : {
            "type" : "boolean",
            "x-go-name" : "LoggingEnforced"
          },
          "monitoringEnabled" : {
            "type" : "boolean",
            "x-go-name" : "MonitoringEnabled"
          },
          "monitoringEnforced" : {
            "type" : "boolean",
            "x-go-name" : "MonitoringEnforced"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "MonitoringRateLimitSettings" : {
        "title" : "MonitoringRateLimitSettings contains rate-limiting configuration for monitoring in the user cluster.",
        "type" : "object",
        "properties" : {
          "ingestionBurstSize" : {
            "type" : "integer",
            "description" : "IngestionBurstSize represents ingestion burst size in samples per second (Cortex `ingestion_burst_size`).",
            "format" : "int32",
            "x-go-name" : "IngestionBurstSize"
          },
          "ingestionRate" : {
            "type" : "integer",
            "description" : "IngestionRate represents the ingestion rate limit in samples per second (Cortex `ingestion_rate`).",
            "format" : "int32",
            "x-go-name" : "IngestionRate"
          },
          "maxSamplesPerQuery" : {
            "type" : "integer",
            "description" : "MaxSamplesPerQuery represents maximum number of samples during a query (Cortex `max_samples_per_query`).",
            "format" : "int32",
            "x-go-name" : "MaxSamplesPerQuery"
          },
          "maxSeriesPerMetric" : {
            "type" : "integer",
            "description" : "MaxSeriesPerMetric represents maximum number of series per metric (Cortex `max_series_per_metric`).",
            "format" : "int32",
            "x-go-name" : "MaxSeriesPerMetric"
          },
          "maxSeriesPerQuery" : {
            "type" : "integer",
            "description" : "MaxSeriesPerQuery represents maximum number of timeseries during a query (Cortex `max_series_per_query`).",
            "format" : "int32",
            "x-go-name" : "MaxSeriesPerQuery"
          },
          "maxSeriesTotal" : {
            "type" : "integer",
            "description" : "MaxSeriesTotal represents maximum number of series per this user cluster (Cortex `max_series_per_user`).",
            "format" : "int32",
            "x-go-name" : "MaxSeriesTotal"
          },
          "queryBurstSize" : {
            "type" : "integer",
            "description" : "QueryBurstSize represents query burst size in number of requests (nginx `burst`).",
            "format" : "int32",
            "x-go-name" : "QueryBurstSize"
          },
          "queryRate" : {
            "type" : "integer",
            "description" : "QueryRate represents  query request rate limit per second (nginx `rate` in `r/s`).",
            "format" : "int32",
            "x-go-name" : "QueryRate"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "Names" : {
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string",
            "x-go-name" : "Kind"
          },
          "shortNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "ShortNames"
          }
        },
        "x-go-package" : "github.com/open-policy-agent/frameworks/constraint/pkg/apis/templates/v1"
      },
      "Namespace" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          }
        },
        "description" : "Namespace defines namespace",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "NamespaceSpec" : {
        "title" : "NamespaceSpec describe the desired state of the namespace where application will be created.",
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Annotations of the namespace\nMore info: http://kubernetes.io/docs/user-guide/annotations\n+optional",
            "x-go-name" : "Annotations"
          },
          "create" : {
            "type" : "boolean",
            "description" : "Create defines whether the namespace should be created if it does not exist. Defaults to true",
            "x-go-name" : "Create"
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Labels of the namespace\nMore info: http://kubernetes.io/docs/user-guide/labels\n+optional",
            "x-go-name" : "Labels"
          },
          "name" : {
            "pattern" : "=`^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$`",
            "type" : "string",
            "description" : "Name is the namespace to deploy the Application into.\nShould be a valid lowercase RFC1123 domain name",
            "x-go-name" : "Name"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/apps.kubermatic/v1"
      },
      "NetworkDefaults" : {
        "title" : "NetworkDefaults contains cluster network default settings.",
        "type" : "object",
        "properties" : {
          "ipv4" : {
            "$ref" : "#/components/schemas/NetworkDefaultsIPFamily"
          },
          "ipv6" : {
            "$ref" : "#/components/schemas/NetworkDefaultsIPFamily"
          },
          "nodeLocalDNSCacheEnabled" : {
            "type" : "boolean",
            "description" : "NodeLocalDNSCacheEnabled controls whether the NodeLocal DNS Cache feature is enabled.",
            "x-go-name" : "NodeLocalDNSCacheEnabled"
          },
          "proxyMode" : {
            "type" : "string",
            "description" : "ProxyMode defines the default kube-proxy mode (\"ipvs\" / \"iptables\" / \"ebpf\").",
            "x-go-name" : "ProxyMode"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "NetworkDefaultsIPFamily" : {
        "title" : "NetworkDefaultsIPFamily contains cluster network default settings for an IP family.",
        "type" : "object",
        "properties" : {
          "nodeCidrMaskSize" : {
            "type" : "integer",
            "description" : "NodeCIDRMaskSize contains the default mask size used to address the nodes within provided Pods CIDR.",
            "format" : "int32",
            "x-go-name" : "NodeCIDRMaskSize"
          },
          "nodePortsAllowedIPRange" : {
            "type" : "string",
            "description" : "NodePortsAllowedIPRange defines the default IP range from which access to NodePort services is allowed for applicable cloud providers.",
            "x-go-name" : "NodePortsAllowedIPRange"
          },
          "podsCidr" : {
            "type" : "string",
            "description" : "PodsCIDR contains the default network range from which POD networks are allocated.",
            "x-go-name" : "PodsCIDR"
          },
          "servicesCidr" : {
            "type" : "string",
            "description" : "ServicesCIDR contains the default network range from which service VIPs are allocated.",
            "x-go-name" : "ServicesCIDR"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "NetworkRanges" : {
        "title" : "NetworkRanges represents ranges of network addresses.",
        "type" : "object",
        "properties" : {
          "cidrBlocks" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "CIDRBlocks"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "Node" : {
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Annotations that can be added to the resource",
            "x-go-name" : "Annotations"
          },
          "creationTimestamp" : {
            "type" : "string",
            "description" : "CreationTimestamp is a timestamp representing the server time when this object was created.",
            "format" : "date-time",
            "x-go-name" : "CreationTimestamp"
          },
          "deletionTimestamp" : {
            "type" : "string",
            "description" : "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
            "format" : "date-time",
            "x-go-name" : "DeletionTimestamp"
          },
          "id" : {
            "type" : "string",
            "description" : "ID unique value that identifies the resource generated by the server. Read-Only.",
            "x-go-name" : "ID"
          },
          "name" : {
            "type" : "string",
            "description" : "Name represents human readable name for the resource",
            "x-go-name" : "Name"
          },
          "spec" : {
            "$ref" : "#/components/schemas/NodeSpec"
          },
          "status" : {
            "$ref" : "#/components/schemas/NodeStatus"
          }
        },
        "description" : "Node represents a worker node that is part of a cluster",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "NodeAddress" : {
        "title" : "NodeAddress contains information for the node's address.",
        "type" : "object",
        "properties" : {
          "address" : {
            "type" : "string",
            "example" : "192.168.1.1, node1.my.dns",
            "x-go-name" : "Address"
          },
          "type" : {
            "type" : "string",
            "example" : "ExternalIP, InternalIP, InternalDNS, ExternalDNS",
            "x-go-name" : "Type"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "NodeAffinityPreset" : {
        "type" : "object",
        "properties" : {
          "Key" : {
            "type" : "string"
          },
          "Type" : {
            "type" : "string"
          },
          "Values" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "NodeCloudSpec" : {
        "title" : "NodeCloudSpec represents the collection of cloud provider specific settings. Only one must be set at a time.",
        "type" : "object",
        "properties" : {
          "alibaba" : {
            "$ref" : "#/components/schemas/AlibabaNodeSpec"
          },
          "anexia" : {
            "$ref" : "#/components/schemas/AnexiaNodeSpec"
          },
          "aws" : {
            "$ref" : "#/components/schemas/AWSNodeSpec"
          },
          "azure" : {
            "$ref" : "#/components/schemas/AzureNodeSpec"
          },
          "digitalocean" : {
            "$ref" : "#/components/schemas/DigitaloceanNodeSpec"
          },
          "gcp" : {
            "$ref" : "#/components/schemas/GCPNodeSpec"
          },
          "hetzner" : {
            "$ref" : "#/components/schemas/HetznerNodeSpec"
          },
          "kubevirt" : {
            "$ref" : "#/components/schemas/KubevirtNodeSpec"
          },
          "nutanix" : {
            "$ref" : "#/components/schemas/NutanixNodeSpec"
          },
          "openstack" : {
            "$ref" : "#/components/schemas/OpenstackNodeSpec"
          },
          "packet" : {
            "$ref" : "#/components/schemas/PacketNodeSpec"
          },
          "vmwareclouddirector" : {
            "$ref" : "#/components/schemas/VMwareCloudDirectorNodeSpec"
          },
          "vsphere" : {
            "$ref" : "#/components/schemas/VSphereNodeSpec"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "NodeDeployment" : {
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Annotations that can be added to the resource",
            "x-go-name" : "Annotations"
          },
          "creationTimestamp" : {
            "type" : "string",
            "description" : "CreationTimestamp is a timestamp representing the server time when this object was created.",
            "format" : "date-time",
            "x-go-name" : "CreationTimestamp"
          },
          "deletionTimestamp" : {
            "type" : "string",
            "description" : "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
            "format" : "date-time",
            "x-go-name" : "DeletionTimestamp"
          },
          "id" : {
            "type" : "string",
            "description" : "ID unique value that identifies the resource generated by the server. Read-Only.",
            "x-go-name" : "ID"
          },
          "name" : {
            "type" : "string",
            "description" : "Name represents human readable name for the resource",
            "x-go-name" : "Name"
          },
          "spec" : {
            "$ref" : "#/components/schemas/NodeDeploymentSpec"
          },
          "status" : {
            "$ref" : "#/components/schemas/MachineDeploymentStatus"
          }
        },
        "description" : "NodeDeployment represents a set of worker nodes that is part of a cluster",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "NodeDeploymentSpec" : {
        "required" : [ "replicas", "template" ],
        "type" : "object",
        "properties" : {
          "dynamicConfig" : {
            "type" : "boolean",
            "description" : "Only supported for nodes with Kubernetes 1.23 or less.",
            "x-go-name" : "DynamicConfig"
          },
          "paused" : {
            "type" : "boolean",
            "x-go-name" : "Paused"
          },
          "replicas" : {
            "type" : "integer",
            "format" : "int32",
            "x-go-name" : "Replicas"
          },
          "template" : {
            "$ref" : "#/components/schemas/NodeSpec"
          }
        },
        "description" : "NodeDeploymentSpec node deployment specification",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "NodeMetric" : {
        "type" : "object",
        "properties" : {
          "cpuAvailableMillicores" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "CPUAvailableMillicores"
          },
          "cpuTotalMillicores" : {
            "type" : "integer",
            "description" : "CPUTotalMillicores in m cores",
            "format" : "int64",
            "x-go-name" : "CPUTotalMillicores"
          },
          "cpuUsedPercentage" : {
            "type" : "integer",
            "description" : "CPUUsedPercentage in percentage",
            "format" : "int64",
            "x-go-name" : "CPUUsedPercentage"
          },
          "memoryAvailableBytes" : {
            "type" : "integer",
            "description" : "MemoryAvailableBytes available memory for node",
            "format" : "int64",
            "x-go-name" : "MemoryAvailableBytes"
          },
          "memoryTotalBytes" : {
            "type" : "integer",
            "description" : "MemoryTotalBytes current memory usage in bytes",
            "format" : "int64",
            "x-go-name" : "MemoryTotalBytes"
          },
          "memoryUsedPercentage" : {
            "type" : "integer",
            "description" : "MemoryUsedPercentage in percentage",
            "format" : "int64",
            "x-go-name" : "MemoryUsedPercentage"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          }
        },
        "description" : "NodeMetric defines a metric for the given node",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "NodeResources" : {
        "type" : "object",
        "properties" : {
          "cpu" : {
            "type" : "string",
            "x-go-name" : "CPU"
          },
          "memory" : {
            "type" : "string",
            "x-go-name" : "Memory"
          }
        },
        "description" : "NodeResources cpu and memory of a node",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "NodeSettings" : {
        "title" : "NodeSettings are node specific flags which can be configured on datacenter level.",
        "type" : "object",
        "properties" : {
          "containerdRegistryMirrors" : {
            "$ref" : "#/components/schemas/ContainerRuntimeContainerd"
          },
          "httpProxy" : {
            "$ref" : "#/components/schemas/ProxyValue"
          },
          "insecureRegistries" : {
            "type" : "array",
            "description" : "Optional: These image registries will be configured as insecure\non the container runtime.",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "InsecureRegistries"
          },
          "noProxy" : {
            "$ref" : "#/components/schemas/ProxyValue"
          },
          "pauseImage" : {
            "type" : "string",
            "description" : "Optional: Translates to --pod-infra-container-image on the kubelet.\nIf not set, the kubelet will default it.",
            "x-go-name" : "PauseImage"
          },
          "registryMirrors" : {
            "type" : "array",
            "description" : "Optional: These image registries will be configured as registry mirrors\non the container runtime.",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "RegistryMirrors"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "NodeSpec" : {
        "required" : [ "cloud", "operatingSystem", "versions" ],
        "type" : "object",
        "properties" : {
          "cloud" : {
            "$ref" : "#/components/schemas/NodeCloudSpec"
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Map of string keys and values that can be used to organize and categorize (scope and select) objects.\nIt will be applied to Nodes allowing users run their apps on specific Node using labelSelector.",
            "x-go-name" : "Labels"
          },
          "operatingSystem" : {
            "$ref" : "#/components/schemas/OperatingSystemSpec"
          },
          "sshUserName" : {
            "type" : "string",
            "x-go-name" : "SSHUserName"
          },
          "taints" : {
            "type" : "array",
            "description" : "List of taints to set on new nodes",
            "items" : {
              "$ref" : "#/components/schemas/TaintSpec"
            },
            "x-go-name" : "Taints"
          },
          "versions" : {
            "$ref" : "#/components/schemas/NodeVersionInfo"
          }
        },
        "description" : "NodeSpec node specification",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "NodeStatus" : {
        "title" : "NodeStatus is information about the current status of a node.",
        "type" : "object",
        "properties" : {
          "addresses" : {
            "type" : "array",
            "description" : "different addresses of a node",
            "items" : {
              "$ref" : "#/components/schemas/NodeAddress"
            },
            "x-go-name" : "Addresses"
          },
          "allocatable" : {
            "$ref" : "#/components/schemas/NodeResources"
          },
          "capacity" : {
            "$ref" : "#/components/schemas/NodeResources"
          },
          "errorMessage" : {
            "type" : "string",
            "description" : "in case of a error this will contain a detailed error explanation",
            "x-go-name" : "ErrorMessage"
          },
          "errorReason" : {
            "type" : "string",
            "description" : "in case of a error this will contain a short error message",
            "x-go-name" : "ErrorReason"
          },
          "machineName" : {
            "type" : "string",
            "description" : "name of the actual Machine object",
            "x-go-name" : "MachineName"
          },
          "nodeInfo" : {
            "$ref" : "#/components/schemas/NodeSystemInfo"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "NodeSystemInfo" : {
        "title" : "NodeSystemInfo is a set of versions/ids/uuids to uniquely identify the node.",
        "type" : "object",
        "properties" : {
          "architecture" : {
            "type" : "string",
            "x-go-name" : "Architecture"
          },
          "containerRuntime" : {
            "type" : "string",
            "x-go-name" : "ContainerRuntime"
          },
          "containerRuntimeVersion" : {
            "type" : "string",
            "x-go-name" : "ContainerRuntimeVersion"
          },
          "kernelVersion" : {
            "type" : "string",
            "x-go-name" : "KernelVersion"
          },
          "kubeletVersion" : {
            "type" : "string",
            "x-go-name" : "KubeletVersion"
          },
          "operatingSystem" : {
            "type" : "string",
            "x-go-name" : "OperatingSystem"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "NodeVersionInfo" : {
        "type" : "object",
        "properties" : {
          "kubelet" : {
            "type" : "string",
            "x-go-name" : "Kubelet"
          }
        },
        "description" : "NodeVersionInfo node version information",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "NodesMetric" : {
        "type" : "object",
        "properties" : {
          "cpuAvailableMillicores" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "CPUAvailableMillicores"
          },
          "cpuTotalMillicores" : {
            "type" : "integer",
            "description" : "CPUTotalMillicores in m cores",
            "format" : "int64",
            "x-go-name" : "CPUTotalMillicores"
          },
          "cpuUsedPercentage" : {
            "type" : "integer",
            "description" : "CPUUsedPercentage in percentage",
            "format" : "int64",
            "x-go-name" : "CPUUsedPercentage"
          },
          "memoryAvailableBytes" : {
            "type" : "integer",
            "description" : "MemoryAvailableBytes available memory for node",
            "format" : "int64",
            "x-go-name" : "MemoryAvailableBytes"
          },
          "memoryTotalBytes" : {
            "type" : "integer",
            "description" : "MemoryTotalBytes current memory usage in bytes",
            "format" : "int64",
            "x-go-name" : "MemoryTotalBytes"
          },
          "memoryUsedPercentage" : {
            "type" : "integer",
            "description" : "MemoryUsedPercentage in percentage",
            "format" : "int64",
            "x-go-name" : "MemoryUsedPercentage"
          }
        },
        "description" : "NodesMetric defines a metric for a group of nodes",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "Nutanix" : {
        "type" : "object",
        "properties" : {
          "clusterName" : {
            "type" : "string",
            "description" : "ClusterName is the Nutanix cluster to deploy resources and nodes to.",
            "x-go-name" : "ClusterName"
          },
          "csiEndpoint" : {
            "type" : "string",
            "description" : "CSIEndpoint to access Nutanix Prism Element for csi driver",
            "x-go-name" : "CSIEndpoint"
          },
          "csiPassword" : {
            "type" : "string",
            "description" : "Prism Element Password for csi driver",
            "x-go-name" : "CSIPassword"
          },
          "csiPort" : {
            "type" : "integer",
            "description" : "CSIPort to use when connecting to the Nutanix Prism Element endpoint (defaults to 9440)",
            "format" : "int32",
            "x-go-name" : "CSIPort"
          },
          "csiUsername" : {
            "type" : "string",
            "description" : "Prism Element Username for csi driver",
            "x-go-name" : "CSIUsername"
          },
          "datacenter" : {
            "type" : "string",
            "x-go-name" : "Datacenter"
          },
          "enabled" : {
            "type" : "boolean",
            "x-go-name" : "Enabled"
          },
          "password" : {
            "type" : "string",
            "description" : "Password is the password corresponding to the provided user.",
            "x-go-name" : "Password"
          },
          "projectName" : {
            "type" : "string",
            "description" : "ProjectName is the optional Nutanix project to use. If none is given,\nno project will be used.",
            "x-go-name" : "ProjectName"
          },
          "proxyURL" : {
            "type" : "string",
            "description" : "ProxyURL is used to optionally configure a HTTP proxy to access Nutanix Prism Central.",
            "x-go-name" : "ProxyURL"
          },
          "username" : {
            "type" : "string",
            "description" : "Username is the username to access the Nutanix Prism Central API.",
            "x-go-name" : "Username"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "NutanixCSIConfig" : {
        "title" : "NutanixCSIConfig contains credentials and the endpoint for the Nutanix Prism Element to which the CSI driver connects.",
        "type" : "object",
        "properties" : {
          "endpoint" : {
            "type" : "string",
            "description" : "Prism Element Endpoint to access Nutanix Prism Element for csi driver",
            "x-go-name" : "Endpoint"
          },
          "fstype" : {
            "type" : "string",
            "description" : "Optional: defaults to \"xfs\"\n+optional",
            "x-go-name" : "Fstype"
          },
          "password" : {
            "type" : "string",
            "description" : "Prism Element Password for csi driver",
            "x-go-name" : "Password"
          },
          "port" : {
            "type" : "integer",
            "description" : "Optional: Port to use when connecting to the Nutanix Prism Element endpoint (defaults to 9440)\n+optional",
            "format" : "int32",
            "x-go-name" : "Port"
          },
          "ssSegmentedIscsiNetwork" : {
            "type" : "boolean",
            "description" : "Optional: defaults to \"false\"\n+optional",
            "x-go-name" : "SsSegmentedIscsiNetwork"
          },
          "storageContainer" : {
            "type" : "string",
            "description" : "Optional: defaults to \"SelfServiceContainer\"\n+optional",
            "x-go-name" : "StorageContainer"
          },
          "username" : {
            "type" : "string",
            "description" : "Prism Element Username for csi driver",
            "x-go-name" : "Username"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "NutanixCategory" : {
        "title" : "NutanixCategory represents a Nutanix category.",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "x-go-name" : "Description"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "systemDefined" : {
            "type" : "boolean",
            "x-go-name" : "SystemDefined"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "NutanixCategoryList" : {
        "title" : "NutanixCategoryList represents an array of Nutanix categories.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/NutanixCategory"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "NutanixCategoryValue" : {
        "title" : "NutanixCategoryValue represents a Nutanix category value.",
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "x-go-name" : "Value"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "NutanixCategoryValueList" : {
        "title" : "NutanixCategoryValueList represents an array of Nutanix category values.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/NutanixCategoryValue"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "NutanixCloudSpec" : {
        "title" : "NutanixCloudSpec specifies the access data to Nutanix.",
        "type" : "object",
        "properties" : {
          "clusterName" : {
            "type" : "string",
            "description" : "ClusterName is the Nutanix cluster that this user cluster will be deployed to.",
            "x-go-name" : "ClusterName"
          },
          "credentialsReference" : {
            "$ref" : "#/components/schemas/GlobalSecretKeySelector"
          },
          "csi" : {
            "$ref" : "#/components/schemas/NutanixCSIConfig"
          },
          "password" : {
            "type" : "string",
            "x-go-name" : "Password"
          },
          "projectName" : {
            "type" : "string",
            "description" : "ProjectName is the project that this cluster is deployed into. If none is given, no project will be used.\n+optional",
            "x-go-name" : "ProjectName"
          },
          "proxyURL" : {
            "type" : "string",
            "x-go-name" : "ProxyURL"
          },
          "username" : {
            "type" : "string",
            "x-go-name" : "Username"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "NutanixCluster" : {
        "title" : "NutanixCluster represents a Nutanix cluster.",
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "NutanixClusterList" : {
        "title" : "NutanixClusterList represents an array of Nutanix clusters.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/NutanixCluster"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "NutanixNodeSpec" : {
        "type" : "object",
        "properties" : {
          "categories" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "x-go-name" : "Categories"
          },
          "cpuCores" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "CPUCores"
          },
          "cpuPassthrough" : {
            "type" : "boolean",
            "x-go-name" : "CPUPassthrough"
          },
          "cpus" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "CPUs"
          },
          "diskSize" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "DiskSize"
          },
          "imageName" : {
            "type" : "string",
            "x-go-name" : "ImageName"
          },
          "memoryMB" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "MemoryMB"
          },
          "subnetName" : {
            "type" : "string",
            "x-go-name" : "SubnetName"
          }
        },
        "description" : "NutanixNodeSpec nutanix specific node settings",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "NutanixProject" : {
        "title" : "NutanixProject represents a Nutanix project.",
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "NutanixProjectList" : {
        "title" : "NutanixProjectList represents an array of Nutanix projects.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/NutanixProject"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "NutanixSubnet" : {
        "title" : "NutanixSubnet represents a Nutanix subnet.",
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "type" : {
            "type" : "string",
            "x-go-name" : "Type"
          },
          "vlanID" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "VlanID"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "NutanixSubnetList" : {
        "title" : "NutanixSubnetList represents an array of Nutanix subnets.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/NutanixSubnet"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "OIDCSettings" : {
        "type" : "object",
        "properties" : {
          "clientID" : {
            "type" : "string",
            "x-go-name" : "ClientID"
          },
          "clientSecret" : {
            "type" : "string",
            "x-go-name" : "ClientSecret"
          },
          "extraScopes" : {
            "type" : "string",
            "x-go-name" : "ExtraScopes"
          },
          "groupsClaim" : {
            "type" : "string",
            "x-go-name" : "GroupsClaim"
          },
          "issuerURL" : {
            "type" : "string",
            "x-go-name" : "IssuerURL"
          },
          "requiredClaim" : {
            "type" : "string",
            "x-go-name" : "RequiredClaim"
          },
          "usernameClaim" : {
            "type" : "string",
            "x-go-name" : "UsernameClaim"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "OIDCSpec" : {
        "title" : "OIDCSpec contains OIDC params that can be used to access user cluster.",
        "type" : "object",
        "properties" : {
          "clientId" : {
            "type" : "string",
            "x-go-name" : "ClientID"
          },
          "clientSecret" : {
            "type" : "string",
            "x-go-name" : "ClientSecret"
          },
          "issuerUrl" : {
            "type" : "string",
            "x-go-name" : "IssuerURL"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "OPAIntegrationSettings" : {
        "title" : "OPAIntegrationSettings configures the usage of OPA (Open Policy Agent) Gatekeeper inside the user cluster.",
        "type" : "object",
        "properties" : {
          "auditResources" : {
            "$ref" : "#/components/schemas/ResourceRequirements"
          },
          "controllerResources" : {
            "$ref" : "#/components/schemas/ResourceRequirements"
          },
          "enabled" : {
            "type" : "boolean",
            "description" : "Enables OPA Gatekeeper integration.",
            "x-go-name" : "Enabled"
          },
          "experimentalEnableMutation" : {
            "type" : "boolean",
            "description" : "Optional: Enables experimental mutation in Gatekeeper.",
            "x-go-name" : "ExperimentalEnableMutation"
          },
          "webhookTimeoutSeconds" : {
            "type" : "integer",
            "description" : "The timeout in seconds that is set for the Gatekeeper validating webhook admission review calls.\nDefaults to `10` (seconds).",
            "format" : "int32",
            "x-go-name" : "WebhookTimeoutSeconds"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "ObjectMeta" : {
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Annotations that can be added to the resource",
            "x-go-name" : "Annotations"
          },
          "creationTimestamp" : {
            "type" : "string",
            "description" : "CreationTimestamp is a timestamp representing the server time when this object was created.",
            "format" : "date-time",
            "x-go-name" : "CreationTimestamp"
          },
          "deletionTimestamp" : {
            "type" : "string",
            "description" : "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
            "format" : "date-time",
            "x-go-name" : "DeletionTimestamp"
          },
          "id" : {
            "type" : "string",
            "description" : "ID unique value that identifies the resource generated by the server. Read-Only.",
            "x-go-name" : "ID"
          },
          "name" : {
            "type" : "string",
            "description" : "Name represents human readable name for the resource",
            "x-go-name" : "Name"
          }
        },
        "description" : "ObjectMeta defines the set of fields that objects returned from the API have",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "ObjectReference" : {
        "title" : "ObjectReference contains enough information to let you inspect or modify the referred object.",
        "type" : "object",
        "properties" : {
          "apiVersion" : {
            "type" : "string",
            "description" : "API version of the referent.\n+optional",
            "x-go-name" : "APIVersion"
          },
          "fieldPath" : {
            "type" : "string",
            "description" : "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.\n+optional",
            "x-go-name" : "FieldPath"
          },
          "kind" : {
            "type" : "string",
            "description" : "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
            "x-go-name" : "Kind"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional",
            "x-go-name" : "Name"
          },
          "namespace" : {
            "type" : "string",
            "description" : "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n+optional",
            "x-go-name" : "Namespace"
          },
          "resourceVersion" : {
            "type" : "string",
            "description" : "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional",
            "x-go-name" : "ResourceVersion"
          },
          "uid" : {
            "$ref" : "#/components/schemas/UID"
          }
        },
        "description" : "New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.\n1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.\n2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular\nrestrictions like, \"must refer only to types A and B\" or \"UID not honored\" or \"name must be restricted\".\nThose cannot be well described when embedded.\n3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.\n4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity\nduring interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple\nand the version of the actual struct is irrelevant.\n5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type\nwill affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.\nInstead of using this type, create a locally provided and used type that is well-focused on your reference.\nFor example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .\n+k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object\n+structType=atomic",
        "x-go-package" : "k8s.io/api/core/v1"
      },
      "ObjectReferenceResource" : {
        "title" : "ObjectReferenceResource contains basic information about referred object.",
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional",
            "x-go-name" : "Name"
          },
          "namespace" : {
            "type" : "string",
            "description" : "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n+optional",
            "x-go-name" : "Namespace"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of the referent.",
            "x-go-name" : "Type"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "OpaOptions" : {
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "x-go-name" : "Enabled"
          },
          "enforced" : {
            "type" : "boolean",
            "x-go-name" : "Enforced"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "Openstack" : {
        "type" : "object",
        "properties" : {
          "applicationCredentialID" : {
            "type" : "string",
            "x-go-name" : "ApplicationCredentialID"
          },
          "applicationCredentialSecret" : {
            "type" : "string",
            "x-go-name" : "ApplicationCredentialSecret"
          },
          "datacenter" : {
            "type" : "string",
            "x-go-name" : "Datacenter"
          },
          "domain" : {
            "type" : "string",
            "x-go-name" : "Domain"
          },
          "enabled" : {
            "type" : "boolean",
            "x-go-name" : "Enabled"
          },
          "floatingIPPool" : {
            "type" : "string",
            "x-go-name" : "FloatingIPPool"
          },
          "network" : {
            "type" : "string",
            "x-go-name" : "Network"
          },
          "password" : {
            "type" : "string",
            "x-go-name" : "Password"
          },
          "project" : {
            "type" : "string",
            "x-go-name" : "Project"
          },
          "projectID" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "routerID" : {
            "type" : "string",
            "x-go-name" : "RouterID"
          },
          "securityGroups" : {
            "type" : "string",
            "x-go-name" : "SecurityGroups"
          },
          "subnetID" : {
            "type" : "string",
            "x-go-name" : "SubnetID"
          },
          "useToken" : {
            "type" : "boolean",
            "x-go-name" : "UseToken"
          },
          "username" : {
            "type" : "string",
            "x-go-name" : "Username"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "OpenstackAvailabilityZone" : {
        "title" : "OpenstackAvailabilityZone is the object representing a openstack availability zone.",
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name is the name of the availability zone",
            "x-go-name" : "Name"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "OpenstackCloudSpec" : {
        "title" : "OpenstackCloudSpec specifies access data to an OpenStack cloud.",
        "type" : "object",
        "properties" : {
          "applicationCredentialID" : {
            "type" : "string",
            "x-go-name" : "ApplicationCredentialID"
          },
          "applicationCredentialSecret" : {
            "type" : "string",
            "x-go-name" : "ApplicationCredentialSecret"
          },
          "credentialsReference" : {
            "$ref" : "#/components/schemas/GlobalSecretKeySelector"
          },
          "domain" : {
            "type" : "string",
            "x-go-name" : "Domain"
          },
          "enableIngressHostname" : {
            "type" : "boolean",
            "description" : "Enable the `enable-ingress-hostname` cloud provider option on the Openstack CCM. Can only be used with the\nexternal CCM and might be deprecated and removed in future versions as it is considered a workaround for the PROXY\nprotocol to preserve client IPs.\n+optional",
            "x-go-name" : "EnableIngressHostname"
          },
          "floatingIPPool" : {
            "type" : "string",
            "description" : "FloatingIPPool holds the name of the public network\nThe public network is reachable from the outside world\nand should provide the pool of IP addresses to choose from.\n\nWhen specified, all worker nodes will receive a public ip from this floating ip pool\n\nNote that the network is external if the \"External\" field is set to true",
            "x-go-name" : "FloatingIPPool"
          },
          "ingressHostnameSuffix" : {
            "type" : "string",
            "description" : "Set a specific suffix for the hostnames used for the PROXY protocol workaround that is enabled by EnableIngressHostname.\nThe suffix is set to `nip.io` by default. Can only be used with the external CCM and might be deprecated and removed in\nfuture versions as it is considered a workaround only.",
            "x-go-name" : "IngressHostnameSuffix"
          },
          "ipv6SubnetID" : {
            "type" : "string",
            "description" : "IPv6SubnetID holds the ID of the subnet used for IPv6 networking.\nIf not provided, a new subnet will be created if IPv6 is enabled.\n+optional",
            "x-go-name" : "IPv6SubnetID"
          },
          "ipv6SubnetPool" : {
            "type" : "string",
            "description" : "IPv6SubnetPool holds the name of the subnet pool used for creating new IPv6 subnets.\nIf not provided, the default IPv6 subnet pool will be used.\n+optional",
            "x-go-name" : "IPv6SubnetPool"
          },
          "network" : {
            "type" : "string",
            "description" : "Network holds the name of the internal network\nWhen specified, all worker nodes will be attached to this network. If not specified, a network, subnet & router will be created\n\nNote that the network is internal if the \"External\" field is set to false",
            "x-go-name" : "Network"
          },
          "nodePortsAllowedIPRange" : {
            "type" : "string",
            "description" : "A CIDR range that will be used to allow access to the node port range in the security group to. Only applies if\nthe security group is generated by KKP and not preexisting.\nIf NodePortsAllowedIPRange nor NodePortsAllowedIPRanges is set, the node port range can be accessed from anywhere.",
            "x-go-name" : "NodePortsAllowedIPRange"
          },
          "nodePortsAllowedIPRanges" : {
            "$ref" : "#/components/schemas/NetworkRanges"
          },
          "password" : {
            "type" : "string",
            "x-go-name" : "Password"
          },
          "project" : {
            "type" : "string",
            "description" : "project, formally known as tenant.",
            "x-go-name" : "Project"
          },
          "projectID" : {
            "type" : "string",
            "description" : "project id, formally known as tenantID.",
            "x-go-name" : "ProjectID"
          },
          "routerID" : {
            "type" : "string",
            "x-go-name" : "RouterID"
          },
          "securityGroups" : {
            "type" : "string",
            "x-go-name" : "SecurityGroups"
          },
          "subnetID" : {
            "type" : "string",
            "x-go-name" : "SubnetID"
          },
          "token" : {
            "type" : "string",
            "description" : "Used internally during cluster creation",
            "x-go-name" : "Token"
          },
          "useOctavia" : {
            "type" : "boolean",
            "description" : "Whether or not to use Octavia for LoadBalancer type of Service\nimplementation instead of using Neutron-LBaaS.\nAttention:Openstack CCM use Octavia as default load balancer\nimplementation since v1.17.0\n\nTakes precedence over the 'use_octavia' flag provided at datacenter\nlevel if both are specified.\n+optional",
            "x-go-name" : "UseOctavia"
          },
          "useToken" : {
            "type" : "boolean",
            "x-go-name" : "UseToken"
          },
          "username" : {
            "type" : "string",
            "x-go-name" : "Username"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "OpenstackNetwork" : {
        "title" : "OpenstackNetwork is the object representing a openstack network.",
        "type" : "object",
        "properties" : {
          "external" : {
            "type" : "boolean",
            "description" : "External set if network is the external network",
            "x-go-name" : "External"
          },
          "id" : {
            "type" : "string",
            "description" : "Id uniquely identifies the current network",
            "x-go-name" : "ID"
          },
          "name" : {
            "type" : "string",
            "description" : "Name is the name of the network",
            "x-go-name" : "Name"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "OpenstackNodeSizeRequirements" : {
        "type" : "object",
        "properties" : {
          "minimumMemory" : {
            "type" : "integer",
            "description" : "MinimumMemory is the minimum required amount of memory, measured in MB",
            "format" : "int64",
            "x-go-name" : "MinimumMemory"
          },
          "minimumVCPUs" : {
            "type" : "integer",
            "description" : "VCPUs is the minimum required amount of (virtual) CPUs",
            "format" : "int64",
            "x-go-name" : "MinimumVCPUs"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "OpenstackNodeSpec" : {
        "required" : [ "flavor", "image" ],
        "type" : "object",
        "properties" : {
          "availabilityZone" : {
            "type" : "string",
            "description" : "if not set, the default AZ from the Datacenter spec will be used",
            "x-go-name" : "AvailabilityZone"
          },
          "diskSize" : {
            "type" : "integer",
            "description" : "if set, the rootDisk will be a volume. If not, the rootDisk will be on ephemeral storage and its size will be derived from the flavor",
            "format" : "int64",
            "x-go-name" : "RootDiskSizeGB"
          },
          "flavor" : {
            "type" : "string",
            "description" : "instance flavor",
            "x-go-name" : "Flavor"
          },
          "image" : {
            "type" : "string",
            "description" : "image to use",
            "x-go-name" : "Image"
          },
          "instanceReadyCheckPeriod" : {
            "type" : "string",
            "description" : "Period of time to check for instance ready status, i.e. 10s/1m",
            "x-go-name" : "InstanceReadyCheckPeriod"
          },
          "instanceReadyCheckTimeout" : {
            "type" : "string",
            "description" : "Max time to wait for the instance to be ready, i.e. 10s/1m",
            "x-go-name" : "InstanceReadyCheckTimeout"
          },
          "tags" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional metadata to set",
            "x-go-name" : "Tags"
          },
          "useFloatingIP" : {
            "type" : "boolean",
            "description" : "Defines whether floating ip should be used",
            "x-go-name" : "UseFloatingIP"
          }
        },
        "description" : "OpenstackNodeSpec openstack node settings",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "OpenstackSecurityGroup" : {
        "title" : "OpenstackSecurityGroup is the object representing a openstack security group.",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Id uniquely identifies the current security group",
            "x-go-name" : "ID"
          },
          "name" : {
            "type" : "string",
            "description" : "Name is the name of the security group",
            "x-go-name" : "Name"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "OpenstackSize" : {
        "title" : "OpenstackSize is the object representing openstack's sizes.",
        "type" : "object",
        "properties" : {
          "disk" : {
            "type" : "integer",
            "description" : "Disk is the amount of root disk, measured in GB",
            "format" : "int64",
            "x-go-name" : "Disk"
          },
          "isPublic" : {
            "type" : "boolean",
            "description" : "IsPublic indicates whether the size is public (available to all projects) or scoped to a set of projects",
            "x-go-name" : "IsPublic"
          },
          "memory" : {
            "type" : "integer",
            "description" : "MemoryTotalBytes is the amount of memory, measured in MB",
            "format" : "int64",
            "x-go-name" : "Memory"
          },
          "region" : {
            "type" : "string",
            "description" : "Region specifies the geographic region in which the size resides",
            "x-go-name" : "Region"
          },
          "slug" : {
            "type" : "string",
            "description" : "Slug holds  the name of the size",
            "x-go-name" : "Slug"
          },
          "swap" : {
            "type" : "integer",
            "description" : "Swap is the amount of swap space, measured in MB",
            "format" : "int64",
            "x-go-name" : "Swap"
          },
          "vcpus" : {
            "type" : "integer",
            "description" : "VCPUs indicates how many (virtual) CPUs are available for this flavor",
            "format" : "int64",
            "x-go-name" : "VCPUs"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "OpenstackSubnet" : {
        "title" : "OpenstackSubnet is the object representing a openstack subnet.",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Id uniquely identifies the subnet",
            "x-go-name" : "ID"
          },
          "ipVersion" : {
            "type" : "integer",
            "description" : "IPversion is the IP protocol version (4 or 6)",
            "format" : "int64",
            "x-go-name" : "IPVersion"
          },
          "name" : {
            "type" : "string",
            "description" : "Name is human-readable name for the subnet",
            "x-go-name" : "Name"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "OpenstackSubnetPool" : {
        "title" : "OpenstackSubnetPool is the object representing a openstack subnet pool.",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Id uniquely identifies the subnet pool",
            "x-go-name" : "ID"
          },
          "ipVersion" : {
            "type" : "integer",
            "description" : "IPversion is the IP protocol version (4 or 6)",
            "format" : "int64",
            "x-go-name" : "IPversion"
          },
          "isDefault" : {
            "type" : "boolean",
            "description" : "IsDefault indicates if the subnetpool is default pool or not",
            "x-go-name" : "IsDefault"
          },
          "name" : {
            "type" : "string",
            "description" : "Name is the name of the subnet pool",
            "x-go-name" : "Name"
          },
          "prefixes" : {
            "type" : "array",
            "description" : "Prefixes is the list of subnet prefixes",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Prefixes"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "OpenstackTenant" : {
        "title" : "OpenstackTenant is the object representing a openstack tenant.",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Id uniquely identifies the current tenant",
            "x-go-name" : "ID"
          },
          "name" : {
            "type" : "string",
            "description" : "Name is the name of the tenant",
            "x-go-name" : "Name"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "OperatingSystemProfile" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "operatingSystem" : {
            "type" : "string",
            "x-go-name" : "OperatingSystem"
          },
          "supportedCloudProviders" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "SupportedCloudProviders"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "OperatingSystemSpec" : {
        "title" : "OperatingSystemSpec represents the collection of os specific settings. Only one must be set at a time.",
        "type" : "object",
        "properties" : {
          "amzn2" : {
            "$ref" : "#/components/schemas/AmazonLinuxSpec"
          },
          "centos" : {
            "$ref" : "#/components/schemas/CentOSSpec"
          },
          "flatcar" : {
            "$ref" : "#/components/schemas/FlatcarSpec"
          },
          "rhel" : {
            "$ref" : "#/components/schemas/RHELSpec"
          },
          "rockylinux" : {
            "$ref" : "#/components/schemas/RockyLinuxSpec"
          },
          "sles" : {
            "$ref" : "#/components/schemas/SLESSpec"
          },
          "ubuntu" : {
            "$ref" : "#/components/schemas/UbuntuSpec"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "Packet" : {
        "type" : "object",
        "properties" : {
          "apiKey" : {
            "type" : "string",
            "x-go-name" : "APIKey"
          },
          "billingCycle" : {
            "type" : "string",
            "x-go-name" : "BillingCycle"
          },
          "datacenter" : {
            "type" : "string",
            "x-go-name" : "Datacenter"
          },
          "enabled" : {
            "type" : "boolean",
            "x-go-name" : "Enabled"
          },
          "projectID" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "PacketCPU" : {
        "title" : "PacketCPU represents an array of Packet CPUs. It is a part of PacketSize.",
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "Count"
          },
          "type" : {
            "type" : "string",
            "x-go-name" : "Type"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "PacketCloudSpec" : {
        "title" : "PacketCloudSpec specifies access data to a Packet cloud.",
        "type" : "object",
        "properties" : {
          "apiKey" : {
            "type" : "string",
            "x-go-name" : "APIKey"
          },
          "billingCycle" : {
            "type" : "string",
            "x-go-name" : "BillingCycle"
          },
          "credentialsReference" : {
            "$ref" : "#/components/schemas/GlobalSecretKeySelector"
          },
          "projectID" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "PacketDrive" : {
        "title" : "PacketDrive represents an array of Packet drives. It is a part of PacketSize.",
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "Count"
          },
          "size" : {
            "type" : "string",
            "x-go-name" : "Size"
          },
          "type" : {
            "type" : "string",
            "x-go-name" : "Type"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "PacketNodeSpec" : {
        "required" : [ "instanceType" ],
        "type" : "object",
        "properties" : {
          "instanceType" : {
            "type" : "string",
            "description" : "InstanceType denotes the plan to which the device will be provisioned.",
            "x-go-name" : "InstanceType"
          },
          "tags" : {
            "type" : "array",
            "description" : "additional instance tags",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Tags"
          }
        },
        "description" : "PacketNodeSpec specifies packet specific node settings",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "PacketSize" : {
        "title" : "PacketSize is the object representing Packet VM sizes.",
        "type" : "object",
        "properties" : {
          "cpus" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PacketCPU"
            },
            "x-go-name" : "CPUs"
          },
          "drives" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PacketDrive"
            },
            "x-go-name" : "Drives"
          },
          "memory" : {
            "type" : "string",
            "x-go-name" : "Memory"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "PacketSizeList" : {
        "title" : "PacketSizeList represents an array of Packet VM sizes.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/PacketSize"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "Parameters" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "object",
          "properties" : { }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "PodDNSConfig" : {
        "type" : "object",
        "properties" : {
          "nameservers" : {
            "type" : "array",
            "description" : "A list of DNS name server IP addresses.\nThis will be appended to the base nameservers generated from DNSPolicy.\nDuplicated nameservers will be removed.\n+optional",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Nameservers"
          },
          "options" : {
            "type" : "array",
            "description" : "A list of DNS resolver options.\nThis will be merged with the base options generated from DNSPolicy.\nDuplicated entries will be removed. Resolution options given in Options\nwill override those that appear in the base DNSPolicy.\n+optional",
            "items" : {
              "$ref" : "#/components/schemas/PodDNSConfigOption"
            },
            "x-go-name" : "Options"
          },
          "searches" : {
            "type" : "array",
            "description" : "A list of DNS search domains for host-name lookup.\nThis will be appended to the base search paths generated from DNSPolicy.\nDuplicated search paths will be removed.\n+optional",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Searches"
          }
        },
        "description" : "PodDNSConfig defines the DNS parameters of a pod in addition to\nthose generated from DNSPolicy.",
        "x-go-package" : "k8s.io/api/core/v1"
      },
      "PodDNSConfigOption" : {
        "title" : "PodDNSConfigOption defines DNS resolver options of a pod.",
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Required.",
            "x-go-name" : "Name"
          },
          "value" : {
            "type" : "string",
            "description" : "+optional",
            "x-go-name" : "Value"
          }
        },
        "x-go-package" : "k8s.io/api/core/v1"
      },
      "PolicyRule" : {
        "type" : "object",
        "properties" : {
          "apiGroups" : {
            "type" : "array",
            "description" : "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of\nthe enumerated resources in any API group will be allowed.\n+optional",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "APIGroups"
          },
          "nonResourceURLs" : {
            "type" : "array",
            "description" : "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path\nSince non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding.\nRules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.\n+optional",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "NonResourceURLs"
          },
          "resourceNames" : {
            "type" : "array",
            "description" : "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.\n+optional",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "ResourceNames"
          },
          "resources" : {
            "type" : "array",
            "description" : "Resources is a list of resources this rule applies to. '*' represents all resources.\n+optional",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Resources"
          },
          "verbs" : {
            "type" : "array",
            "description" : "Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this rule. '*' represents all verbs.",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Verbs"
          }
        },
        "description" : "PolicyRule holds information that describes a policy rule, but does not contain information\nabout who the rule applies to or which namespace the rule applies to.",
        "x-go-package" : "k8s.io/api/rbac/v1"
      },
      "PreAllocatedDataVolume" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "size" : {
            "type" : "string",
            "x-go-name" : "Size"
          },
          "storageClass" : {
            "type" : "string",
            "x-go-name" : "StorageClass"
          },
          "url" : {
            "type" : "string",
            "x-go-name" : "URL"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "Preset" : {
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "x-go-name" : "Enabled"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "providers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PresetProvider"
            },
            "x-go-name" : "Providers"
          }
        },
        "description" : "Preset represents a preset",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "PresetBody" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "spec" : {
            "$ref" : "#/components/schemas/PresetSpec"
          }
        },
        "description" : "PresetBody represents the body of a created preset",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "PresetBodyMetadata" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          }
        },
        "description" : "PresetBodyMetadata represents metadata within the body of a created preset",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "PresetList" : {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Preset"
            },
            "x-go-name" : "Items"
          }
        },
        "description" : "PresetList represents a list of presets",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "PresetProvider" : {
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "x-go-name" : "Enabled"
          },
          "name" : {
            "$ref" : "#/components/schemas/ProviderType"
          }
        },
        "description" : "PresetProvider represents a preset provider",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "PresetSpec" : {
        "title" : "Presets specifies default presets for supported providers.",
        "type" : "object",
        "properties" : {
          "aks" : {
            "$ref" : "#/components/schemas/AKS"
          },
          "alibaba" : {
            "$ref" : "#/components/schemas/Alibaba"
          },
          "anexia" : {
            "$ref" : "#/components/schemas/Anexia"
          },
          "aws" : {
            "$ref" : "#/components/schemas/AWS"
          },
          "azure" : {
            "$ref" : "#/components/schemas/Azure"
          },
          "digitalocean" : {
            "$ref" : "#/components/schemas/Digitalocean"
          },
          "eks" : {
            "$ref" : "#/components/schemas/EKS"
          },
          "enabled" : {
            "type" : "boolean",
            "x-go-name" : "Enabled"
          },
          "fake" : {
            "$ref" : "#/components/schemas/Fake"
          },
          "gcp" : {
            "$ref" : "#/components/schemas/GCP"
          },
          "gke" : {
            "$ref" : "#/components/schemas/GKE"
          },
          "hetzner" : {
            "$ref" : "#/components/schemas/Hetzner"
          },
          "kubevirt" : {
            "$ref" : "#/components/schemas/Kubevirt"
          },
          "nutanix" : {
            "$ref" : "#/components/schemas/Nutanix"
          },
          "openstack" : {
            "$ref" : "#/components/schemas/Openstack"
          },
          "packet" : {
            "$ref" : "#/components/schemas/Packet"
          },
          "requiredEmails" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "RequiredEmails"
          },
          "vmwareclouddirector" : {
            "$ref" : "#/components/schemas/VMwareCloudDirector"
          },
          "vsphere" : {
            "$ref" : "#/components/schemas/VSphere"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "PresetStats" : {
        "type" : "object",
        "properties" : {
          "associatedClusterTemplates" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "AssociatedClusterTemplates"
          },
          "associatedClusters" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "AssociatedClusters"
          }
        },
        "description" : "PresetStats represents a preset statistics",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "Project" : {
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Annotations that can be added to the resource",
            "x-go-name" : "Annotations"
          },
          "clustersNumber" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "ClustersNumber"
          },
          "creationTimestamp" : {
            "type" : "string",
            "description" : "CreationTimestamp is a timestamp representing the server time when this object was created.",
            "format" : "date-time",
            "x-go-name" : "CreationTimestamp"
          },
          "deletionTimestamp" : {
            "type" : "string",
            "description" : "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
            "format" : "date-time",
            "x-go-name" : "DeletionTimestamp"
          },
          "id" : {
            "type" : "string",
            "description" : "ID unique value that identifies the resource generated by the server. Read-Only.",
            "x-go-name" : "ID"
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "x-go-name" : "Labels"
          },
          "name" : {
            "type" : "string",
            "description" : "Name represents human readable name for the resource",
            "x-go-name" : "Name"
          },
          "owners" : {
            "type" : "array",
            "description" : "Owners an optional owners list for the given project",
            "items" : {
              "$ref" : "#/components/schemas/User"
            },
            "x-go-name" : "Owners"
          },
          "status" : {
            "type" : "string",
            "x-go-name" : "Status"
          }
        },
        "description" : "Project is a top-level container for a set of resources",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "ProjectGroup" : {
        "type" : "object",
        "properties" : {
          "group" : {
            "type" : "string",
            "x-go-name" : "GroupPrefix"
          },
          "id" : {
            "type" : "string",
            "x-go-name" : "ID"
          }
        },
        "description" : "ProjectGroup is a helper data structure that\nstores the information about a project and a group prefix that a user belongs to.",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "ProviderPreset" : {
        "type" : "object",
        "properties" : {
          "datacenter" : {
            "type" : "string",
            "x-go-name" : "Datacenter"
          },
          "enabled" : {
            "type" : "boolean",
            "x-go-name" : "Enabled"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "ProviderType" : {
        "type" : "string",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "ProxySettings" : {
        "type" : "object",
        "properties" : {
          "httpProxy" : {
            "$ref" : "#/components/schemas/ProxyValue"
          },
          "noProxy" : {
            "$ref" : "#/components/schemas/ProxyValue"
          }
        },
        "description" : "ProxySettings allow configuring a HTTP proxy for the controlplanes\nand nodes.",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "ProxyValue" : {
        "type" : "string",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "PublicAWSCloudSpec" : {
        "title" : "PublicAWSCloudSpec is a public counterpart of apiv1.AWSCloudSpec.",
        "type" : "object",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "PublicAlibabaCloudSpec" : {
        "title" : "PublicAlibabaCloudSpec is a public counterpart of apiv1.AlibabaCloudSpec.",
        "type" : "object",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "PublicAnexiaCloudSpec" : {
        "title" : "PublicAnexiaCloudSpec is a public counterpart of apiv1.AnexiaCloudSpec.",
        "type" : "object",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "PublicAzureCloudSpec" : {
        "title" : "PublicAzureCloudSpec is a public counterpart of apiv1.AzureCloudSpec.",
        "type" : "object",
        "properties" : {
          "assignAvailabilitySet" : {
            "type" : "boolean",
            "x-go-name" : "AssignAvailabilitySet"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "PublicBringYourOwnCloudSpec" : {
        "title" : "PublicBringYourOwnCloudSpec is a public counterpart of apiv1.BringYourOwnCloudSpec.",
        "type" : "object",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "PublicCloudSpec" : {
        "title" : "PublicCloudSpec is a public counterpart of apiv1.CloudSpec.",
        "type" : "object",
        "properties" : {
          "alibaba" : {
            "$ref" : "#/components/schemas/PublicAlibabaCloudSpec"
          },
          "anexia" : {
            "$ref" : "#/components/schemas/PublicAnexiaCloudSpec"
          },
          "aws" : {
            "$ref" : "#/components/schemas/PublicAWSCloudSpec"
          },
          "azure" : {
            "$ref" : "#/components/schemas/PublicAzureCloudSpec"
          },
          "bringyourown" : {
            "$ref" : "#/components/schemas/PublicBringYourOwnCloudSpec"
          },
          "dc" : {
            "type" : "string",
            "x-go-name" : "DatacenterName"
          },
          "digitalocean" : {
            "$ref" : "#/components/schemas/PublicDigitaloceanCloudSpec"
          },
          "fake" : {
            "$ref" : "#/components/schemas/PublicFakeCloudSpec"
          },
          "gcp" : {
            "$ref" : "#/components/schemas/PublicGCPCloudSpec"
          },
          "hetzner" : {
            "$ref" : "#/components/schemas/PublicHetznerCloudSpec"
          },
          "kubevirt" : {
            "$ref" : "#/components/schemas/PublicKubevirtCloudSpec"
          },
          "nutanix" : {
            "$ref" : "#/components/schemas/PublicNutanixCloudSpec"
          },
          "openstack" : {
            "$ref" : "#/components/schemas/PublicOpenstackCloudSpec"
          },
          "packet" : {
            "$ref" : "#/components/schemas/PublicPacketCloudSpec"
          },
          "vmwareclouddirector" : {
            "$ref" : "#/components/schemas/PublicVMwareCloudDirectorCloudSpec"
          },
          "vsphere" : {
            "$ref" : "#/components/schemas/PublicVSphereCloudSpec"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "PublicDigitaloceanCloudSpec" : {
        "title" : "PublicDigitaloceanCloudSpec is a public counterpart of apiv1.DigitaloceanCloudSpec.",
        "type" : "object",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "PublicFakeCloudSpec" : {
        "title" : "PublicFakeCloudSpec is a public counterpart of apiv1.FakeCloudSpec.",
        "type" : "object",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "PublicGCPCloudSpec" : {
        "title" : "PublicGCPCloudSpec is a public counterpart of apiv1.GCPCloudSpec.",
        "type" : "object",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "PublicHetznerCloudSpec" : {
        "title" : "PublicHetznerCloudSpec is a public counterpart of apiv1.HetznerCloudSpec.",
        "type" : "object",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "PublicKubevirtCloudSpec" : {
        "title" : "PublicKubevirtCloudSpec is a public counterpart of apiv1.KubevirtCloudSpec.",
        "type" : "object",
        "properties" : {
          "preAllocatedDataVolumes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PreAllocatedDataVolume"
            },
            "x-go-name" : "PreAllocatedDataVolumes"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "PublicNutanixCloudSpec" : {
        "title" : "PublicNutanixCloudSpec is a public counterpart of apiv1.NutanixCloudSpec.",
        "type" : "object",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "PublicOpenstackCloudSpec" : {
        "title" : "PublicOpenstackCloudSpec is a public counterpart of apiv1.OpenstackCloudSpec.",
        "type" : "object",
        "properties" : {
          "domain" : {
            "type" : "string",
            "x-go-name" : "Domain"
          },
          "floatingIPPool" : {
            "type" : "string",
            "x-go-name" : "FloatingIPPool"
          },
          "network" : {
            "type" : "string",
            "x-go-name" : "Network"
          },
          "project" : {
            "type" : "string",
            "x-go-name" : "Project"
          },
          "projectID" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "routerID" : {
            "type" : "string",
            "x-go-name" : "RouterID"
          },
          "securityGroups" : {
            "type" : "string",
            "x-go-name" : "SecurityGroups"
          },
          "subnetID" : {
            "type" : "string",
            "x-go-name" : "SubnetID"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "PublicPacketCloudSpec" : {
        "title" : "PublicPacketCloudSpec is a public counterpart of apiv1.PacketCloudSpec.",
        "type" : "object",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "PublicServiceAccountToken" : {
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Annotations that can be added to the resource",
            "x-go-name" : "Annotations"
          },
          "creationTimestamp" : {
            "type" : "string",
            "description" : "CreationTimestamp is a timestamp representing the server time when this object was created.",
            "format" : "date-time",
            "x-go-name" : "CreationTimestamp"
          },
          "deletionTimestamp" : {
            "type" : "string",
            "description" : "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
            "format" : "date-time",
            "x-go-name" : "DeletionTimestamp"
          },
          "expiry" : {
            "type" : "string",
            "description" : "Expiry is a timestamp representing the time when this token will expire.",
            "format" : "date-time",
            "x-go-name" : "Expiry"
          },
          "id" : {
            "type" : "string",
            "description" : "ID unique value that identifies the resource generated by the server. Read-Only.",
            "x-go-name" : "ID"
          },
          "invalidated" : {
            "type" : "boolean",
            "description" : "Invalidated indicates if the token must be regenerated",
            "x-go-name" : "Invalidated"
          },
          "name" : {
            "type" : "string",
            "description" : "Name represents human readable name for the resource",
            "x-go-name" : "Name"
          }
        },
        "description" : "PublicServiceAccountToken represent an API service account token without secret fields",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "PublicVMwareCloudDirectorCloudSpec" : {
        "title" : "PublicVMwareCloudDirectorCloudSpec is a public counterpart of apiv1.VMwareCloudDirectorCloudSpec.",
        "type" : "object",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "PublicVSphereCloudSpec" : {
        "title" : "PublicVSphereCloudSpec is a public counterpart of apiv1.VSphereCloudSpec.",
        "type" : "object",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "Quantity" : {
        "title" : "Quantity is a fixed-point representation of a number.\nIt provides convenient marshaling/unmarshaling in JSON and YAML,\nin addition to String() and AsInt64() accessors.",
        "type" : "object",
        "description" : "The serialization format is:\n\n<quantity>        ::= <signedNumber><suffix>\n(Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9\n<digits>          ::= <digit> | <digit><digits>\n<number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits>\n<sign>            ::= \"+\" | \"-\"\n<signedNumber>    ::= <number> | <sign><number>\n<suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI>\n<binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n\nNo matter which of the three exponent forms is used, no quantity may represent\na number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal\nplaces. Numbers larger or more precise will be capped or rounded up.\n(E.g.: 0.1m will rounded up to 1m.)\nThis may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix\nit had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\".\nThis means that Exponent/suffix will be adjusted up or down (with a\ncorresponding increase or decrease in Mantissa) such that:\na. No precision is lost\nb. No fractional digits will be emitted\nc. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n1.5 will be serialized as \"1500m\"\n1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a\nfloating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed,\nbut will be re-emitted in their canonical form. (So always use canonical\nform, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without\nwriting some sort of special handling code in the hopes that that will\ncause implementors to also use a fixed point implementation.\n\n+protobuf=true\n+protobuf.embed=string\n+protobuf.options.marshal=false\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:deepcopy-gen=true\n+k8s:openapi-gen=true",
        "x-go-package" : "k8s.io/apimachinery/pkg/api/resource"
      },
      "Quota" : {
        "type" : "object",
        "properties" : {
          "cpu" : {
            "type" : "integer",
            "description" : "CPU holds the quantity of CPU.",
            "format" : "int64",
            "x-go-name" : "CPU"
          },
          "memory" : {
            "type" : "number",
            "description" : "Memory represents the RAM amount. Denoted in GB, rounded to 2 decimal places.",
            "format" : "double",
            "x-go-name" : "Memory"
          },
          "storage" : {
            "type" : "number",
            "description" : "Storage represents the disk size. Denoted in GB, rounded to 2 decimal places.",
            "format" : "double",
            "x-go-name" : "Storage"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "RHELSpec" : {
        "type" : "object",
        "properties" : {
          "distUpgradeOnBoot" : {
            "type" : "boolean",
            "description" : "do a dist-upgrade on boot and reboot it required afterwards",
            "x-go-name" : "DistUpgradeOnBoot"
          },
          "rhelSubscriptionManagerPassword" : {
            "type" : "string",
            "x-go-name" : "RHELSubscriptionManagerPassword"
          },
          "rhelSubscriptionManagerUser" : {
            "type" : "string",
            "x-go-name" : "RHELSubscriptionManagerUser"
          },
          "rhsmOfflineToken" : {
            "type" : "string",
            "x-go-name" : "RHSMOfflineToken"
          }
        },
        "description" : "RHELSpec contains rhel specific settings",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "RawExtension" : {
        "title" : "RawExtension is used to hold extensions in external versions.",
        "type" : "object",
        "description" : "To use this, make a field which has RawExtension as its type in your external, versioned\nstruct, and Object in your internal struct. You also need to register your\nvarious plugin types.\n\nInternal package:\ntype MyAPIObject struct {\nruntime.TypeMeta `json:\",inline\"`\nMyPlugin runtime.Object `json:\"myPlugin\"`\n}\ntype PluginA struct {\nAOption string `json:\"aOption\"`\n}\n\nExternal package:\ntype MyAPIObject struct {\nruntime.TypeMeta `json:\",inline\"`\nMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n}\ntype PluginA struct {\nAOption string `json:\"aOption\"`\n}\n\nOn the wire, the JSON will look something like this:\n{\n\"kind\":\"MyAPIObject\",\n\"apiVersion\":\"v1\",\n\"myPlugin\": {\n\"kind\":\"PluginA\",\n\"aOption\":\"foo\",\n},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into\nyour external MyAPIObject. That causes the raw JSON to be stored, but not unpacked.\nThe next step is to copy (using pkg/conversion) into the internal struct. The runtime\npackage's DefaultScheme has conversion functions installed which will unpack the\nJSON stored in RawExtension, turning it into the correct object type, and storing it\nin the Object. (TODO: In the case where the object is of an unknown type, a\nruntime.Unknown object will be created and stored.)\n\n+k8s:deepcopy-gen=true\n+protobuf=true\n+k8s:openapi-gen=true",
        "x-go-package" : "k8s.io/apimachinery/pkg/runtime"
      },
      "ReadinessSpec" : {
        "type" : "object",
        "properties" : {
          "statsEnabled" : {
            "type" : "boolean",
            "description" : "enables stats for gatekeeper audit",
            "x-go-name" : "StatsEnabled"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ResourceLabelMap" : {
        "title" : "ResourceLabelMap defines list of labels grouped by specific resource types.",
        "type" : "object",
        "additionalProperties" : {
          "$ref" : "#/components/schemas/LabelKeyList"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "ResourceList" : {
        "title" : "ResourceList is a set of (resource name, quantity) pairs.",
        "type" : "object",
        "additionalProperties" : {
          "$ref" : "#/components/schemas/Quantity"
        },
        "x-go-package" : "k8s.io/api/core/v1"
      },
      "ResourceQuota" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "quota" : {
            "$ref" : "#/components/schemas/Quota"
          },
          "status" : {
            "$ref" : "#/components/schemas/ResourceQuotaStatus"
          },
          "subjectHumanReadableName" : {
            "type" : "string",
            "description" : "SubjectHumanReadableName contains the human-readable name for the subject(if applicable). Just filled as information in get/list.",
            "x-go-name" : "SubjectHumanReadableName"
          },
          "subjectKind" : {
            "type" : "string",
            "x-go-name" : "SubjectKind"
          },
          "subjectName" : {
            "type" : "string",
            "x-go-name" : "SubjectName"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ResourceQuotaStatus" : {
        "type" : "object",
        "properties" : {
          "globalUsage" : {
            "$ref" : "#/components/schemas/Quota"
          },
          "localUsage" : {
            "$ref" : "#/components/schemas/Quota"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "ResourceRequirements" : {
        "title" : "ResourceRequirements describes the compute resource requirements.",
        "type" : "object",
        "properties" : {
          "limits" : {
            "$ref" : "#/components/schemas/ResourceList"
          },
          "requests" : {
            "$ref" : "#/components/schemas/ResourceList"
          }
        },
        "x-go-package" : "k8s.io/api/core/v1"
      },
      "ResourceType" : {
        "type" : "string",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "RockyLinuxSpec" : {
        "type" : "object",
        "properties" : {
          "distUpgradeOnBoot" : {
            "type" : "boolean",
            "description" : "do a dist-upgrade on boot and reboot it required afterwards",
            "x-go-name" : "DistUpgradeOnBoot"
          }
        },
        "description" : "RockyLinuxSpec contains rocky-linux specific settings",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "Role" : {
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Annotations that can be added to the resource",
            "x-go-name" : "Annotations"
          },
          "creationTimestamp" : {
            "type" : "string",
            "description" : "CreationTimestamp is a timestamp representing the server time when this object was created.",
            "format" : "date-time",
            "x-go-name" : "CreationTimestamp"
          },
          "deletionTimestamp" : {
            "type" : "string",
            "description" : "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
            "format" : "date-time",
            "x-go-name" : "DeletionTimestamp"
          },
          "id" : {
            "type" : "string",
            "description" : "ID unique value that identifies the resource generated by the server. Read-Only.",
            "x-go-name" : "ID"
          },
          "name" : {
            "type" : "string",
            "description" : "Name represents human readable name for the resource",
            "x-go-name" : "Name"
          },
          "namespace" : {
            "type" : "string",
            "description" : "Indicates the scope of this role.",
            "x-go-name" : "Namespace"
          },
          "rules" : {
            "type" : "array",
            "description" : "Rules holds all the PolicyRules for this Role",
            "items" : {
              "$ref" : "#/components/schemas/PolicyRule"
            },
            "x-go-name" : "Rules"
          }
        },
        "description" : "Role defines RBAC role for the user cluster",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "RoleBinding" : {
        "title" : "RoleBinding references a role, but does not contain it.",
        "type" : "object",
        "properties" : {
          "namespace" : {
            "type" : "string",
            "description" : "Indicates the scope of this binding.",
            "x-go-name" : "Namespace"
          },
          "roleRefName" : {
            "type" : "string",
            "x-go-name" : "RoleRefName"
          },
          "subjects" : {
            "type" : "array",
            "description" : "Subjects holds references to the objects the role applies to.",
            "items" : {
              "$ref" : "#/components/schemas/Subject"
            },
            "x-go-name" : "Subjects"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "RoleName" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the role.",
            "x-go-name" : "Name"
          },
          "namespace" : {
            "type" : "array",
            "description" : "Indicates the scopes of this role.",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Namespace"
          }
        },
        "description" : "RoleName defines RBAC role name object for the user cluster",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "RoleUser" : {
        "type" : "object",
        "properties" : {
          "group" : {
            "type" : "string",
            "x-go-name" : "Group"
          },
          "userEmail" : {
            "type" : "string",
            "x-go-name" : "UserEmail"
          }
        },
        "description" : "RoleUser defines associated user with role",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "RuleGroup" : {
        "title" : "RuleGroup represents a rule group of recording and alerting rules.",
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "contains the RuleGroup data. Ref: https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/#rule_group",
            "items" : {
              "type" : "integer",
              "format" : "uint8"
            },
            "x-go-name" : "Data"
          },
          "isDefault" : {
            "type" : "boolean",
            "description" : "IsDefault indicates whether the ruleGroup is default",
            "x-go-name" : "IsDefault"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "type" : {
            "$ref" : "#/components/schemas/RuleGroupType"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "RuleGroupType" : {
        "type" : "string",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "S3BackupCredentials" : {
        "type" : "object",
        "properties" : {
          "accessKeyId" : {
            "type" : "string",
            "x-go-name" : "AccessKeyID"
          },
          "secretAccessKey" : {
            "type" : "string",
            "x-go-name" : "SecretAccessKey"
          }
        },
        "description" : "S3BackupCredentials contains credentials for S3 etcd backups",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "SLESSpec" : {
        "type" : "object",
        "properties" : {
          "distUpgradeOnBoot" : {
            "type" : "boolean",
            "description" : "do a dist-upgrade on boot and reboot it required afterwards",
            "x-go-name" : "DistUpgradeOnBoot"
          }
        },
        "description" : "SLESSpec contains SLES specific settings",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "SSHKey" : {
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Annotations that can be added to the resource",
            "x-go-name" : "Annotations"
          },
          "creationTimestamp" : {
            "type" : "string",
            "description" : "CreationTimestamp is a timestamp representing the server time when this object was created.",
            "format" : "date-time",
            "x-go-name" : "CreationTimestamp"
          },
          "deletionTimestamp" : {
            "type" : "string",
            "description" : "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
            "format" : "date-time",
            "x-go-name" : "DeletionTimestamp"
          },
          "id" : {
            "type" : "string",
            "description" : "ID unique value that identifies the resource generated by the server. Read-Only.",
            "x-go-name" : "ID"
          },
          "name" : {
            "type" : "string",
            "description" : "Name represents human readable name for the resource",
            "x-go-name" : "Name"
          },
          "spec" : {
            "$ref" : "#/components/schemas/SSHKeySpec"
          }
        },
        "description" : "SSHKey represents a ssh key",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "SSHKeySpec" : {
        "title" : "SSHKeySpec represents the details of a ssh key.",
        "type" : "object",
        "properties" : {
          "fingerprint" : {
            "type" : "string",
            "x-go-name" : "Fingerprint"
          },
          "publicKey" : {
            "type" : "string",
            "x-go-name" : "PublicKey"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "SecondaryDisks" : {
        "type" : "object",
        "properties" : {
          "size" : {
            "type" : "string",
            "x-go-name" : "Size"
          },
          "storageClassName" : {
            "type" : "string",
            "x-go-name" : "StorageClassName"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "SecretKeySelector" : {
        "title" : "SecretKeySelector selects a key of a Secret.",
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string",
            "description" : "The key of the secret to select from.  Must be a valid secret key.",
            "x-go-name" : "Key"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
            "x-go-name" : "Name"
          },
          "optional" : {
            "type" : "boolean",
            "description" : "Specify whether the Secret or its key must be defined\n+optional",
            "x-go-name" : "Optional"
          }
        },
        "description" : "+structType=atomic",
        "x-go-package" : "k8s.io/api/core/v1"
      },
      "SecretReference" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "name is unique within a namespace to reference a secret resource.\n+optional",
            "x-go-name" : "Name"
          },
          "namespace" : {
            "type" : "string",
            "description" : "namespace defines the space within which the secret name must be unique.\n+optional",
            "x-go-name" : "Namespace"
          }
        },
        "description" : "SecretReference represents a Secret Reference. It has enough information to retrieve secret\nin any namespace\n+structType=atomic",
        "x-go-package" : "k8s.io/api/core/v1"
      },
      "Seed" : {
        "type" : "object",
        "properties" : {
          "country" : {
            "type" : "string",
            "description" : "Optional: Country of the seed as ISO-3166 two-letter code, e.g. DE or UK.\nFor informational purposes in the Kubermatic dashboard only.",
            "x-go-name" : "Country"
          },
          "datacenters" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/Datacenter"
            },
            "description" : "Datacenters contains a map of the possible datacenters (DCs) in this seed.\nEach DC must have a globally unique identifier (i.e. names must be unique\nacross all seeds).",
            "x-go-name" : "SeedDatacenters"
          },
          "etcdBackupRestore" : {
            "$ref" : "#/components/schemas/EtcdBackupRestore"
          },
          "expose_strategy" : {
            "$ref" : "#/components/schemas/ExposeStrategy"
          },
          "kubeconfig" : {
            "$ref" : "#/components/schemas/ObjectReference"
          },
          "location" : {
            "type" : "string",
            "description" : "Optional: Detailed location of the cluster, like \"Hamburg\" or \"Datacenter 7\".\nFor informational purposes in the Kubermatic dashboard only.",
            "x-go-name" : "Location"
          },
          "mla" : {
            "$ref" : "#/components/schemas/SeedMLASettings"
          },
          "name" : {
            "type" : "string",
            "description" : "Name represents human readable name for the resource",
            "x-go-name" : "Name"
          },
          "proxy_settings" : {
            "$ref" : "#/components/schemas/ProxySettings"
          },
          "seed_dns_overwrite" : {
            "type" : "string",
            "description" : "Optional: This can be used to override the DNS name used for this seed.\nBy default the seed name is used.",
            "x-go-name" : "SeedDNSOverwrite"
          }
        },
        "description" : "Seed represents a seed object",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "SeedMLASettings" : {
        "title" : "SeedMLASettings allow configuring seed level MLA (Monitoring, Logging & Alerting) stack settings.",
        "type" : "object",
        "properties" : {
          "userClusterMLAEnabled" : {
            "type" : "boolean",
            "description" : "Optional: UserClusterMLAEnabled controls whether the user cluster MLA (Monitoring, Logging & Alerting) stack is enabled in the seed.",
            "x-go-name" : "UserClusterMLAEnabled"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "SeedNamesList" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "SeedSettings" : {
        "type" : "object",
        "properties" : {
          "metering" : {
            "$ref" : "#/components/schemas/MeteringConfiguration"
          },
          "mla" : {
            "$ref" : "#/components/schemas/MLA"
          },
          "seedDNSOverwrite" : {
            "type" : "string",
            "description" : "the Seed level seed dns overwrite",
            "x-go-name" : "SeedDNSOverwrite"
          }
        },
        "description" : "SeedSettings represents settings for a Seed cluster",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "SeedSpec" : {
        "title" : "The spec for a seed data.",
        "type" : "object",
        "properties" : {
          "country" : {
            "type" : "string",
            "description" : "Optional: Country of the seed as ISO-3166 two-letter code, e.g. DE or UK.\nFor informational purposes in the Kubermatic dashboard only.",
            "x-go-name" : "Country"
          },
          "datacenters" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/Datacenter"
            },
            "description" : "Datacenters contains a map of the possible datacenters (DCs) in this seed.\nEach DC must have a globally unique identifier (i.e. names must be unique\nacross all seeds).",
            "x-go-name" : "SeedDatacenters"
          },
          "etcdBackupRestore" : {
            "$ref" : "#/components/schemas/EtcdBackupRestore"
          },
          "expose_strategy" : {
            "$ref" : "#/components/schemas/ExposeStrategy"
          },
          "kubeconfig" : {
            "$ref" : "#/components/schemas/ObjectReference"
          },
          "location" : {
            "type" : "string",
            "description" : "Optional: Detailed location of the cluster, like \"Hamburg\" or \"Datacenter 7\".\nFor informational purposes in the Kubermatic dashboard only.",
            "x-go-name" : "Location"
          },
          "mla" : {
            "$ref" : "#/components/schemas/SeedMLASettings"
          },
          "proxy_settings" : {
            "$ref" : "#/components/schemas/ProxySettings"
          },
          "seed_dns_overwrite" : {
            "type" : "string",
            "description" : "Optional: This can be used to override the DNS name used for this seed.\nBy default the seed name is used.",
            "x-go-name" : "SeedDNSOverwrite"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "Semver" : {
        "title" : "Semver is a type that encapsulates github.com/Masterminds/semver/v3.Version struct so it can be used in our API.",
        "type" : "string",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/semver"
      },
      "ServiceAccount" : {
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Annotations that can be added to the resource",
            "x-go-name" : "Annotations"
          },
          "creationTimestamp" : {
            "type" : "string",
            "description" : "CreationTimestamp is a timestamp representing the server time when this object was created.",
            "format" : "date-time",
            "x-go-name" : "CreationTimestamp"
          },
          "deletionTimestamp" : {
            "type" : "string",
            "description" : "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
            "format" : "date-time",
            "x-go-name" : "DeletionTimestamp"
          },
          "group" : {
            "type" : "string",
            "description" : "Group that a service account belongs to",
            "x-go-name" : "Group"
          },
          "id" : {
            "type" : "string",
            "description" : "ID unique value that identifies the resource generated by the server. Read-Only.",
            "x-go-name" : "ID"
          },
          "name" : {
            "type" : "string",
            "description" : "Name represents human readable name for the resource",
            "x-go-name" : "Name"
          },
          "status" : {
            "type" : "string",
            "description" : "Status describes three stages of ServiceAccount life including Active, Inactive and Terminating",
            "x-go-name" : "Status"
          }
        },
        "description" : "ServiceAccount represent an API service account",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "ServiceAccountSettings" : {
        "type" : "object",
        "properties" : {
          "apiAudiences" : {
            "type" : "array",
            "description" : "APIAudiences are the Identifiers of the API\nIf this is not specified, it will be set to a single element list containing the issuer URL",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "APIAudiences"
          },
          "issuer" : {
            "type" : "string",
            "description" : "Issuer is the identifier of the service account token issuer\nIf this is not specified, it will be set to the URL of apiserver by default",
            "x-go-name" : "Issuer"
          },
          "tokenVolumeProjectionEnabled" : {
            "type" : "boolean",
            "x-go-name" : "TokenVolumeProjectionEnabled"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "ServiceAccountToken" : {
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Annotations that can be added to the resource",
            "x-go-name" : "Annotations"
          },
          "creationTimestamp" : {
            "type" : "string",
            "description" : "CreationTimestamp is a timestamp representing the server time when this object was created.",
            "format" : "date-time",
            "x-go-name" : "CreationTimestamp"
          },
          "deletionTimestamp" : {
            "type" : "string",
            "description" : "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
            "format" : "date-time",
            "x-go-name" : "DeletionTimestamp"
          },
          "expiry" : {
            "type" : "string",
            "description" : "Expiry is a timestamp representing the time when this token will expire.",
            "format" : "date-time",
            "x-go-name" : "Expiry"
          },
          "id" : {
            "type" : "string",
            "description" : "ID unique value that identifies the resource generated by the server. Read-Only.",
            "x-go-name" : "ID"
          },
          "invalidated" : {
            "type" : "boolean",
            "description" : "Invalidated indicates if the token must be regenerated",
            "x-go-name" : "Invalidated"
          },
          "name" : {
            "type" : "string",
            "description" : "Name represents human readable name for the resource",
            "x-go-name" : "Name"
          },
          "token" : {
            "type" : "string",
            "description" : "Token the JWT token",
            "x-go-name" : "Token"
          }
        },
        "description" : "ServiceAccountToken represent an API service account token",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "SettingSpec" : {
        "type" : "object",
        "properties" : {
          "cleanupOptions" : {
            "$ref" : "#/components/schemas/CleanupOptions"
          },
          "customLinks" : {
            "$ref" : "#/components/schemas/CustomLinks"
          },
          "defaultNodeCount" : {
            "type" : "integer",
            "format" : "int8",
            "x-go-name" : "DefaultNodeCount"
          },
          "displayAPIDocs" : {
            "type" : "boolean",
            "x-go-name" : "DisplayAPIDocs"
          },
          "displayDemoInfo" : {
            "type" : "boolean",
            "x-go-name" : "DisplayDemoInfo"
          },
          "displayTermsOfService" : {
            "type" : "boolean",
            "x-go-name" : "DisplayTermsOfService"
          },
          "enableDashboard" : {
            "type" : "boolean",
            "x-go-name" : "EnableDashboard"
          },
          "enableExternalClusterImport" : {
            "type" : "boolean",
            "x-go-name" : "EnableExternalClusterImport"
          },
          "enableOIDCKubeconfig" : {
            "type" : "boolean",
            "x-go-name" : "EnableOIDCKubeconfig"
          },
          "machineDeploymentVMResourceQuota" : {
            "$ref" : "#/components/schemas/MachineDeploymentVMResourceQuota"
          },
          "mlaAlertmanagerPrefix" : {
            "type" : "string",
            "x-go-name" : "MlaAlertmanagerPrefix"
          },
          "mlaGrafanaPrefix" : {
            "type" : "string",
            "x-go-name" : "MlaGrafanaPrefix"
          },
          "mlaOptions" : {
            "$ref" : "#/components/schemas/MlaOptions"
          },
          "opaOptions" : {
            "$ref" : "#/components/schemas/OpaOptions"
          },
          "restrictProjectCreation" : {
            "type" : "boolean",
            "x-go-name" : "RestrictProjectCreation"
          },
          "userProjectsLimit" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "UserProjectsLimit"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "StorageClass" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          }
        },
        "description" : "StorageClass represents a Kubernetes StorageClass",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "StorageClassList" : {
        "title" : "StorageClassList represents a list of Kubernetes StorageClass.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/StorageClass"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "Subject" : {
        "title" : "Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference,",
        "type" : "object",
        "properties" : {
          "apiGroup" : {
            "type" : "string",
            "description" : "APIGroup holds the API group of the referenced subject.\nDefaults to \"\" for ServiceAccount subjects.\nDefaults to \"rbac.authorization.k8s.io\" for User and Group subjects.\n+optional",
            "x-go-name" : "APIGroup"
          },
          "kind" : {
            "type" : "string",
            "description" : "Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\".\nIf the Authorizer does not recognized the kind value, the Authorizer should report an error.",
            "x-go-name" : "Kind"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the object being referenced.",
            "x-go-name" : "Name"
          },
          "namespace" : {
            "type" : "string",
            "description" : "Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty\nthe Authorizer should report an error.\n+optional",
            "x-go-name" : "Namespace"
          }
        },
        "description" : "or a value for non-objects such as user and group names.\n+structType=atomic",
        "x-go-package" : "k8s.io/api/rbac/v1"
      },
      "SubnetCIDR" : {
        "title" : "+kubebuilder:validation:Pattern=\"((^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))/([0-9]|[1-2][0-9]|3[0-2])$)|(^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/([0-9]|[0-9][0-9]|1[0-1][0-9]|12[0-8])$))\"",
        "type" : "string",
        "description" : "SubnetCIDR is used to store IPv4/IPv6 CIDR.",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "Sync" : {
        "type" : "object",
        "properties" : {
          "syncOnly" : {
            "type" : "array",
            "description" : "If non-empty, entries on this list will be replicated into OPA",
            "items" : {
              "$ref" : "#/components/schemas/GVK"
            },
            "x-go-name" : "SyncOnly"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "TaintSpec" : {
        "title" : "TaintSpec defines a node taint.",
        "type" : "object",
        "properties" : {
          "effect" : {
            "type" : "string",
            "x-go-name" : "Effect"
          },
          "key" : {
            "type" : "string",
            "x-go-name" : "Key"
          },
          "value" : {
            "type" : "string",
            "x-go-name" : "Value"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "Target" : {
        "type" : "object",
        "properties" : {
          "libs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Libs"
          },
          "rego" : {
            "type" : "string",
            "x-go-name" : "Rego"
          },
          "target" : {
            "type" : "string",
            "x-go-name" : "Target"
          }
        },
        "x-go-package" : "github.com/open-policy-agent/frameworks/constraint/pkg/apis/templates/v1"
      },
      "TemplateMethod" : {
        "type" : "string",
        "description" : "+kubebuilder:validation:Enum=helm",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/apps.kubermatic/v1"
      },
      "Time" : {
        "title" : "A Time represents an instant in time with nanosecond precision.",
        "type" : "string",
        "description" : "Programs using times should typically store and pass them as values,\nnot pointers. That is, time variables and struct fields should be of\ntype time.Time, not *time.Time.\n\nA Time value can be used by multiple goroutines simultaneously except\nthat the methods GobDecode, UnmarshalBinary, UnmarshalJSON and\nUnmarshalText are not concurrency-safe.\n\nTime instants can be compared using the Before, After, and Equal methods.\nThe Sub method subtracts two instants, producing a Duration.\nThe Add method adds a Time and a Duration, producing a Time.\n\nThe zero value of type Time is January 1, year 1, 00:00:00.000000000 UTC.\nAs this time is unlikely to come up in practice, the IsZero method gives\na simple way of detecting a time that has not been initialized explicitly.\n\nEach Time has associated with it a Location, consulted when computing the\npresentation form of the time, such as in the Format, Hour, and Year methods.\nThe methods Local, UTC, and In return a Time with a specific location.\nChanging the location in this way changes only the presentation; it does not\nchange the instant in time being denoted and therefore does not affect the\ncomputations described in earlier paragraphs.\n\nRepresentations of a Time value saved by the GobEncode, MarshalBinary,\nMarshalJSON, and MarshalText methods store the Time.Location's offset, but not\nthe location name. They therefore lose information about Daylight Saving Time.\n\nIn addition to the required “wall clock” reading, a Time may contain an optional\nreading of the current process's monotonic clock, to provide additional precision\nfor comparison or subtraction.\nSee the “Monotonic Clocks” section in the package documentation for details.\n\nNote that the Go == operator compares not just the time instant but also the\nLocation and the monotonic clock reading. Therefore, Time values should not\nbe used as map or database keys without first guaranteeing that the\nidentical Location has been set for all values, which can be achieved\nthrough use of the UTC or Local method, and that the monotonic clock reading\nhas been stripped by setting t = t.Round(0). In general, prefer t.Equal(u)\nto t == u, since t.Equal uses the most accurate comparison available and\ncorrectly handles the case when only one of its arguments has a monotonic\nclock reading.",
        "format" : "date-time",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "Trace" : {
        "type" : "object",
        "properties" : {
          "dump" : {
            "type" : "string",
            "description" : "Also dump the state of OPA with the trace. Set to `All` to dump everything.",
            "x-go-name" : "Dump"
          },
          "kind" : {
            "$ref" : "#/components/schemas/GVK"
          },
          "user" : {
            "type" : "string",
            "description" : "Only trace requests from the specified user",
            "x-go-name" : "User"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "UID" : {
        "type" : "string",
        "description" : "UID is a type that holds unique ID values, including UUIDs.  Because we\ndon't ONLY use UUIDs, this is an alias to string.  Being a type captures\nintent and helps make sure that UIDs and names do not get conflated.",
        "x-go-package" : "k8s.io/apimachinery/pkg/types"
      },
      "UbuntuSpec" : {
        "type" : "object",
        "properties" : {
          "distUpgradeOnBoot" : {
            "type" : "boolean",
            "description" : "do a dist-upgrade on boot and reboot it required afterwards",
            "x-go-name" : "DistUpgradeOnBoot"
          }
        },
        "description" : "UbuntuSpec ubuntu specific settings",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "UpdateWindow" : {
        "title" : "UpdateWindow allows defining windows for maintenance tasks related to OS updates.",
        "type" : "object",
        "properties" : {
          "length" : {
            "type" : "string",
            "description" : "Sets the length of the update window beginning with the start time. This needs to be a valid duration\nas parsed by Go's time.ParseDuration (https://pkg.go.dev/time#ParseDuration), e.g. `2h`.",
            "x-go-name" : "Length"
          },
          "start" : {
            "type" : "string",
            "description" : "Sets the start time of the update window. This can be a time of day in 24h format, e.g. `22:30`,\nor a day of week plus a time of day, for example `Mon 21:00`. Only short names for week days are supported,\ni.e. `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat` and `Sun`.",
            "x-go-name" : "Start"
          }
        },
        "description" : "This is only applied to cluster nodes using Flatcar Linux.\nThe reference time for this is the node system time and might differ from\nthe user's timezone, which needs to be considered when configuring a window.",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "User" : {
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Annotations that can be added to the resource",
            "x-go-name" : "Annotations"
          },
          "creationTimestamp" : {
            "type" : "string",
            "description" : "CreationTimestamp is a timestamp representing the server time when this object was created.",
            "format" : "date-time",
            "x-go-name" : "CreationTimestamp"
          },
          "deletionTimestamp" : {
            "type" : "string",
            "description" : "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
            "format" : "date-time",
            "x-go-name" : "DeletionTimestamp"
          },
          "email" : {
            "type" : "string",
            "description" : "Email an email address of the user",
            "x-go-name" : "Email"
          },
          "groups" : {
            "type" : "array",
            "description" : "Groups holds the list of groups that the user belongs to",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Groups"
          },
          "id" : {
            "type" : "string",
            "description" : "ID unique value that identifies the resource generated by the server. Read-Only.",
            "x-go-name" : "ID"
          },
          "isAdmin" : {
            "type" : "boolean",
            "description" : "IsAdmin indicates admin role",
            "x-go-name" : "IsAdmin"
          },
          "lastSeen" : {
            "$ref" : "#/components/schemas/Time"
          },
          "name" : {
            "type" : "string",
            "description" : "Name represents human readable name for the resource",
            "x-go-name" : "Name"
          },
          "projects" : {
            "type" : "array",
            "description" : "Projects holds the list of project the user belongs to\nalong with the group names",
            "items" : {
              "$ref" : "#/components/schemas/ProjectGroup"
            },
            "x-go-name" : "Projects"
          },
          "userSettings" : {
            "$ref" : "#/components/schemas/UserSettings"
          }
        },
        "description" : "User represent an API user",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "UserSettings" : {
        "title" : "UserSettings represent an user settings.",
        "type" : "object",
        "properties" : {
          "collapseSidenav" : {
            "type" : "boolean",
            "x-go-name" : "CollapseSidenav"
          },
          "displayAllProjectsForAdmin" : {
            "type" : "boolean",
            "x-go-name" : "DisplayAllProjectsForAdmin"
          },
          "itemsPerPage" : {
            "type" : "integer",
            "format" : "int8",
            "x-go-name" : "ItemsPerPage"
          },
          "lastSeenChangelogVersion" : {
            "type" : "string",
            "x-go-name" : "LastSeenChangelogVersion"
          },
          "selectProjectTableView" : {
            "type" : "boolean",
            "x-go-name" : "SelectProjectTableView"
          },
          "selectedProjectID" : {
            "type" : "string",
            "x-go-name" : "SelectedProjectID"
          },
          "selectedTheme" : {
            "type" : "string",
            "x-go-name" : "SelectedTheme"
          },
          "useClustersView" : {
            "type" : "boolean",
            "x-go-name" : "UseClustersView"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "VMwareCloudDirector" : {
        "type" : "object",
        "properties" : {
          "datacenter" : {
            "type" : "string",
            "x-go-name" : "Datacenter"
          },
          "enabled" : {
            "type" : "boolean",
            "x-go-name" : "Enabled"
          },
          "organization" : {
            "type" : "string",
            "x-go-name" : "Organization"
          },
          "ovdcNetwork" : {
            "type" : "string",
            "x-go-name" : "OVDCNetwork"
          },
          "password" : {
            "type" : "string",
            "x-go-name" : "Password"
          },
          "username" : {
            "type" : "string",
            "x-go-name" : "Username"
          },
          "vdc" : {
            "type" : "string",
            "x-go-name" : "VDC"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "VMwareCloudDirectorCSIConfig" : {
        "type" : "object",
        "properties" : {
          "filesystem" : {
            "type" : "string",
            "description" : "Filesystem to use for named disks, defaults to \"ext4\"\n+optional",
            "x-go-name" : "Filesystem"
          },
          "storageProfile" : {
            "type" : "string",
            "description" : "The name of the storage profile to use for disks created by CSI driver",
            "x-go-name" : "StorageProfile"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "VMwareCloudDirectorCatalog" : {
        "title" : "VMwareCloudDirectorCatalog represents a VMware Cloud Director catalog.",
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "VMwareCloudDirectorCatalogList" : {
        "title" : "VMwareCloudDirectorCatalogList represents an array of VMware Cloud Director catalogs.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/VMwareCloudDirectorCatalog"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "VMwareCloudDirectorCloudSpec" : {
        "title" : "VMwareCloudDirectorCloudSpec specifies access data to VMware Cloud Director cloud.",
        "type" : "object",
        "properties" : {
          "credentialsReference" : {
            "$ref" : "#/components/schemas/GlobalSecretKeySelector"
          },
          "csi" : {
            "$ref" : "#/components/schemas/VMwareCloudDirectorCSIConfig"
          },
          "organization" : {
            "type" : "string",
            "description" : "Organization is the name of organization to use.\n+optional",
            "x-go-name" : "Organization"
          },
          "ovdcNetwork" : {
            "type" : "string",
            "description" : "Network is the name of organizational virtual data center network that will be associated with the VMs and vApp.",
            "x-go-name" : "OVDCNetwork"
          },
          "password" : {
            "type" : "string",
            "description" : "Password is the VMware Cloud Director user password.\n+optional",
            "x-go-name" : "Password"
          },
          "username" : {
            "type" : "string",
            "description" : "Username is the VMware Cloud Director user name.\n+optional",
            "x-go-name" : "Username"
          },
          "vapp" : {
            "type" : "string",
            "description" : "VApp used for isolation of VMs and their associated network\n+optional",
            "x-go-name" : "VApp"
          },
          "vdc" : {
            "type" : "string",
            "description" : "VDC is the organizational virtual data center.\n+optional",
            "x-go-name" : "VDC"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "VMwareCloudDirectorNetwork" : {
        "title" : "VMwareCloudDirectorNetwork represents a VMware Cloud Director network.",
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "VMwareCloudDirectorNetworkList" : {
        "title" : "VMwareCloudDirectorNetworkList represents an array of VMware Cloud Director networks.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/VMwareCloudDirectorNetwork"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "VMwareCloudDirectorNodeSpec" : {
        "type" : "object",
        "properties" : {
          "catalog" : {
            "type" : "string",
            "x-go-name" : "Catalog"
          },
          "cpuCores" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "CPUCores"
          },
          "cpus" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "CPUs"
          },
          "diskIOPS" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "DiskIOPS"
          },
          "diskSizeGB" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "DiskSizeGB"
          },
          "ipAllocationMode" : {
            "$ref" : "#/components/schemas/IPAllocationMode"
          },
          "memoryMB" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "MemoryMB"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional metadata to set",
            "x-go-name" : "Metadata"
          },
          "network" : {
            "type" : "string",
            "x-go-name" : "Network"
          },
          "storageProfile" : {
            "type" : "string",
            "x-go-name" : "StorageProfile"
          },
          "template" : {
            "type" : "string",
            "x-go-name" : "Template"
          },
          "vapp" : {
            "type" : "string",
            "x-go-name" : "VApp"
          }
        },
        "description" : "VMwareCloudDirectorNodeSpec VMware Cloud Director node settings",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "VMwareCloudDirectorStorageProfile" : {
        "title" : "VMwareCloudDirectorStorageProfile represents a VMware Cloud Director storage profile.",
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "VMwareCloudDirectorStorageProfileList" : {
        "title" : "VMwareCloudDirectorStorageProfileList represents an array of VMware Cloud Director storage profiles.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/VMwareCloudDirectorStorageProfile"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "VMwareCloudDirectorTemplate" : {
        "title" : "VMwareCloudDirectorTemplate represents a VMware Cloud Director template.",
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "VMwareCloudDirectorTemplateList" : {
        "title" : "VMwareCloudDirectorTemplateList represents an array of VMware Cloud Director templates.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/VMwareCloudDirectorTemplate"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "VSphere" : {
        "type" : "object",
        "properties" : {
          "datacenter" : {
            "type" : "string",
            "x-go-name" : "Datacenter"
          },
          "datastore" : {
            "type" : "string",
            "x-go-name" : "Datastore"
          },
          "datastoreCluster" : {
            "type" : "string",
            "x-go-name" : "DatastoreCluster"
          },
          "enabled" : {
            "type" : "boolean",
            "x-go-name" : "Enabled"
          },
          "password" : {
            "type" : "string",
            "x-go-name" : "Password"
          },
          "resourcePool" : {
            "type" : "string",
            "x-go-name" : "ResourcePool"
          },
          "username" : {
            "type" : "string",
            "x-go-name" : "Username"
          },
          "vmNetName" : {
            "type" : "string",
            "x-go-name" : "VMNetName"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "VSphereCloudSpec" : {
        "title" : "VSphereCloudSpec specifies access data to VSphere cloud.",
        "type" : "object",
        "properties" : {
          "credentialsReference" : {
            "$ref" : "#/components/schemas/GlobalSecretKeySelector"
          },
          "datastore" : {
            "type" : "string",
            "description" : "Datastore to be used for storing virtual machines and as a default for\ndynamic volume provisioning, it is mutually exclusive with\nDatastoreCluster.\n+optional",
            "x-go-name" : "Datastore"
          },
          "datastoreCluster" : {
            "type" : "string",
            "description" : "DatastoreCluster to be used for storing virtual machines, it is mutually\nexclusive with Datastore.\n+optional",
            "x-go-name" : "DatastoreCluster"
          },
          "folder" : {
            "type" : "string",
            "description" : "Folder is the folder to be used to group the provisioned virtual\nmachines.\n+optional",
            "x-go-name" : "Folder"
          },
          "infraManagementUser" : {
            "$ref" : "#/components/schemas/VSphereCredentials"
          },
          "password" : {
            "type" : "string",
            "description" : "Password is the vSphere user password.\n+optional",
            "x-go-name" : "Password"
          },
          "resourcePool" : {
            "type" : "string",
            "description" : "ResourcePool is used to manage resources such as cpu and memory for vSphere virtual machines. The resource pool\nshould be defined on vSphere cluster level.\n+optional",
            "x-go-name" : "ResourcePool"
          },
          "storagePolicy" : {
            "type" : "string",
            "description" : "StoragePolicy to be used for storage provisioning",
            "x-go-name" : "StoragePolicy"
          },
          "tagCategoryID" : {
            "type" : "string",
            "description" : "This is category for the machine deployment tags",
            "x-go-name" : "TagCategoryID"
          },
          "username" : {
            "type" : "string",
            "description" : "Username is the vSphere user name.\n+optional",
            "x-go-name" : "Username"
          },
          "vmNetName" : {
            "type" : "string",
            "description" : "VMNetName is the name of the vSphere network.",
            "x-go-name" : "VMNetName"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "VSphereCredentials" : {
        "title" : "VSphereCredentials credentials represents a credential for accessing vSphere.",
        "type" : "object",
        "properties" : {
          "password" : {
            "type" : "string",
            "x-go-name" : "Password"
          },
          "username" : {
            "type" : "string",
            "x-go-name" : "Username"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/kubermatic/v1"
      },
      "VSphereDatastoreList" : {
        "title" : "VSphereDatastoreList is the object representing a vsphere datastores.",
        "type" : "object",
        "properties" : {
          "datastores" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Datastores"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "VSphereFolder" : {
        "title" : "VSphereFolder is the object representing a vsphere folder.",
        "type" : "object",
        "properties" : {
          "path" : {
            "type" : "string",
            "description" : "Path is the path of the folder",
            "x-go-name" : "Path"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "VSphereNetwork" : {
        "title" : "VSphereNetwork is the object representing a vsphere network.",
        "type" : "object",
        "properties" : {
          "absolutePath" : {
            "type" : "string",
            "description" : "AbsolutePath is the absolute path inside vCenter",
            "x-go-name" : "AbsolutePath"
          },
          "name" : {
            "type" : "string",
            "description" : "Name is the name of the network",
            "x-go-name" : "Name"
          },
          "relativePath" : {
            "type" : "string",
            "description" : "RelativePath is the relative path inside the datacenter",
            "x-go-name" : "RelativePath"
          },
          "type" : {
            "type" : "string",
            "description" : "Type defines the type of network",
            "x-go-name" : "Type"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "VSphereNodeSpec" : {
        "type" : "object",
        "properties" : {
          "cpus" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "CPUs"
          },
          "diskSizeGB" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "DiskSizeGB"
          },
          "memory" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "Memory"
          },
          "tags" : {
            "type" : "array",
            "description" : "Additional metadata to set",
            "items" : {
              "$ref" : "#/components/schemas/VSphereTag"
            },
            "x-go-name" : "Tags"
          },
          "template" : {
            "type" : "string",
            "x-go-name" : "Template"
          }
        },
        "description" : "VSphereNodeSpec VSphere node settings",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "VSphereTag" : {
        "title" : "VSphereTag represents vsphere tag.",
        "type" : "object",
        "properties" : {
          "categoryID" : {
            "type" : "string",
            "description" : "CategoryID when empty the default category will be used.",
            "x-go-name" : "CategoryID"
          },
          "description" : {
            "type" : "string",
            "x-go-name" : "Description"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "Validation" : {
        "type" : "object",
        "properties" : {
          "legacySchema" : {
            "type" : "boolean",
            "description" : "+kubebuilder:default=false",
            "x-go-name" : "LegacySchema"
          },
          "openAPIV3Schema" : {
            "$ref" : "#/components/schemas/JSONSchemaProps"
          }
        },
        "x-go-package" : "github.com/open-policy-agent/frameworks/constraint/pkg/apis/templates/v1"
      },
      "ValidationRule" : {
        "title" : "ValidationRule describes a validation rule written in the CEL expression language.",
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "Message represents the message displayed when validation fails. The message is required if the Rule contains\nline breaks. The message must not contain line breaks.\nIf unset, the message is \"failed rule: {Rule}\".\ne.g. \"must be a URL with the host matching spec.host\"",
            "x-go-name" : "Message"
          },
          "rule" : {
            "type" : "string",
            "description" : "Rule represents the expression which will be evaluated by CEL.\nref: https://github.com/google/cel-spec\nThe Rule is scoped to the location of the x-kubernetes-validations extension in the schema.\nThe `self` variable in the CEL expression is bound to the scoped value.",
            "x-go-name" : "Rule"
          }
        },
        "x-go-package" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
      },
      "ValidationRules" : {
        "title" : "ValidationRules describes a list of validation rules written in the CEL expression language.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/ValidationRule"
        },
        "x-go-package" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
      },
      "Version" : {
        "type" : "object",
        "description" : "Version wraps semverlib.Version. It is needed because kubebuilder does not accept structs with non-tagged fields, even if they have custom marshallers\nWith this the CRD resource will have Version as string but operator code can work directly with the semverlib.Version struct\n(taken from https://github.com/kubernetes-sigs/controller-tools/blob/master/pkg/crd/testdata/cronjob_types.go#L283)",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/apis/apps.kubermatic/v1"
      },
      "VersionList" : {
        "type" : "array",
        "description" : "VersionList represents a list of versions",
        "items" : {
          "$ref" : "#/components/schemas/MasterVersion"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v1"
      },
      "Violation" : {
        "title" : "Violation represents a gatekeeper constraint violation.",
        "type" : "object",
        "properties" : {
          "enforcementAction" : {
            "type" : "string",
            "x-go-name" : "EnforcementAction"
          },
          "kind" : {
            "type" : "string",
            "x-go-name" : "Kind"
          },
          "message" : {
            "type" : "string",
            "x-go-name" : "Message"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "namespace" : {
            "type" : "string",
            "x-go-name" : "Namespace"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "VirtualMachineInstancePreset" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "namespace" : {
            "type" : "string",
            "x-go-name" : "Namespace"
          },
          "spec" : {
            "type" : "string",
            "description" : "Spec contains the kubevirtv1.VirtualMachineInstancePreset.Spec object marshalled",
            "x-go-name" : "Spec"
          }
        },
        "description" : "VirtualMachineInstancePreset represents a KubeVirt Virtual Machine Instance Preset",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "VirtualMachineInstancePresetList" : {
        "title" : "VirtualMachineInstancePresetList represents a list of VirtualMachineInstancePreset.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/VirtualMachineInstancePreset"
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "VpcConfigRequest" : {
        "type" : "object",
        "properties" : {
          "securityGroupIds" : {
            "type" : "array",
            "description" : "Specify one or more security groups for the cross-account elastic network\ninterfaces that Amazon EKS creates to use to allow communication between\nyour nodes and the Kubernetes control plane.\nFor more information, see Amazon EKS security group considerations (https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html)\nin the Amazon EKS User Guide .",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "SecurityGroupIds"
          },
          "subnetIds" : {
            "type" : "array",
            "description" : "Specify subnets for your Amazon EKS nodes. Amazon EKS creates cross-account\nelastic network interfaces in these subnets to allow communication between\nyour nodes and the Kubernetes control plane.",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "SubnetIds"
          },
          "vpcId" : {
            "type" : "string",
            "description" : "The VPC associated with your cluster.",
            "x-go-name" : "VpcId"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/api/v2"
      },
      "bcBody" : {
        "type" : "object",
        "properties" : {
          "backup_credentials" : {
            "$ref" : "#/components/schemas/BackupCredentials"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/handler/v2/backupcredentials"
      },
      "body" : {
        "type" : "object",
        "properties" : {
          "cloud" : {
            "$ref" : "#/components/schemas/ExternalClusterCloudSpec"
          },
          "kubeconfig" : {
            "type" : "string",
            "description" : "Kubeconfig Base64 encoded kubeconfig",
            "x-go-name" : "Kubeconfig"
          },
          "name" : {
            "type" : "string",
            "description" : "Name is human readable name for the external cluster",
            "x-go-name" : "Name"
          },
          "spec" : {
            "$ref" : "#/components/schemas/ExternalClusterSpec"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/handler/v2/external_cluster"
      },
      "constraintBody" : {
        "type" : "object",
        "properties" : {
          "Spec" : {
            "$ref" : "#/components/schemas/ConstraintSpec"
          },
          "name" : {
            "type" : "string",
            "description" : "Name is the name for the constraint",
            "x-go-name" : "Name"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/handler/v2/constraint"
      },
      "ctBody" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the constraint template",
            "x-go-name" : "Name"
          },
          "spec" : {
            "$ref" : "#/components/schemas/ConstraintTemplateSpec"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/handler/v2/constraint_template"
      },
      "ebcBody" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the etcd backup config",
            "x-go-name" : "Name"
          },
          "spec" : {
            "$ref" : "#/components/schemas/EtcdBackupConfigSpec"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/handler/v2/etcdbackupconfig"
      },
      "erBody" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the etcd backup restore. If not set, it will be generated",
            "x-go-name" : "Name"
          },
          "spec" : {
            "$ref" : "#/components/schemas/EtcdRestoreSpec"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/handler/v2/etcdrestore"
      },
      "errorResponse" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "$ref" : "#/components/schemas/ErrorDetails"
          }
        },
        "description" : "ErrorResponse is the default representation of an error",
        "x-go-name" : "ErrorResponse",
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/handler"
      },
      "groupProjectBindingBody" : {
        "type" : "object",
        "properties" : {
          "group" : {
            "type" : "string",
            "x-go-name" : "Group"
          },
          "role" : {
            "type" : "string",
            "x-go-name" : "Role"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/ee/group-project-binding/handler"
      },
      "wrBody" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the allowed registry",
            "x-go-name" : "Name"
          },
          "spec" : {
            "$ref" : "#/components/schemas/AllowedRegistrySpec"
          }
        },
        "x-go-package" : "k8c.io/kubermatic/v2/pkg/handler/v2/allowed_registry"
      },
      "reports_name_body" : {
        "type" : "object",
        "properties" : {
          "interval" : {
            "type" : "integer",
            "format" : "int32",
            "x-go-name" : "Interval"
          },
          "retention" : {
            "type" : "integer",
            "format" : "int32",
            "x-go-name" : "Retention"
          },
          "schedule" : {
            "type" : "string",
            "x-go-name" : "Schedule"
          }
        }
      },
      "reports_name_body_1" : {
        "type" : "object",
        "properties" : {
          "interval" : {
            "type" : "integer",
            "format" : "int32",
            "x-go-name" : "Interval"
          },
          "retention" : {
            "type" : "integer",
            "format" : "int32",
            "x-go-name" : "Retention"
          },
          "schedule" : {
            "type" : "string",
            "x-go-name" : "Schedule"
          }
        }
      },
      "admin_seeds_body" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "spec" : {
            "$ref" : "#/components/schemas/CreateSeedSpec"
          }
        }
      },
      "seeds_seed_name_body" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "raw_kubeconfig" : {
            "type" : "string",
            "description" : "RawKubeconfig raw kubeconfig decoded to base64",
            "x-go-name" : "RawKubeconfig"
          },
          "spec" : {
            "$ref" : "#/components/schemas/SeedSpec"
          }
        }
      },
      "v1_projects_body" : {
        "type" : "object",
        "properties" : {
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "x-go-name" : "Labels"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "users" : {
            "type" : "array",
            "description" : "human user email list for the service account in projectmanagers group",
            "items" : {
              "type" : "string"
            },
            "x-go-name" : "Users"
          }
        }
      },
      "seed_name_dc_body" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "spec" : {
            "$ref" : "#/components/schemas/DatacenterSpec"
          }
        }
      },
      "dc_dc_body" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "spec" : {
            "$ref" : "#/components/schemas/DatacenterSpec"
          }
        }
      },
      "preset_name_status_body" : {
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "x-go-name" : "Enabled"
          }
        }
      },
      "project_id_clustertemplates_body" : {
        "type" : "object",
        "properties" : {
          "applications" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Application"
            },
            "x-go-name" : "Applications"
          },
          "cluster" : {
            "$ref" : "#/components/schemas/Cluster"
          },
          "name" : {
            "type" : "string",
            "x-go-name" : "Name"
          },
          "nodeDeployment" : {
            "$ref" : "#/components/schemas/NodeDeployment"
          },
          "scope" : {
            "type" : "string",
            "x-go-name" : "Scope"
          },
          "userSshKeys" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ClusterTemplateSSHKey"
            },
            "x-go-name" : "UserSSHKeys"
          }
        }
      },
      "clustertemplates_import_body" : {
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Annotations that can be added to the resource",
            "x-go-name" : "Annotations"
          },
          "applications" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Application"
            },
            "x-go-name" : "Applications"
          },
          "cluster" : {
            "$ref" : "#/components/schemas/ClusterTemplateInfo"
          },
          "creationTimestamp" : {
            "type" : "string",
            "description" : "CreationTimestamp is a timestamp representing the server time when this object was created.",
            "format" : "date-time",
            "x-go-name" : "CreationTimestamp"
          },
          "deletionTimestamp" : {
            "type" : "string",
            "description" : "DeletionTimestamp is a timestamp representing the server time when this object was deleted.",
            "format" : "date-time",
            "x-go-name" : "DeletionTimestamp"
          },
          "id" : {
            "type" : "string",
            "description" : "ID unique value that identifies the resource generated by the server. Read-Only.",
            "x-go-name" : "ID"
          },
          "name" : {
            "type" : "string",
            "description" : "Name represents human readable name for the resource",
            "x-go-name" : "Name"
          },
          "nodeDeployment" : {
            "$ref" : "#/components/schemas/ClusterTemplateNodeDeployment"
          },
          "projectID" : {
            "type" : "string",
            "x-go-name" : "ProjectID"
          },
          "scope" : {
            "type" : "string",
            "x-go-name" : "Scope"
          },
          "user" : {
            "type" : "string",
            "x-go-name" : "User"
          },
          "userSshKeys" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ClusterTemplateSSHKey"
            },
            "x-go-name" : "UserSSHKeys"
          }
        }
      },
      "template_id_instances_body" : {
        "type" : "object",
        "properties" : {
          "replicas" : {
            "type" : "integer",
            "format" : "int64",
            "x-go-name" : "Replicas"
          }
        }
      },
      "groupbindings_binding_name_body" : {
        "type" : "object",
        "properties" : {
          "group" : {
            "type" : "string",
            "x-go-name" : "Group"
          },
          "role" : {
            "type" : "string",
            "x-go-name" : "Role"
          }
        }
      },
      "clusters_cluster_id_body" : {
        "type" : "object",
        "properties" : {
          "kubeconfig" : {
            "type" : "string",
            "description" : "Kubeconfig Base64 encoded kubeconfig",
            "x-go-name" : "Kubeconfig"
          },
          "name" : {
            "type" : "string",
            "description" : "Name is human readable name for the external cluster",
            "x-go-name" : "Name"
          }
        }
      },
      "v2_quotas_body" : {
        "type" : "object",
        "properties" : {
          "quota" : {
            "$ref" : "#/components/schemas/Quota"
          },
          "subjectKind" : {
            "type" : "string",
            "x-go-name" : "SubjectKind"
          },
          "subjectName" : {
            "type" : "string",
            "x-go-name" : "SubjectName"
          }
        }
      }
    },
    "responses" : {
      "Kubeconfig" : {
        "description" : "Kubeconfig is a clusters kubeconfig",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer",
                "format" : "uint8"
              }
            }
          }
        }
      },
      "empty" : {
        "description" : "EmptyResponse is a empty response",
        "content" : { }
      }
    },
    "securitySchemes" : {
      "api_key" : {
        "type" : "apiKey",
        "name" : "Authorization",
        "in" : "header"
      }
    }
  },
  "x-original-swagger-version" : "2.0"
}