/*
 * Kubermatic Kubernetes Platform API
 *
 * This spec describes possible operations which can be made against the Kubermatic Kubernetes Platform API.
 *
 * The version of the OpenAPI document: 2.21
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`list_openstack_availability_zones`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListOpenstackAvailabilityZonesError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_openstack_availability_zones_no_credentials`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListOpenstackAvailabilityZonesNoCredentialsError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_openstack_availability_zones_no_credentials_v2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListOpenstackAvailabilityZonesNoCredentialsV2Error {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_openstack_networks`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListOpenstackNetworksError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_openstack_networks_no_credentials`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListOpenstackNetworksNoCredentialsError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_openstack_networks_no_credentials_v2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListOpenstackNetworksNoCredentialsV2Error {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_openstack_security_groups`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListOpenstackSecurityGroupsError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_openstack_security_groups_no_credentials`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListOpenstackSecurityGroupsNoCredentialsError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_openstack_security_groups_no_credentials_v2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListOpenstackSecurityGroupsNoCredentialsV2Error {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_openstack_sizes`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListOpenstackSizesError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_openstack_sizes_no_credentials`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListOpenstackSizesNoCredentialsError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_openstack_sizes_no_credentials_v2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListOpenstackSizesNoCredentialsV2Error {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_openstack_subnet_pools`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListOpenstackSubnetPoolsError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_openstack_subnets`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListOpenstackSubnetsError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_openstack_subnets_no_credentials`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListOpenstackSubnetsNoCredentialsError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_openstack_subnets_no_credentials_v2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListOpenstackSubnetsNoCredentialsV2Error {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_openstack_tenants`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListOpenstackTenantsError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_openstack_tenants_no_credentials`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListOpenstackTenantsNoCredentialsError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_openstack_tenants_no_credentials_v2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListOpenstackTenantsNoCredentialsV2Error {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}


/// Lists availability zones from openstack
pub async fn list_openstack_availability_zones(configuration: &configuration::Configuration, username: Option<&str>, password: Option<&str>, domain: Option<&str>, tenant: Option<&str>, tenant_id: Option<&str>, project: Option<&str>, project_id: Option<&str>, datacenter_name: Option<&str>, application_credential_id: Option<&str>, application_credential_secret: Option<&str>, oidc_authentication: Option<bool>, credential: Option<&str>) -> Result<Vec<crate::models::OpenstackAvailabilityZone>, Error<ListOpenstackAvailabilityZonesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/providers/openstack/availabilityzones", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = username {
        local_var_req_builder = local_var_req_builder.header("Username", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = password {
        local_var_req_builder = local_var_req_builder.header("Password", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = domain {
        local_var_req_builder = local_var_req_builder.header("Domain", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = tenant {
        local_var_req_builder = local_var_req_builder.header("Tenant", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = tenant_id {
        local_var_req_builder = local_var_req_builder.header("TenantID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = project {
        local_var_req_builder = local_var_req_builder.header("Project", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = project_id {
        local_var_req_builder = local_var_req_builder.header("ProjectID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = datacenter_name {
        local_var_req_builder = local_var_req_builder.header("DatacenterName", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = application_credential_id {
        local_var_req_builder = local_var_req_builder.header("ApplicationCredentialID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = application_credential_secret {
        local_var_req_builder = local_var_req_builder.header("ApplicationCredentialSecret", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = oidc_authentication {
        local_var_req_builder = local_var_req_builder.header("OIDCAuthentication", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = credential {
        local_var_req_builder = local_var_req_builder.header("Credential", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListOpenstackAvailabilityZonesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists availability zones from openstack
pub async fn list_openstack_availability_zones_no_credentials(configuration: &configuration::Configuration, project_id: &str, dc: &str, cluster_id: &str) -> Result<Vec<crate::models::OpenstackAvailabilityZone>, Error<ListOpenstackAvailabilityZonesNoCredentialsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/openstack/availabilityzones", local_var_configuration.base_path, project_id=crate::apis::urlencode(project_id), dc=crate::apis::urlencode(dc), cluster_id=crate::apis::urlencode(cluster_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListOpenstackAvailabilityZonesNoCredentialsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists availability zones from openstack
pub async fn list_openstack_availability_zones_no_credentials_v2(configuration: &configuration::Configuration, project_id: &str, cluster_id: &str) -> Result<Vec<crate::models::OpenstackAvailabilityZone>, Error<ListOpenstackAvailabilityZonesNoCredentialsV2Error>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/openstack/availabilityzones", local_var_configuration.base_path, project_id=crate::apis::urlencode(project_id), cluster_id=crate::apis::urlencode(cluster_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListOpenstackAvailabilityZonesNoCredentialsV2Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists networks from openstack
pub async fn list_openstack_networks(configuration: &configuration::Configuration, username: Option<&str>, password: Option<&str>, domain: Option<&str>, tenant: Option<&str>, tenant_id: Option<&str>, project: Option<&str>, project_id: Option<&str>, datacenter_name: Option<&str>, application_credential_id: Option<&str>, application_credential_secret: Option<&str>, oidc_authentication: Option<bool>, credential: Option<&str>) -> Result<Vec<crate::models::OpenstackNetwork>, Error<ListOpenstackNetworksError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/providers/openstack/networks", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = username {
        local_var_req_builder = local_var_req_builder.header("Username", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = password {
        local_var_req_builder = local_var_req_builder.header("Password", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = domain {
        local_var_req_builder = local_var_req_builder.header("Domain", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = tenant {
        local_var_req_builder = local_var_req_builder.header("Tenant", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = tenant_id {
        local_var_req_builder = local_var_req_builder.header("TenantID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = project {
        local_var_req_builder = local_var_req_builder.header("Project", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = project_id {
        local_var_req_builder = local_var_req_builder.header("ProjectID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = datacenter_name {
        local_var_req_builder = local_var_req_builder.header("DatacenterName", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = application_credential_id {
        local_var_req_builder = local_var_req_builder.header("ApplicationCredentialID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = application_credential_secret {
        local_var_req_builder = local_var_req_builder.header("ApplicationCredentialSecret", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = oidc_authentication {
        local_var_req_builder = local_var_req_builder.header("OIDCAuthentication", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = credential {
        local_var_req_builder = local_var_req_builder.header("Credential", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListOpenstackNetworksError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists networks from openstack
pub async fn list_openstack_networks_no_credentials(configuration: &configuration::Configuration, project_id: &str, dc: &str, cluster_id: &str) -> Result<Vec<crate::models::OpenstackNetwork>, Error<ListOpenstackNetworksNoCredentialsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/openstack/networks", local_var_configuration.base_path, project_id=crate::apis::urlencode(project_id), dc=crate::apis::urlencode(dc), cluster_id=crate::apis::urlencode(cluster_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListOpenstackNetworksNoCredentialsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists networks from openstack
pub async fn list_openstack_networks_no_credentials_v2(configuration: &configuration::Configuration, project_id: &str, cluster_id: &str) -> Result<Vec<crate::models::OpenstackNetwork>, Error<ListOpenstackNetworksNoCredentialsV2Error>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/openstack/networks", local_var_configuration.base_path, project_id=crate::apis::urlencode(project_id), cluster_id=crate::apis::urlencode(cluster_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListOpenstackNetworksNoCredentialsV2Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists security groups from openstack
pub async fn list_openstack_security_groups(configuration: &configuration::Configuration, username: Option<&str>, password: Option<&str>, domain: Option<&str>, tenant: Option<&str>, tenant_id: Option<&str>, project: Option<&str>, project_id: Option<&str>, datacenter_name: Option<&str>, application_credential_id: Option<&str>, application_credential_secret: Option<&str>, oidc_authentication: Option<bool>, credential: Option<&str>) -> Result<Vec<crate::models::OpenstackSecurityGroup>, Error<ListOpenstackSecurityGroupsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/providers/openstack/securitygroups", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = username {
        local_var_req_builder = local_var_req_builder.header("Username", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = password {
        local_var_req_builder = local_var_req_builder.header("Password", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = domain {
        local_var_req_builder = local_var_req_builder.header("Domain", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = tenant {
        local_var_req_builder = local_var_req_builder.header("Tenant", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = tenant_id {
        local_var_req_builder = local_var_req_builder.header("TenantID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = project {
        local_var_req_builder = local_var_req_builder.header("Project", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = project_id {
        local_var_req_builder = local_var_req_builder.header("ProjectID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = datacenter_name {
        local_var_req_builder = local_var_req_builder.header("DatacenterName", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = application_credential_id {
        local_var_req_builder = local_var_req_builder.header("ApplicationCredentialID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = application_credential_secret {
        local_var_req_builder = local_var_req_builder.header("ApplicationCredentialSecret", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = oidc_authentication {
        local_var_req_builder = local_var_req_builder.header("OIDCAuthentication", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = credential {
        local_var_req_builder = local_var_req_builder.header("Credential", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListOpenstackSecurityGroupsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists security groups from openstack
pub async fn list_openstack_security_groups_no_credentials(configuration: &configuration::Configuration, project_id: &str, dc: &str, cluster_id: &str) -> Result<Vec<crate::models::OpenstackSecurityGroup>, Error<ListOpenstackSecurityGroupsNoCredentialsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/openstack/securitygroups", local_var_configuration.base_path, project_id=crate::apis::urlencode(project_id), dc=crate::apis::urlencode(dc), cluster_id=crate::apis::urlencode(cluster_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListOpenstackSecurityGroupsNoCredentialsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists security groups from openstack
pub async fn list_openstack_security_groups_no_credentials_v2(configuration: &configuration::Configuration, project_id: &str, cluster_id: &str) -> Result<Vec<crate::models::OpenstackSecurityGroup>, Error<ListOpenstackSecurityGroupsNoCredentialsV2Error>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/openstack/securitygroups", local_var_configuration.base_path, project_id=crate::apis::urlencode(project_id), cluster_id=crate::apis::urlencode(cluster_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListOpenstackSecurityGroupsNoCredentialsV2Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists sizes from openstack
pub async fn list_openstack_sizes(configuration: &configuration::Configuration, username: Option<&str>, password: Option<&str>, domain: Option<&str>, tenant: Option<&str>, tenant_id: Option<&str>, project: Option<&str>, project_id: Option<&str>, datacenter_name: Option<&str>, application_credential_id: Option<&str>, application_credential_secret: Option<&str>, oidc_authentication: Option<bool>, credential: Option<&str>) -> Result<Vec<crate::models::OpenstackSize>, Error<ListOpenstackSizesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/providers/openstack/sizes", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = username {
        local_var_req_builder = local_var_req_builder.header("Username", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = password {
        local_var_req_builder = local_var_req_builder.header("Password", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = domain {
        local_var_req_builder = local_var_req_builder.header("Domain", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = tenant {
        local_var_req_builder = local_var_req_builder.header("Tenant", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = tenant_id {
        local_var_req_builder = local_var_req_builder.header("TenantID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = project {
        local_var_req_builder = local_var_req_builder.header("Project", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = project_id {
        local_var_req_builder = local_var_req_builder.header("ProjectID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = datacenter_name {
        local_var_req_builder = local_var_req_builder.header("DatacenterName", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = application_credential_id {
        local_var_req_builder = local_var_req_builder.header("ApplicationCredentialID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = application_credential_secret {
        local_var_req_builder = local_var_req_builder.header("ApplicationCredentialSecret", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = oidc_authentication {
        local_var_req_builder = local_var_req_builder.header("OIDCAuthentication", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = credential {
        local_var_req_builder = local_var_req_builder.header("Credential", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListOpenstackSizesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists sizes from openstack
pub async fn list_openstack_sizes_no_credentials(configuration: &configuration::Configuration, project_id: &str, dc: &str, cluster_id: &str) -> Result<Vec<crate::models::OpenstackSize>, Error<ListOpenstackSizesNoCredentialsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/openstack/sizes", local_var_configuration.base_path, project_id=crate::apis::urlencode(project_id), dc=crate::apis::urlencode(dc), cluster_id=crate::apis::urlencode(cluster_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListOpenstackSizesNoCredentialsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists sizes from openstack
pub async fn list_openstack_sizes_no_credentials_v2(configuration: &configuration::Configuration, project_id: &str, cluster_id: &str) -> Result<Vec<crate::models::OpenstackSize>, Error<ListOpenstackSizesNoCredentialsV2Error>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/openstack/sizes", local_var_configuration.base_path, project_id=crate::apis::urlencode(project_id), cluster_id=crate::apis::urlencode(cluster_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListOpenstackSizesNoCredentialsV2Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists subnet pools from openstack
pub async fn list_openstack_subnet_pools(configuration: &configuration::Configuration, username: Option<&str>, password: Option<&str>, domain: Option<&str>, tenant: Option<&str>, tenant_id: Option<&str>, project: Option<&str>, project_id: Option<&str>, datacenter_name: Option<&str>, application_credential_id: Option<&str>, application_credential_secret: Option<&str>, oidc_authentication: Option<bool>, credential: Option<&str>, ip_version: Option<i64>) -> Result<Vec<crate::models::OpenstackSubnetPool>, Error<ListOpenstackSubnetPoolsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/providers/openstack/subnetpools", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = ip_version {
        local_var_req_builder = local_var_req_builder.query(&[("ip_version", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = username {
        local_var_req_builder = local_var_req_builder.header("Username", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = password {
        local_var_req_builder = local_var_req_builder.header("Password", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = domain {
        local_var_req_builder = local_var_req_builder.header("Domain", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = tenant {
        local_var_req_builder = local_var_req_builder.header("Tenant", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = tenant_id {
        local_var_req_builder = local_var_req_builder.header("TenantID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = project {
        local_var_req_builder = local_var_req_builder.header("Project", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = project_id {
        local_var_req_builder = local_var_req_builder.header("ProjectID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = datacenter_name {
        local_var_req_builder = local_var_req_builder.header("DatacenterName", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = application_credential_id {
        local_var_req_builder = local_var_req_builder.header("ApplicationCredentialID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = application_credential_secret {
        local_var_req_builder = local_var_req_builder.header("ApplicationCredentialSecret", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = oidc_authentication {
        local_var_req_builder = local_var_req_builder.header("OIDCAuthentication", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = credential {
        local_var_req_builder = local_var_req_builder.header("Credential", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListOpenstackSubnetPoolsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists subnets from openstack
pub async fn list_openstack_subnets(configuration: &configuration::Configuration, username: Option<&str>, password: Option<&str>, domain: Option<&str>, tenant: Option<&str>, tenant_id: Option<&str>, project: Option<&str>, project_id: Option<&str>, datacenter_name: Option<&str>, application_credential_id: Option<&str>, application_credential_secret: Option<&str>, oidc_authentication: Option<bool>, credential: Option<&str>, network_id: Option<&str>) -> Result<Vec<crate::models::OpenstackSubnet>, Error<ListOpenstackSubnetsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/providers/openstack/subnets", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = network_id {
        local_var_req_builder = local_var_req_builder.query(&[("network_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = username {
        local_var_req_builder = local_var_req_builder.header("Username", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = password {
        local_var_req_builder = local_var_req_builder.header("Password", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = domain {
        local_var_req_builder = local_var_req_builder.header("Domain", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = tenant {
        local_var_req_builder = local_var_req_builder.header("Tenant", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = tenant_id {
        local_var_req_builder = local_var_req_builder.header("TenantID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = project {
        local_var_req_builder = local_var_req_builder.header("Project", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = project_id {
        local_var_req_builder = local_var_req_builder.header("ProjectID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = datacenter_name {
        local_var_req_builder = local_var_req_builder.header("DatacenterName", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = application_credential_id {
        local_var_req_builder = local_var_req_builder.header("ApplicationCredentialID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = application_credential_secret {
        local_var_req_builder = local_var_req_builder.header("ApplicationCredentialSecret", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = oidc_authentication {
        local_var_req_builder = local_var_req_builder.header("OIDCAuthentication", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = credential {
        local_var_req_builder = local_var_req_builder.header("Credential", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListOpenstackSubnetsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists subnets from openstack
pub async fn list_openstack_subnets_no_credentials(configuration: &configuration::Configuration, project_id: &str, dc: &str, cluster_id: &str, network_id: Option<&str>) -> Result<Vec<crate::models::OpenstackSubnet>, Error<ListOpenstackSubnetsNoCredentialsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/openstack/subnets", local_var_configuration.base_path, project_id=crate::apis::urlencode(project_id), dc=crate::apis::urlencode(dc), cluster_id=crate::apis::urlencode(cluster_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = network_id {
        local_var_req_builder = local_var_req_builder.query(&[("network_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListOpenstackSubnetsNoCredentialsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists subnets from openstack
pub async fn list_openstack_subnets_no_credentials_v2(configuration: &configuration::Configuration, project_id: &str, cluster_id: &str, network_id: Option<&str>) -> Result<Vec<crate::models::OpenstackSubnet>, Error<ListOpenstackSubnetsNoCredentialsV2Error>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/openstack/subnets", local_var_configuration.base_path, project_id=crate::apis::urlencode(project_id), cluster_id=crate::apis::urlencode(cluster_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = network_id {
        local_var_req_builder = local_var_req_builder.query(&[("network_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListOpenstackSubnetsNoCredentialsV2Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists tenants from openstack
pub async fn list_openstack_tenants(configuration: &configuration::Configuration, username: Option<&str>, password: Option<&str>, domain: Option<&str>, datacenter_name: Option<&str>, application_credential_id: Option<&str>, application_credential_secret: Option<&str>, oidc_authentication: Option<bool>, credential: Option<&str>) -> Result<Vec<crate::models::OpenstackTenant>, Error<ListOpenstackTenantsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/providers/openstack/tenants", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = username {
        local_var_req_builder = local_var_req_builder.header("Username", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = password {
        local_var_req_builder = local_var_req_builder.header("Password", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = domain {
        local_var_req_builder = local_var_req_builder.header("Domain", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = datacenter_name {
        local_var_req_builder = local_var_req_builder.header("DatacenterName", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = application_credential_id {
        local_var_req_builder = local_var_req_builder.header("ApplicationCredentialID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = application_credential_secret {
        local_var_req_builder = local_var_req_builder.header("ApplicationCredentialSecret", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = oidc_authentication {
        local_var_req_builder = local_var_req_builder.header("OIDCAuthentication", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = credential {
        local_var_req_builder = local_var_req_builder.header("Credential", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListOpenstackTenantsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists tenants from openstack
pub async fn list_openstack_tenants_no_credentials(configuration: &configuration::Configuration, project_id: &str, dc: &str, cluster_id: &str) -> Result<Vec<crate::models::OpenstackTenant>, Error<ListOpenstackTenantsNoCredentialsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/openstack/tenants", local_var_configuration.base_path, project_id=crate::apis::urlencode(project_id), dc=crate::apis::urlencode(dc), cluster_id=crate::apis::urlencode(cluster_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListOpenstackTenantsNoCredentialsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists tenants from openstack
pub async fn list_openstack_tenants_no_credentials_v2(configuration: &configuration::Configuration, project_id: &str, cluster_id: &str) -> Result<Vec<crate::models::OpenstackTenant>, Error<ListOpenstackTenantsNoCredentialsV2Error>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/openstack/tenants", local_var_configuration.base_path, project_id=crate::apis::urlencode(project_id), cluster_id=crate::apis::urlencode(cluster_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListOpenstackTenantsNoCredentialsV2Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

