/*
 * Kubermatic Kubernetes Platform API
 *
 * This spec describes possible operations which can be made against the Kubermatic Kubernetes Platform API.
 *
 * The version of the OpenAPI document: 2.21
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`list_azure_availability_zones`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListAzureAvailabilityZonesError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_azure_availability_zones_no_credentials`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListAzureAvailabilityZonesNoCredentialsError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_azure_availability_zones_no_credentials_v2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListAzureAvailabilityZonesNoCredentialsV2Error {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_azure_resource_groups`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListAzureResourceGroupsError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_azure_route_tables`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListAzureRouteTablesError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_azure_security_groups`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListAzureSecurityGroupsError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_azure_sizes`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListAzureSizesError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_azure_sizes_no_credentials`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListAzureSizesNoCredentialsError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_azure_sizes_no_credentials_v2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListAzureSizesNoCredentialsV2Error {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_azure_subnets`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListAzureSubnetsError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_azure_vnets`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListAzureVnetsError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}


/// Lists VM availability zones in an Azure region
pub async fn list_azure_availability_zones(configuration: &configuration::Configuration, ) -> Result<crate::models::AzureAvailabilityZonesList, Error<ListAzureAvailabilityZonesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/providers/azure/availabilityzones", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListAzureAvailabilityZonesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists available VM availability zones in an Azure region
pub async fn list_azure_availability_zones_no_credentials(configuration: &configuration::Configuration, project_id: &str, dc: &str, cluster_id: &str, sku_name: Option<&str>) -> Result<crate::models::AzureAvailabilityZonesList, Error<ListAzureAvailabilityZonesNoCredentialsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/azure/availabilityzones", local_var_configuration.base_path, project_id=crate::apis::urlencode(project_id), dc=crate::apis::urlencode(dc), cluster_id=crate::apis::urlencode(cluster_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = sku_name {
        local_var_req_builder = local_var_req_builder.header("SKUName", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListAzureAvailabilityZonesNoCredentialsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists available VM availability zones in an Azure region
pub async fn list_azure_availability_zones_no_credentials_v2(configuration: &configuration::Configuration, project_id: &str, cluster_id: &str, sku_name: Option<&str>) -> Result<crate::models::AzureAvailabilityZonesList, Error<ListAzureAvailabilityZonesNoCredentialsV2Error>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/azure/availabilityzones", local_var_configuration.base_path, project_id=crate::apis::urlencode(project_id), cluster_id=crate::apis::urlencode(cluster_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = sku_name {
        local_var_req_builder = local_var_req_builder.header("SKUName", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListAzureAvailabilityZonesNoCredentialsV2Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists available VM resource groups
pub async fn list_azure_resource_groups(configuration: &configuration::Configuration, subscription_id: Option<&str>, tenant_id: Option<&str>, client_id: Option<&str>, client_secret: Option<&str>, credential: Option<&str>, location: Option<&str>) -> Result<crate::models::AzureResourceGroupsList, Error<ListAzureResourceGroupsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/providers/azure/resourcegroups", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = subscription_id {
        local_var_req_builder = local_var_req_builder.header("SubscriptionID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = tenant_id {
        local_var_req_builder = local_var_req_builder.header("TenantID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = client_id {
        local_var_req_builder = local_var_req_builder.header("ClientID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = client_secret {
        local_var_req_builder = local_var_req_builder.header("ClientSecret", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = credential {
        local_var_req_builder = local_var_req_builder.header("Credential", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = location {
        local_var_req_builder = local_var_req_builder.header("Location", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListAzureResourceGroupsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists available VM route tables
pub async fn list_azure_route_tables(configuration: &configuration::Configuration, subscription_id: Option<&str>, tenant_id: Option<&str>, client_id: Option<&str>, client_secret: Option<&str>, credential: Option<&str>, resource_group: Option<&str>, location: Option<&str>) -> Result<crate::models::AzureRouteTablesList, Error<ListAzureRouteTablesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/providers/azure/routetables", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = subscription_id {
        local_var_req_builder = local_var_req_builder.header("SubscriptionID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = tenant_id {
        local_var_req_builder = local_var_req_builder.header("TenantID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = client_id {
        local_var_req_builder = local_var_req_builder.header("ClientID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = client_secret {
        local_var_req_builder = local_var_req_builder.header("ClientSecret", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = credential {
        local_var_req_builder = local_var_req_builder.header("Credential", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = resource_group {
        local_var_req_builder = local_var_req_builder.header("ResourceGroup", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = location {
        local_var_req_builder = local_var_req_builder.header("Location", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListAzureRouteTablesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists available VM security groups
pub async fn list_azure_security_groups(configuration: &configuration::Configuration, subscription_id: Option<&str>, tenant_id: Option<&str>, client_id: Option<&str>, client_secret: Option<&str>, credential: Option<&str>, resource_group: Option<&str>, location: Option<&str>) -> Result<crate::models::AzureSecurityGroupsList, Error<ListAzureSecurityGroupsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/providers/azure/securitygroups", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = subscription_id {
        local_var_req_builder = local_var_req_builder.header("SubscriptionID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = tenant_id {
        local_var_req_builder = local_var_req_builder.header("TenantID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = client_id {
        local_var_req_builder = local_var_req_builder.header("ClientID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = client_secret {
        local_var_req_builder = local_var_req_builder.header("ClientSecret", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = credential {
        local_var_req_builder = local_var_req_builder.header("Credential", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = resource_group {
        local_var_req_builder = local_var_req_builder.header("ResourceGroup", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = location {
        local_var_req_builder = local_var_req_builder.header("Location", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListAzureSecurityGroupsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists available VM sizes in an Azure region
pub async fn list_azure_sizes(configuration: &configuration::Configuration, subscription_id: Option<&str>, tenant_id: Option<&str>, client_id: Option<&str>, client_secret: Option<&str>, location: Option<&str>, credential: Option<&str>) -> Result<Vec<crate::models::AzureSize>, Error<ListAzureSizesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/providers/azure/sizes", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = subscription_id {
        local_var_req_builder = local_var_req_builder.header("SubscriptionID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = tenant_id {
        local_var_req_builder = local_var_req_builder.header("TenantID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = client_id {
        local_var_req_builder = local_var_req_builder.header("ClientID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = client_secret {
        local_var_req_builder = local_var_req_builder.header("ClientSecret", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = location {
        local_var_req_builder = local_var_req_builder.header("Location", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = credential {
        local_var_req_builder = local_var_req_builder.header("Credential", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListAzureSizesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists available VM sizes in an Azure region
pub async fn list_azure_sizes_no_credentials(configuration: &configuration::Configuration, project_id: &str, dc: &str, cluster_id: &str) -> Result<Vec<crate::models::AzureSize>, Error<ListAzureSizesNoCredentialsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{project_id}/dc/{dc}/clusters/{cluster_id}/providers/azure/sizes", local_var_configuration.base_path, project_id=crate::apis::urlencode(project_id), dc=crate::apis::urlencode(dc), cluster_id=crate::apis::urlencode(cluster_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListAzureSizesNoCredentialsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists available VM sizes in an Azure region
pub async fn list_azure_sizes_no_credentials_v2(configuration: &configuration::Configuration, project_id: &str, cluster_id: &str) -> Result<Vec<crate::models::AzureSize>, Error<ListAzureSizesNoCredentialsV2Error>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/azure/sizes", local_var_configuration.base_path, project_id=crate::apis::urlencode(project_id), cluster_id=crate::apis::urlencode(cluster_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListAzureSizesNoCredentialsV2Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists available VM subnets
pub async fn list_azure_subnets(configuration: &configuration::Configuration, subscription_id: Option<&str>, tenant_id: Option<&str>, client_id: Option<&str>, client_secret: Option<&str>, credential: Option<&str>, resource_group: Option<&str>, virtual_network: Option<&str>) -> Result<crate::models::AzureSubnetsList, Error<ListAzureSubnetsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/providers/azure/subnets", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = subscription_id {
        local_var_req_builder = local_var_req_builder.header("SubscriptionID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = tenant_id {
        local_var_req_builder = local_var_req_builder.header("TenantID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = client_id {
        local_var_req_builder = local_var_req_builder.header("ClientID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = client_secret {
        local_var_req_builder = local_var_req_builder.header("ClientSecret", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = credential {
        local_var_req_builder = local_var_req_builder.header("Credential", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = resource_group {
        local_var_req_builder = local_var_req_builder.header("ResourceGroup", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = virtual_network {
        local_var_req_builder = local_var_req_builder.header("VirtualNetwork", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListAzureSubnetsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists available VM virtual networks
pub async fn list_azure_vnets(configuration: &configuration::Configuration, subscription_id: Option<&str>, tenant_id: Option<&str>, client_id: Option<&str>, client_secret: Option<&str>, credential: Option<&str>, resource_group: Option<&str>, location: Option<&str>) -> Result<crate::models::AzureVirtualNetworksList, Error<ListAzureVnetsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/providers/azure/vnets", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = subscription_id {
        local_var_req_builder = local_var_req_builder.header("SubscriptionID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = tenant_id {
        local_var_req_builder = local_var_req_builder.header("TenantID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = client_id {
        local_var_req_builder = local_var_req_builder.header("ClientID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = client_secret {
        local_var_req_builder = local_var_req_builder.header("ClientSecret", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = credential {
        local_var_req_builder = local_var_req_builder.header("Credential", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = resource_group {
        local_var_req_builder = local_var_req_builder.header("ResourceGroup", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = location {
        local_var_req_builder = local_var_req_builder.header("Location", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListAzureVnetsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

