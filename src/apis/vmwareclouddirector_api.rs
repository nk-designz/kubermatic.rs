/*
 * Kubermatic Kubernetes Platform API
 *
 * This spec describes possible operations which can be made against the Kubermatic Kubernetes Platform API.
 *
 * The version of the OpenAPI document: 2.21
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`list_v_mware_cloud_director_catalogs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListVMwareCloudDirectorCatalogsError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_v_mware_cloud_director_catalogs_no_credentials`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListVMwareCloudDirectorCatalogsNoCredentialsError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_v_mware_cloud_director_networks`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListVMwareCloudDirectorNetworksError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_v_mware_cloud_director_networks_no_credentials`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListVMwareCloudDirectorNetworksNoCredentialsError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_v_mware_cloud_director_storage_profiles`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListVMwareCloudDirectorStorageProfilesError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_v_mware_cloud_director_storage_profiles_no_credentials`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListVMwareCloudDirectorStorageProfilesNoCredentialsError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_v_mware_cloud_director_templates`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListVMwareCloudDirectorTemplatesError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_v_mware_cloud_director_templates_no_credentials`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListVMwareCloudDirectorTemplatesNoCredentialsError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}


/// List VMware Cloud Director Catalogs
pub async fn list_v_mware_cloud_director_catalogs(configuration: &configuration::Configuration, dc: &str, username: Option<&str>, password: Option<&str>, organization: Option<&str>, VDC: Option<&str>, credential: Option<&str>) -> Result<Vec<crate::models::VMwareCloudDirectorCatalog>, Error<ListVMwareCloudDirectorCatalogsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/providers/vmwareclouddirector/{dc}/catalogs", local_var_configuration.base_path, dc=crate::apis::urlencode(dc));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = username {
        local_var_req_builder = local_var_req_builder.header("Username", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = password {
        local_var_req_builder = local_var_req_builder.header("Password", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = organization {
        local_var_req_builder = local_var_req_builder.header("Organization", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = VDC {
        local_var_req_builder = local_var_req_builder.header("VDC", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = credential {
        local_var_req_builder = local_var_req_builder.header("Credential", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListVMwareCloudDirectorCatalogsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List VMware Cloud Director Catalogs
pub async fn list_v_mware_cloud_director_catalogs_no_credentials(configuration: &configuration::Configuration, project_id: &str, cluster_id: &str) -> Result<Vec<crate::models::VMwareCloudDirectorCatalog>, Error<ListVMwareCloudDirectorCatalogsNoCredentialsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/vmwareclouddirector/catalogs", local_var_configuration.base_path, project_id=crate::apis::urlencode(project_id), cluster_id=crate::apis::urlencode(cluster_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListVMwareCloudDirectorCatalogsNoCredentialsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List VMware Cloud Director OVDC Networks
pub async fn list_v_mware_cloud_director_networks(configuration: &configuration::Configuration, dc: &str, username: Option<&str>, password: Option<&str>, organization: Option<&str>, VDC: Option<&str>, credential: Option<&str>) -> Result<Vec<crate::models::VMwareCloudDirectorNetwork>, Error<ListVMwareCloudDirectorNetworksError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/providers/vmwareclouddirector/{dc}/networks", local_var_configuration.base_path, dc=crate::apis::urlencode(dc));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = username {
        local_var_req_builder = local_var_req_builder.header("Username", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = password {
        local_var_req_builder = local_var_req_builder.header("Password", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = organization {
        local_var_req_builder = local_var_req_builder.header("Organization", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = VDC {
        local_var_req_builder = local_var_req_builder.header("VDC", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = credential {
        local_var_req_builder = local_var_req_builder.header("Credential", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListVMwareCloudDirectorNetworksError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List VMware Cloud Director OVDC Networks
pub async fn list_v_mware_cloud_director_networks_no_credentials(configuration: &configuration::Configuration, project_id: &str, cluster_id: &str) -> Result<Vec<crate::models::VMwareCloudDirectorNetwork>, Error<ListVMwareCloudDirectorNetworksNoCredentialsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/vmwareclouddirector/networks", local_var_configuration.base_path, project_id=crate::apis::urlencode(project_id), cluster_id=crate::apis::urlencode(cluster_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListVMwareCloudDirectorNetworksNoCredentialsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List VMware Cloud Director Storage Profiles
pub async fn list_v_mware_cloud_director_storage_profiles(configuration: &configuration::Configuration, dc: &str, username: Option<&str>, password: Option<&str>, organization: Option<&str>, VDC: Option<&str>, credential: Option<&str>) -> Result<Vec<crate::models::VMwareCloudDirectorStorageProfile>, Error<ListVMwareCloudDirectorStorageProfilesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/providers/vmwareclouddirector/{dc}/storageprofiles", local_var_configuration.base_path, dc=crate::apis::urlencode(dc));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = username {
        local_var_req_builder = local_var_req_builder.header("Username", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = password {
        local_var_req_builder = local_var_req_builder.header("Password", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = organization {
        local_var_req_builder = local_var_req_builder.header("Organization", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = VDC {
        local_var_req_builder = local_var_req_builder.header("VDC", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = credential {
        local_var_req_builder = local_var_req_builder.header("Credential", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListVMwareCloudDirectorStorageProfilesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List VMware Cloud Director Storage Profiles
pub async fn list_v_mware_cloud_director_storage_profiles_no_credentials(configuration: &configuration::Configuration, project_id: &str, cluster_id: &str) -> Result<Vec<crate::models::VMwareCloudDirectorStorageProfile>, Error<ListVMwareCloudDirectorStorageProfilesNoCredentialsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/vmwareclouddirector/storageprofiles", local_var_configuration.base_path, project_id=crate::apis::urlencode(project_id), cluster_id=crate::apis::urlencode(cluster_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListVMwareCloudDirectorStorageProfilesNoCredentialsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List VMware Cloud Director Templates
pub async fn list_v_mware_cloud_director_templates(configuration: &configuration::Configuration, dc: &str, catalog_name: &str, username: Option<&str>, password: Option<&str>, organization: Option<&str>, VDC: Option<&str>, credential: Option<&str>) -> Result<Vec<crate::models::VMwareCloudDirectorTemplate>, Error<ListVMwareCloudDirectorTemplatesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/providers/vmwareclouddirector/{dc}/templates/{catalog_name}", local_var_configuration.base_path, dc=crate::apis::urlencode(dc), catalog_name=crate::apis::urlencode(catalog_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = username {
        local_var_req_builder = local_var_req_builder.header("Username", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = password {
        local_var_req_builder = local_var_req_builder.header("Password", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = organization {
        local_var_req_builder = local_var_req_builder.header("Organization", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = VDC {
        local_var_req_builder = local_var_req_builder.header("VDC", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = credential {
        local_var_req_builder = local_var_req_builder.header("Credential", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListVMwareCloudDirectorTemplatesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List VMware Cloud Director Templates
pub async fn list_v_mware_cloud_director_templates_no_credentials(configuration: &configuration::Configuration, project_id: &str, cluster_id: &str, catalog_name: &str) -> Result<Vec<crate::models::VMwareCloudDirectorTemplate>, Error<ListVMwareCloudDirectorTemplatesNoCredentialsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/vmwareclouddirector/templates/{catalog_name}", local_var_configuration.base_path, project_id=crate::apis::urlencode(project_id), cluster_id=crate::apis::urlencode(cluster_id), catalog_name=crate::apis::urlencode(catalog_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListVMwareCloudDirectorTemplatesNoCredentialsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

