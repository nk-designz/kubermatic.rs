/*
 * Kubermatic Kubernetes Platform API
 *
 * This spec describes possible operations which can be made against the Kubermatic Kubernetes Platform API.
 *
 * The version of the OpenAPI document: 2.21
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`list_nutanix_categories`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListNutanixCategoriesError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_nutanix_categories_no_credentials`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListNutanixCategoriesNoCredentialsError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_nutanix_category_values`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListNutanixCategoryValuesError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_nutanix_category_values_no_credentials`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListNutanixCategoryValuesNoCredentialsError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_nutanix_clusters`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListNutanixClustersError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_nutanix_projects`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListNutanixProjectsError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_nutanix_subnets`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListNutanixSubnetsError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_nutanix_subnets_no_credentials`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListNutanixSubnetsNoCredentialsError {
    DefaultResponse(crate::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}


/// List category keys from Nutanix
pub async fn list_nutanix_categories(configuration: &configuration::Configuration, dc: &str, nutanix_username: Option<&str>, nutanix_password: Option<&str>, nutanix_proxy_url: Option<&str>, credential: Option<&str>) -> Result<Vec<crate::models::NutanixCategory>, Error<ListNutanixCategoriesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/providers/nutanix/{dc}/categories", local_var_configuration.base_path, dc=crate::apis::urlencode(dc));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = nutanix_username {
        local_var_req_builder = local_var_req_builder.header("NutanixUsername", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = nutanix_password {
        local_var_req_builder = local_var_req_builder.header("NutanixPassword", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = nutanix_proxy_url {
        local_var_req_builder = local_var_req_builder.header("NutanixProxyURL", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = credential {
        local_var_req_builder = local_var_req_builder.header("Credential", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListNutanixCategoriesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists available Nutanix categories
pub async fn list_nutanix_categories_no_credentials(configuration: &configuration::Configuration, project_id: &str, cluster_id: &str) -> Result<Vec<crate::models::NutanixCategory>, Error<ListNutanixCategoriesNoCredentialsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/nutanix/categories", local_var_configuration.base_path, project_id=crate::apis::urlencode(project_id), cluster_id=crate::apis::urlencode(cluster_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListNutanixCategoriesNoCredentialsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List available category values for a specific category from Nutanix
pub async fn list_nutanix_category_values(configuration: &configuration::Configuration, dc: &str, category: &str, nutanix_username: Option<&str>, nutanix_password: Option<&str>, nutanix_proxy_url: Option<&str>, credential: Option<&str>) -> Result<Vec<crate::models::NutanixCategoryValue>, Error<ListNutanixCategoryValuesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/providers/nutanix/{dc}/categories/{category}/values", local_var_configuration.base_path, dc=crate::apis::urlencode(dc), category=crate::apis::urlencode(category));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = nutanix_username {
        local_var_req_builder = local_var_req_builder.header("NutanixUsername", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = nutanix_password {
        local_var_req_builder = local_var_req_builder.header("NutanixPassword", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = nutanix_proxy_url {
        local_var_req_builder = local_var_req_builder.header("NutanixProxyURL", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = credential {
        local_var_req_builder = local_var_req_builder.header("Credential", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListNutanixCategoryValuesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists available Nutanix category values for a specific category
pub async fn list_nutanix_category_values_no_credentials(configuration: &configuration::Configuration, project_id: &str, cluster_id: &str, category: &str) -> Result<Vec<crate::models::NutanixCategoryValue>, Error<ListNutanixCategoryValuesNoCredentialsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/nutanix/categories/{category}/values", local_var_configuration.base_path, project_id=crate::apis::urlencode(project_id), cluster_id=crate::apis::urlencode(cluster_id), category=crate::apis::urlencode(category));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListNutanixCategoryValuesNoCredentialsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List clusters from Nutanix
pub async fn list_nutanix_clusters(configuration: &configuration::Configuration, dc: &str, nutanix_username: Option<&str>, nutanix_password: Option<&str>, nutanix_proxy_url: Option<&str>, credential: Option<&str>) -> Result<Vec<crate::models::NutanixCluster>, Error<ListNutanixClustersError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/providers/nutanix/{dc}/clusters", local_var_configuration.base_path, dc=crate::apis::urlencode(dc));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = nutanix_username {
        local_var_req_builder = local_var_req_builder.header("NutanixUsername", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = nutanix_password {
        local_var_req_builder = local_var_req_builder.header("NutanixPassword", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = nutanix_proxy_url {
        local_var_req_builder = local_var_req_builder.header("NutanixProxyURL", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = credential {
        local_var_req_builder = local_var_req_builder.header("Credential", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListNutanixClustersError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List projects from Nutanix
pub async fn list_nutanix_projects(configuration: &configuration::Configuration, dc: &str, nutanix_username: Option<&str>, nutanix_password: Option<&str>, nutanix_proxy_url: Option<&str>, credential: Option<&str>) -> Result<Vec<crate::models::NutanixProject>, Error<ListNutanixProjectsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/providers/nutanix/{dc}/projects", local_var_configuration.base_path, dc=crate::apis::urlencode(dc));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = nutanix_username {
        local_var_req_builder = local_var_req_builder.header("NutanixUsername", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = nutanix_password {
        local_var_req_builder = local_var_req_builder.header("NutanixPassword", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = nutanix_proxy_url {
        local_var_req_builder = local_var_req_builder.header("NutanixProxyURL", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = credential {
        local_var_req_builder = local_var_req_builder.header("Credential", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListNutanixProjectsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List subnets from Nutanix
pub async fn list_nutanix_subnets(configuration: &configuration::Configuration, dc: &str, nutanix_cluster: &str, nutanix_username: Option<&str>, nutanix_password: Option<&str>, nutanix_proxy_url: Option<&str>, credential: Option<&str>, nutanix_project: Option<&str>) -> Result<Vec<crate::models::NutanixSubnet>, Error<ListNutanixSubnetsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/providers/nutanix/{dc}/subnets", local_var_configuration.base_path, dc=crate::apis::urlencode(dc));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = nutanix_username {
        local_var_req_builder = local_var_req_builder.header("NutanixUsername", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = nutanix_password {
        local_var_req_builder = local_var_req_builder.header("NutanixPassword", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = nutanix_proxy_url {
        local_var_req_builder = local_var_req_builder.header("NutanixProxyURL", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = credential {
        local_var_req_builder = local_var_req_builder.header("Credential", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.header("NutanixCluster", nutanix_cluster.to_string());
    if let Some(local_var_param_value) = nutanix_project {
        local_var_req_builder = local_var_req_builder.header("NutanixProject", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListNutanixSubnetsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists available Nutanix Subnets
pub async fn list_nutanix_subnets_no_credentials(configuration: &configuration::Configuration, project_id: &str, cluster_id: &str) -> Result<Vec<crate::models::NutanixSubnet>, Error<ListNutanixSubnetsNoCredentialsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/nutanix/subnets", local_var_configuration.base_path, project_id=crate::apis::urlencode(project_id), cluster_id=crate::apis::urlencode(cluster_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListNutanixSubnetsNoCredentialsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

