/*
 * Kubermatic Kubernetes Platform API
 *
 * This spec describes possible operations which can be made against the Kubermatic Kubernetes Platform API.
 *
 * The version of the OpenAPI document: 2.21
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Project : Project is a top-level container for a set of resources



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Project {
    /// Annotations that can be added to the resource
    #[serde(rename = "annotations", skip_serializing_if = "Option::is_none")]
    pub annotations: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "clustersNumber", skip_serializing_if = "Option::is_none")]
    pub clusters_number: Option<i64>,
    /// CreationTimestamp is a timestamp representing the server time when this object was created.
    #[serde(rename = "creationTimestamp", skip_serializing_if = "Option::is_none")]
    pub creation_timestamp: Option<String>,
    /// DeletionTimestamp is a timestamp representing the server time when this object was deleted.
    #[serde(rename = "deletionTimestamp", skip_serializing_if = "Option::is_none")]
    pub deletion_timestamp: Option<String>,
    /// ID unique value that identifies the resource generated by the server. Read-Only.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<::std::collections::HashMap<String, String>>,
    /// Name represents human readable name for the resource
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Owners an optional owners list for the given project
    #[serde(rename = "owners", skip_serializing_if = "Option::is_none")]
    pub owners: Option<Vec<crate::models::User>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

impl Project {
    /// Project is a top-level container for a set of resources
    pub fn new() -> Project {
        Project {
            annotations: None,
            clusters_number: None,
            creation_timestamp: None,
            deletion_timestamp: None,
            id: None,
            labels: None,
            name: None,
            owners: None,
            status: None,
        }
    }
}


