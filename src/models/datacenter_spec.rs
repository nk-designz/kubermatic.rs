/*
 * Kubermatic Kubernetes Platform API
 *
 * This spec describes possible operations which can be made against the Kubermatic Kubernetes Platform API.
 *
 * The version of the OpenAPI document: 2.21
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DatacenterSpec {
    #[serde(rename = "alibaba", skip_serializing_if = "Option::is_none")]
    pub alibaba: Option<Box<crate::models::DatacenterSpecAlibaba>>,
    #[serde(rename = "anexia", skip_serializing_if = "Option::is_none")]
    pub anexia: Option<Box<crate::models::DatacenterSpecAnexia>>,
    #[serde(rename = "aws", skip_serializing_if = "Option::is_none")]
    pub aws: Option<Box<crate::models::DatacenterSpecAws>>,
    #[serde(rename = "azure", skip_serializing_if = "Option::is_none")]
    pub azure: Option<Box<crate::models::DatacenterSpecAzure>>,
    #[serde(rename = "bringyourown", skip_serializing_if = "Option::is_none")]
    pub bringyourown: Option<serde_json::Value>,
    /// Optional: Country of the seed as ISO-3166 two-letter code, e.g. DE or UK. It is used for informational purposes.
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    #[serde(rename = "digitalocean", skip_serializing_if = "Option::is_none")]
    pub digitalocean: Option<Box<crate::models::DatacenterSpecDigitalocean>>,
    /// EnforceAuditLogging enforces audit logging on every cluster within the DC, ignoring cluster-specific settings.
    #[serde(rename = "enforceAuditLogging", skip_serializing_if = "Option::is_none")]
    pub enforce_audit_logging: Option<bool>,
    /// EnforcePodSecurityPolicy enforces pod security policy plugin on every clusters within the DC, ignoring cluster-specific settings
    #[serde(rename = "enforcePodSecurityPolicy", skip_serializing_if = "Option::is_none")]
    pub enforce_pod_security_policy: Option<bool>,
    #[serde(rename = "fake", skip_serializing_if = "Option::is_none")]
    pub fake: Option<Box<crate::models::DatacenterSpecFake>>,
    #[serde(rename = "gcp", skip_serializing_if = "Option::is_none")]
    pub gcp: Option<Box<crate::models::DatacenterSpecGcp>>,
    #[serde(rename = "hetzner", skip_serializing_if = "Option::is_none")]
    pub hetzner: Option<Box<crate::models::DatacenterSpecHetzner>>,
    /// IPv6Enabled is a flag to indicate if the ipv6 is enabled for the datacenter.
    #[serde(rename = "ipv6Enabled", skip_serializing_if = "Option::is_none")]
    pub ipv6_enabled: Option<bool>,
    #[serde(rename = "kubevirt", skip_serializing_if = "Option::is_none")]
    pub kubevirt: Option<Box<crate::models::DatacenterSpecKubevirt>>,
    /// Optional: Detailed location of the cluster, like \"Hamburg\" or \"Datacenter 7\". It is used for informational purposes.
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(rename = "node", skip_serializing_if = "Option::is_none")]
    pub node: Option<Box<crate::models::NodeSettings>>,
    #[serde(rename = "nutanix", skip_serializing_if = "Option::is_none")]
    pub nutanix: Option<Box<crate::models::DatacenterSpecNutanix>>,
    #[serde(rename = "openstack", skip_serializing_if = "Option::is_none")]
    pub openstack: Option<Box<crate::models::DatacenterSpecOpenstack>>,
    #[serde(rename = "packet", skip_serializing_if = "Option::is_none")]
    pub packet: Option<Box<crate::models::DatacenterSpecPacket>>,
    /// Name of the datacenter provider. Extracted based on which provider is defined in the spec. It is used for informational purposes.
    #[serde(rename = "provider", skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
    #[serde(rename = "requiredEmails", skip_serializing_if = "Option::is_none")]
    pub required_emails: Option<Vec<String>>,
    /// Name of the seed this datacenter belongs to.
    #[serde(rename = "seed", skip_serializing_if = "Option::is_none")]
    pub seed: Option<String>,
    #[serde(rename = "vmwareclouddirector", skip_serializing_if = "Option::is_none")]
    pub vmwareclouddirector: Option<Box<crate::models::DatacenterSpecVMwareCloudDirector>>,
    #[serde(rename = "vsphere", skip_serializing_if = "Option::is_none")]
    pub vsphere: Option<Box<crate::models::DatacenterSpecVSphere>>,
}

impl DatacenterSpec {
    pub fn new() -> DatacenterSpec {
        DatacenterSpec {
            alibaba: None,
            anexia: None,
            aws: None,
            azure: None,
            bringyourown: None,
            country: None,
            digitalocean: None,
            enforce_audit_logging: None,
            enforce_pod_security_policy: None,
            fake: None,
            gcp: None,
            hetzner: None,
            ipv6_enabled: None,
            kubevirt: None,
            location: None,
            node: None,
            nutanix: None,
            openstack: None,
            packet: None,
            provider: None,
            required_emails: None,
            seed: None,
            vmwareclouddirector: None,
            vsphere: None,
        }
    }
}


