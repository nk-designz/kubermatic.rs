/*
 * Kubermatic Kubernetes Platform API
 *
 * This spec describes possible operations which can be made against the Kubermatic Kubernetes Platform API.
 *
 * The version of the OpenAPI document: 2.21
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ModelMatch {
    /// ExcludedNamespaces is a list of namespace names. If defined, a constraint will only apply to resources not in a listed namespace.
    #[serde(rename = "excludedNamespaces", skip_serializing_if = "Option::is_none")]
    pub excluded_namespaces: Option<Vec<String>>,
    /// Kinds accepts a list of objects with apiGroups and kinds fields that list the groups/kinds of objects to which the constraint will apply. If multiple groups/kinds objects are specified, only one match is needed for the resource to be in scope
    #[serde(rename = "kinds", skip_serializing_if = "Option::is_none")]
    pub kinds: Option<Vec<crate::models::Kind>>,
    #[serde(rename = "labelSelector", skip_serializing_if = "Option::is_none")]
    pub label_selector: Option<Box<crate::models::LabelSelector>>,
    #[serde(rename = "namespaceSelector", skip_serializing_if = "Option::is_none")]
    pub namespace_selector: Option<Box<crate::models::LabelSelector>>,
    /// Namespaces is a list of namespace names. If defined, a constraint will only apply to resources in a listed namespace.
    #[serde(rename = "namespaces", skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// Scope accepts *, Cluster, or Namespaced which determines if cluster-scoped and/or namesapced-scoped resources are selected. (defaults to *)
    #[serde(rename = "scope", skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
}

impl ModelMatch {
    pub fn new() -> ModelMatch {
        ModelMatch {
            excluded_namespaces: None,
            kinds: None,
            label_selector: None,
            namespace_selector: None,
            namespaces: None,
            scope: None,
        }
    }
}


