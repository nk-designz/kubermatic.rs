/*
 * Kubermatic Kubernetes Platform API
 *
 * This spec describes possible operations which can be made against the Kubermatic Kubernetes Platform API.
 *
 * The version of the OpenAPI document: 2.21
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ClusterTemplate : ClusterTemplate represents a ClusterTemplate object



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ClusterTemplate {
    /// Annotations that can be added to the resource
    #[serde(rename = "annotations", skip_serializing_if = "Option::is_none")]
    pub annotations: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "applications", skip_serializing_if = "Option::is_none")]
    pub applications: Option<Vec<crate::models::Application>>,
    #[serde(rename = "cluster", skip_serializing_if = "Option::is_none")]
    pub cluster: Option<Box<crate::models::ClusterTemplateInfo>>,
    /// CreationTimestamp is a timestamp representing the server time when this object was created.
    #[serde(rename = "creationTimestamp", skip_serializing_if = "Option::is_none")]
    pub creation_timestamp: Option<String>,
    /// DeletionTimestamp is a timestamp representing the server time when this object was deleted.
    #[serde(rename = "deletionTimestamp", skip_serializing_if = "Option::is_none")]
    pub deletion_timestamp: Option<String>,
    /// ID unique value that identifies the resource generated by the server. Read-Only.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Name represents human readable name for the resource
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "nodeDeployment", skip_serializing_if = "Option::is_none")]
    pub node_deployment: Option<Box<crate::models::ClusterTemplateNodeDeployment>>,
    #[serde(rename = "projectID", skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(rename = "scope", skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(rename = "userSshKeys", skip_serializing_if = "Option::is_none")]
    pub user_ssh_keys: Option<Vec<crate::models::ClusterTemplateSshKey>>,
}

impl ClusterTemplate {
    /// ClusterTemplate represents a ClusterTemplate object
    pub fn new() -> ClusterTemplate {
        ClusterTemplate {
            annotations: None,
            applications: None,
            cluster: None,
            creation_timestamp: None,
            deletion_timestamp: None,
            id: None,
            name: None,
            node_deployment: None,
            project_id: None,
            scope: None,
            user: None,
            user_ssh_keys: None,
        }
    }
}


