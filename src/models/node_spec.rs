/*
 * Kubermatic Kubernetes Platform API
 *
 * This spec describes possible operations which can be made against the Kubermatic Kubernetes Platform API.
 *
 * The version of the OpenAPI document: 2.21
 * 
 * Generated by: https://openapi-generator.tech
 */

/// NodeSpec : NodeSpec node specification



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct NodeSpec {
    #[serde(rename = "cloud")]
    pub cloud: Box<crate::models::NodeCloudSpec>,
    /// Map of string keys and values that can be used to organize and categorize (scope and select) objects. It will be applied to Nodes allowing users run their apps on specific Node using labelSelector.
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "operatingSystem")]
    pub operating_system: Box<crate::models::OperatingSystemSpec>,
    #[serde(rename = "sshUserName", skip_serializing_if = "Option::is_none")]
    pub ssh_user_name: Option<String>,
    /// List of taints to set on new nodes
    #[serde(rename = "taints", skip_serializing_if = "Option::is_none")]
    pub taints: Option<Vec<crate::models::TaintSpec>>,
    #[serde(rename = "versions")]
    pub versions: Box<crate::models::NodeVersionInfo>,
}

impl NodeSpec {
    /// NodeSpec node specification
    pub fn new(cloud: crate::models::NodeCloudSpec, operating_system: crate::models::OperatingSystemSpec, versions: crate::models::NodeVersionInfo) -> NodeSpec {
        NodeSpec {
            cloud: Box::new(cloud),
            labels: None,
            operating_system: Box::new(operating_system),
            ssh_user_name: None,
            taints: None,
            versions: Box::new(versions),
        }
    }
}


