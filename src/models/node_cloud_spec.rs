/*
 * Kubermatic Kubernetes Platform API
 *
 * This spec describes possible operations which can be made against the Kubermatic Kubernetes Platform API.
 *
 * The version of the OpenAPI document: 2.21
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct NodeCloudSpec {
    #[serde(rename = "alibaba", skip_serializing_if = "Option::is_none")]
    pub alibaba: Option<Box<crate::models::AlibabaNodeSpec>>,
    #[serde(rename = "anexia", skip_serializing_if = "Option::is_none")]
    pub anexia: Option<Box<crate::models::AnexiaNodeSpec>>,
    #[serde(rename = "aws", skip_serializing_if = "Option::is_none")]
    pub aws: Option<Box<crate::models::AwsNodeSpec>>,
    #[serde(rename = "azure", skip_serializing_if = "Option::is_none")]
    pub azure: Option<Box<crate::models::AzureNodeSpec>>,
    #[serde(rename = "digitalocean", skip_serializing_if = "Option::is_none")]
    pub digitalocean: Option<Box<crate::models::DigitaloceanNodeSpec>>,
    #[serde(rename = "gcp", skip_serializing_if = "Option::is_none")]
    pub gcp: Option<Box<crate::models::GcpNodeSpec>>,
    #[serde(rename = "hetzner", skip_serializing_if = "Option::is_none")]
    pub hetzner: Option<Box<crate::models::HetznerNodeSpec>>,
    #[serde(rename = "kubevirt", skip_serializing_if = "Option::is_none")]
    pub kubevirt: Option<Box<crate::models::KubevirtNodeSpec>>,
    #[serde(rename = "nutanix", skip_serializing_if = "Option::is_none")]
    pub nutanix: Option<Box<crate::models::NutanixNodeSpec>>,
    #[serde(rename = "openstack", skip_serializing_if = "Option::is_none")]
    pub openstack: Option<Box<crate::models::OpenstackNodeSpec>>,
    #[serde(rename = "packet", skip_serializing_if = "Option::is_none")]
    pub packet: Option<Box<crate::models::PacketNodeSpec>>,
    #[serde(rename = "vmwareclouddirector", skip_serializing_if = "Option::is_none")]
    pub vmwareclouddirector: Option<Box<crate::models::VMwareCloudDirectorNodeSpec>>,
    #[serde(rename = "vsphere", skip_serializing_if = "Option::is_none")]
    pub vsphere: Option<Box<crate::models::VSphereNodeSpec>>,
}

impl NodeCloudSpec {
    pub fn new() -> NodeCloudSpec {
        NodeCloudSpec {
            alibaba: None,
            anexia: None,
            aws: None,
            azure: None,
            digitalocean: None,
            gcp: None,
            hetzner: None,
            kubevirt: None,
            nutanix: None,
            openstack: None,
            packet: None,
            vmwareclouddirector: None,
            vsphere: None,
        }
    }
}


