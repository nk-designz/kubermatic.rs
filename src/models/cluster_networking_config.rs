/*
 * Kubermatic Kubernetes Platform API
 *
 * This spec describes possible operations which can be made against the Kubermatic Kubernetes Platform API.
 *
 * The version of the OpenAPI document: 2.21
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ClusterNetworkingConfig : ClusterNetworkingConfig specifies the different networking parameters for a cluster.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ClusterNetworkingConfig {
    /// CoreDNSReplicas is the number of desired pods of user cluster coredns deployment.
    #[serde(rename = "coreDNSReplicas", skip_serializing_if = "Option::is_none")]
    pub core_dns_replicas: Option<i32>,
    /// Domain name for services.
    #[serde(rename = "dnsDomain", skip_serializing_if = "Option::is_none")]
    pub dns_domain: Option<String>,
    /// +kubebuilder:validation:Enum=\"\";IPv4;IPv4+IPv6
    #[serde(rename = "ipFamily", skip_serializing_if = "Option::is_none")]
    pub ip_family: Option<String>,
    #[serde(rename = "ipvs", skip_serializing_if = "Option::is_none")]
    pub ipvs: Option<Box<crate::models::IpvsConfiguration>>,
    /// KonnectivityEnabled enables konnectivity for controlplane to node network communication.
    #[serde(rename = "konnectivityEnabled", skip_serializing_if = "Option::is_none")]
    pub konnectivity_enabled: Option<bool>,
    /// NodeCIDRMaskSizeIPv4 is the mask size used to address the nodes within provided IPv4 Pods CIDR. It has to be larger than the provided IPv4 Pods CIDR. Defaults to 24. +optional
    #[serde(rename = "nodeCidrMaskSizeIPv4", skip_serializing_if = "Option::is_none")]
    pub node_cidr_mask_size_ipv4: Option<i32>,
    /// NodeCIDRMaskSizeIPv6 is the mask size used to address the nodes within provided IPv6 Pods CIDR. It has to be larger than the provided IPv6 Pods CIDR. Defaults to 64. +optional
    #[serde(rename = "nodeCidrMaskSizeIPv6", skip_serializing_if = "Option::is_none")]
    pub node_cidr_mask_size_ipv6: Option<i32>,
    /// NodeLocalDNSCacheEnabled controls whether the NodeLocal DNS Cache feature is enabled. Defaults to true.
    #[serde(rename = "nodeLocalDNSCacheEnabled", skip_serializing_if = "Option::is_none")]
    pub node_local_dns_cache_enabled: Option<bool>,
    #[serde(rename = "pods", skip_serializing_if = "Option::is_none")]
    pub pods: Option<Box<crate::models::NetworkRanges>>,
    /// ProxyMode defines the kube-proxy mode (\"ipvs\" / \"iptables\" / \"ebpf\"). Defaults to \"ipvs\". \"ebpf\" disables kube-proxy and requires CNI support.
    #[serde(rename = "proxyMode", skip_serializing_if = "Option::is_none")]
    pub proxy_mode: Option<String>,
    #[serde(rename = "services", skip_serializing_if = "Option::is_none")]
    pub services: Option<Box<crate::models::NetworkRanges>>,
}

impl ClusterNetworkingConfig {
    /// ClusterNetworkingConfig specifies the different networking parameters for a cluster.
    pub fn new() -> ClusterNetworkingConfig {
        ClusterNetworkingConfig {
            core_dns_replicas: None,
            dns_domain: None,
            ip_family: None,
            ipvs: None,
            konnectivity_enabled: None,
            node_cidr_mask_size_ipv4: None,
            node_cidr_mask_size_ipv6: None,
            node_local_dns_cache_enabled: None,
            pods: None,
            proxy_mode: None,
            services: None,
        }
    }
}


