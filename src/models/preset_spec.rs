/*
 * Kubermatic Kubernetes Platform API
 *
 * This spec describes possible operations which can be made against the Kubermatic Kubernetes Platform API.
 *
 * The version of the OpenAPI document: 2.21
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PresetSpec {
    #[serde(rename = "aks", skip_serializing_if = "Option::is_none")]
    pub aks: Option<Box<crate::models::Aks>>,
    #[serde(rename = "alibaba", skip_serializing_if = "Option::is_none")]
    pub alibaba: Option<Box<crate::models::Alibaba>>,
    #[serde(rename = "anexia", skip_serializing_if = "Option::is_none")]
    pub anexia: Option<Box<crate::models::Anexia>>,
    #[serde(rename = "aws", skip_serializing_if = "Option::is_none")]
    pub aws: Option<Box<crate::models::Aws>>,
    #[serde(rename = "azure", skip_serializing_if = "Option::is_none")]
    pub azure: Option<Box<crate::models::Azure>>,
    #[serde(rename = "digitalocean", skip_serializing_if = "Option::is_none")]
    pub digitalocean: Option<Box<crate::models::Digitalocean>>,
    #[serde(rename = "eks", skip_serializing_if = "Option::is_none")]
    pub eks: Option<Box<crate::models::Eks>>,
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(rename = "fake", skip_serializing_if = "Option::is_none")]
    pub fake: Option<Box<crate::models::Fake>>,
    #[serde(rename = "gcp", skip_serializing_if = "Option::is_none")]
    pub gcp: Option<Box<crate::models::Gcp>>,
    #[serde(rename = "gke", skip_serializing_if = "Option::is_none")]
    pub gke: Option<Box<crate::models::Gke>>,
    #[serde(rename = "hetzner", skip_serializing_if = "Option::is_none")]
    pub hetzner: Option<Box<crate::models::Hetzner>>,
    #[serde(rename = "kubevirt", skip_serializing_if = "Option::is_none")]
    pub kubevirt: Option<Box<crate::models::Kubevirt>>,
    #[serde(rename = "nutanix", skip_serializing_if = "Option::is_none")]
    pub nutanix: Option<Box<crate::models::Nutanix>>,
    #[serde(rename = "openstack", skip_serializing_if = "Option::is_none")]
    pub openstack: Option<Box<crate::models::Openstack>>,
    #[serde(rename = "packet", skip_serializing_if = "Option::is_none")]
    pub packet: Option<Box<crate::models::Packet>>,
    #[serde(rename = "requiredEmails", skip_serializing_if = "Option::is_none")]
    pub required_emails: Option<Vec<String>>,
    #[serde(rename = "vmwareclouddirector", skip_serializing_if = "Option::is_none")]
    pub vmwareclouddirector: Option<Box<crate::models::VMwareCloudDirector>>,
    #[serde(rename = "vsphere", skip_serializing_if = "Option::is_none")]
    pub vsphere: Option<Box<crate::models::VSphere>>,
}

impl PresetSpec {
    pub fn new() -> PresetSpec {
        PresetSpec {
            aks: None,
            alibaba: None,
            anexia: None,
            aws: None,
            azure: None,
            digitalocean: None,
            eks: None,
            enabled: None,
            fake: None,
            gcp: None,
            gke: None,
            hetzner: None,
            kubevirt: None,
            nutanix: None,
            openstack: None,
            packet: None,
            required_emails: None,
            vmwareclouddirector: None,
            vsphere: None,
        }
    }
}


