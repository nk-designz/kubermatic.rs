/*
 * Kubermatic Kubernetes Platform API
 *
 * This spec describes possible operations which can be made against the Kubermatic Kubernetes Platform API.
 *
 * The version of the OpenAPI document: 2.21
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Event {
    /// Annotations that can be added to the resource
    #[serde(rename = "annotations", skip_serializing_if = "Option::is_none")]
    pub annotations: Option<::std::collections::HashMap<String, String>>,
    /// The number of times this event has occurred.
    #[serde(rename = "count", skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    /// CreationTimestamp is a timestamp representing the server time when this object was created.
    #[serde(rename = "creationTimestamp", skip_serializing_if = "Option::is_none")]
    pub creation_timestamp: Option<String>,
    /// DeletionTimestamp is a timestamp representing the server time when this object was deleted.
    #[serde(rename = "deletionTimestamp", skip_serializing_if = "Option::is_none")]
    pub deletion_timestamp: Option<String>,
    /// ID unique value that identifies the resource generated by the server. Read-Only.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "involvedObject", skip_serializing_if = "Option::is_none")]
    pub involved_object: Option<Box<crate::models::ObjectReferenceResource>>,
    /// The time at which the most recent occurrence of this event was recorded.
    #[serde(rename = "lastTimestamp", skip_serializing_if = "Option::is_none")]
    pub last_timestamp: Option<String>,
    /// A human-readable description of the status of this operation.
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Name represents human readable name for the resource
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Type of this event (i.e. normal or warning). New types could be added in the future.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
}

impl Event {
    pub fn new() -> Event {
        Event {
            annotations: None,
            count: None,
            creation_timestamp: None,
            deletion_timestamp: None,
            id: None,
            involved_object: None,
            last_timestamp: None,
            message: None,
            name: None,
            _type: None,
        }
    }
}


