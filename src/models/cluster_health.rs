/*
 * Kubermatic Kubernetes Platform API
 *
 * This spec describes possible operations which can be made against the Kubermatic Kubernetes Platform API.
 *
 * The version of the OpenAPI document: 2.21
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ClusterHealth {
    #[serde(rename = "alertmanagerConfig", skip_serializing_if = "Option::is_none")]
    pub alertmanager_config: Option<String>,
    #[serde(rename = "apiserver", skip_serializing_if = "Option::is_none")]
    pub apiserver: Option<String>,
    #[serde(rename = "applicationController", skip_serializing_if = "Option::is_none")]
    pub application_controller: Option<String>,
    #[serde(rename = "cloudProviderInfrastructure", skip_serializing_if = "Option::is_none")]
    pub cloud_provider_infrastructure: Option<String>,
    #[serde(rename = "controller", skip_serializing_if = "Option::is_none")]
    pub controller: Option<String>,
    #[serde(rename = "etcd", skip_serializing_if = "Option::is_none")]
    pub etcd: Option<String>,
    #[serde(rename = "gatekeeperAudit", skip_serializing_if = "Option::is_none")]
    pub gatekeeper_audit: Option<String>,
    #[serde(rename = "gatekeeperController", skip_serializing_if = "Option::is_none")]
    pub gatekeeper_controller: Option<String>,
    #[serde(rename = "kubernetesDashboard", skip_serializing_if = "Option::is_none")]
    pub kubernetes_dashboard: Option<String>,
    #[serde(rename = "logging", skip_serializing_if = "Option::is_none")]
    pub logging: Option<String>,
    #[serde(rename = "machineController", skip_serializing_if = "Option::is_none")]
    pub machine_controller: Option<String>,
    #[serde(rename = "mlaGateway", skip_serializing_if = "Option::is_none")]
    pub mla_gateway: Option<String>,
    #[serde(rename = "monitoring", skip_serializing_if = "Option::is_none")]
    pub monitoring: Option<String>,
    #[serde(rename = "operatingSystemManager", skip_serializing_if = "Option::is_none")]
    pub operating_system_manager: Option<String>,
    #[serde(rename = "scheduler", skip_serializing_if = "Option::is_none")]
    pub scheduler: Option<String>,
    #[serde(rename = "userClusterControllerManager", skip_serializing_if = "Option::is_none")]
    pub user_cluster_controller_manager: Option<String>,
}

impl ClusterHealth {
    pub fn new() -> ClusterHealth {
        ClusterHealth {
            alertmanager_config: None,
            apiserver: None,
            application_controller: None,
            cloud_provider_infrastructure: None,
            controller: None,
            etcd: None,
            gatekeeper_audit: None,
            gatekeeper_controller: None,
            kubernetes_dashboard: None,
            logging: None,
            machine_controller: None,
            mla_gateway: None,
            monitoring: None,
            operating_system_manager: None,
            scheduler: None,
            user_cluster_controller_manager: None,
        }
    }
}


