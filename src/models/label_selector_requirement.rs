/*
 * Kubermatic Kubernetes Platform API
 *
 * This spec describes possible operations which can be made against the Kubermatic Kubernetes Platform API.
 *
 * The version of the OpenAPI document: 2.21
 * 
 * Generated by: https://openapi-generator.tech
 */

/// LabelSelectorRequirement : A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct LabelSelectorRequirement {
    /// key is the label key that the selector applies to. +patchMergeKey=key +patchStrategy=merge
    #[serde(rename = "key", skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(rename = "operator", skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. +optional
    #[serde(rename = "values", skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

impl LabelSelectorRequirement {
    /// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    pub fn new() -> LabelSelectorRequirement {
        LabelSelectorRequirement {
            key: None,
            operator: None,
            values: None,
        }
    }
}


