/*
 * Kubermatic Kubernetes Platform API
 *
 * This spec describes possible operations which can be made against the Kubermatic Kubernetes Platform API.
 *
 * The version of the OpenAPI document: 2.21
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ClusterSpec {
    /// Additional Admission Controller plugins
    #[serde(rename = "admissionPlugins", skip_serializing_if = "Option::is_none")]
    pub admission_plugins: Option<Vec<String>>,
    #[serde(rename = "auditLogging", skip_serializing_if = "Option::is_none")]
    pub audit_logging: Option<Box<crate::models::AuditLoggingSettings>>,
    #[serde(rename = "cloud", skip_serializing_if = "Option::is_none")]
    pub cloud: Option<Box<crate::models::CloudSpec>>,
    #[serde(rename = "clusterNetwork", skip_serializing_if = "Option::is_none")]
    pub cluster_network: Option<Box<crate::models::ClusterNetworkingConfig>>,
    #[serde(rename = "cniPlugin", skip_serializing_if = "Option::is_none")]
    pub cni_plugin: Option<Box<crate::models::CniPluginSettings>>,
    /// ContainerRuntime to use, i.e. Docker or containerd. By default containerd will be used.
    #[serde(rename = "containerRuntime", skip_serializing_if = "Option::is_none")]
    pub container_runtime: Option<String>,
    /// EnableOperatingSystemManager enables OSM which in-turn is responsible for creating and managing worker node configuration.
    #[serde(rename = "enableOperatingSystemManager", skip_serializing_if = "Option::is_none")]
    pub enable_operating_system_manager: Option<bool>,
    /// EnableUserSSHKeyAgent control whether the UserSSHKeyAgent will be deployed in the user cluster or not. If it was enabled, the agent will be deployed and used to sync the user ssh keys, that the user attach to the created cluster. If the agent was disabled, it won't be deployed in the user cluster, thus after the cluster creation any attached ssh keys won't be synced to the worker nodes. Once the agent is enabled/disabled it cannot be changed after the cluster is being created.
    #[serde(rename = "enableUserSSHKeyAgent", skip_serializing_if = "Option::is_none")]
    pub enable_user_ssh_key_agent: Option<bool>,
    #[serde(rename = "eventRateLimitConfig", skip_serializing_if = "Option::is_none")]
    pub event_rate_limit_config: Option<Box<crate::models::EventRateLimitConfig>>,
    #[serde(rename = "kubernetesDashboard", skip_serializing_if = "Option::is_none")]
    pub kubernetes_dashboard: Option<Box<crate::models::KubernetesDashboard>>,
    /// MachineNetworks optionally specifies the parameters for IPAM.
    #[serde(rename = "machineNetworks", skip_serializing_if = "Option::is_none")]
    pub machine_networks: Option<Vec<crate::models::MachineNetworkingConfig>>,
    #[serde(rename = "mla", skip_serializing_if = "Option::is_none")]
    pub mla: Option<Box<crate::models::MlaSettings>>,
    #[serde(rename = "oidc", skip_serializing_if = "Option::is_none")]
    pub oidc: Option<Box<crate::models::OidcSettings>>,
    #[serde(rename = "opaIntegration", skip_serializing_if = "Option::is_none")]
    pub opa_integration: Option<Box<crate::models::OpaIntegrationSettings>>,
    /// PodNodeSelectorAdmissionPluginConfig provides the configuration for the PodNodeSelector. It's used by the backend to create a configuration file for this plugin. The key:value from the map is converted to the namespace:<node-selectors-labels> in the file. The format in a file: podNodeSelectorPluginConfig: clusterDefaultNodeSelector: <node-selectors-labels> namespace1: <node-selectors-labels> namespace2: <node-selectors-labels>
    #[serde(rename = "podNodeSelectorAdmissionPluginConfig", skip_serializing_if = "Option::is_none")]
    pub pod_node_selector_admission_plugin_config: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "serviceAccount", skip_serializing_if = "Option::is_none")]
    pub service_account: Option<Box<crate::models::ServiceAccountSettings>>,
    #[serde(rename = "updateWindow", skip_serializing_if = "Option::is_none")]
    pub update_window: Option<Box<crate::models::UpdateWindow>>,
    /// If active the EventRateLimit admission plugin is configured at the apiserver
    #[serde(rename = "useEventRateLimitAdmissionPlugin", skip_serializing_if = "Option::is_none")]
    pub use_event_rate_limit_admission_plugin: Option<bool>,
    /// If active the PodNodeSelector admission plugin is configured at the apiserver
    #[serde(rename = "usePodNodeSelectorAdmissionPlugin", skip_serializing_if = "Option::is_none")]
    pub use_pod_node_selector_admission_plugin: Option<bool>,
    /// If active the PodSecurityPolicy admission plugin is configured at the apiserver
    #[serde(rename = "usePodSecurityPolicyAdmissionPlugin", skip_serializing_if = "Option::is_none")]
    pub use_pod_security_policy_admission_plugin: Option<bool>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

impl ClusterSpec {
    pub fn new() -> ClusterSpec {
        ClusterSpec {
            admission_plugins: None,
            audit_logging: None,
            cloud: None,
            cluster_network: None,
            cni_plugin: None,
            container_runtime: None,
            enable_operating_system_manager: None,
            enable_user_ssh_key_agent: None,
            event_rate_limit_config: None,
            kubernetes_dashboard: None,
            machine_networks: None,
            mla: None,
            oidc: None,
            opa_integration: None,
            pod_node_selector_admission_plugin_config: None,
            service_account: None,
            update_window: None,
            use_event_rate_limit_admission_plugin: None,
            use_pod_node_selector_admission_plugin: None,
            use_pod_security_policy_admission_plugin: None,
            version: None,
        }
    }
}


