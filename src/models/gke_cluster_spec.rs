/*
 * Kubermatic Kubernetes Platform API
 *
 * This spec describes possible operations which can be made against the Kubermatic Kubernetes Platform API.
 *
 * The version of the OpenAPI document: 2.21
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GkeClusterSpec {
    /// Autopilot: Autopilot configuration for the cluster.
    #[serde(rename = "autopilot", skip_serializing_if = "Option::is_none")]
    pub autopilot: Option<bool>,
    #[serde(rename = "autoscaling", skip_serializing_if = "Option::is_none")]
    pub autoscaling: Option<Box<crate::models::GkeClusterAutoscaling>>,
    /// ClusterIpv4Cidr: The IP address range of the container pods in this cluster, in CIDR (http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`). Leave blank to have one automatically chosen or specify a `/14` block in `10.0.0.0/8`.
    #[serde(rename = "clusterIpv4Cidr", skip_serializing_if = "Option::is_none")]
    pub cluster_ipv4_cidr: Option<String>,
    /// CreateTime: [Output only] The time the cluster was created, in RFC3339 (https://www.ietf.org/rfc/rfc3339.txt) text format.
    #[serde(rename = "createTime", skip_serializing_if = "Option::is_none")]
    pub create_time: Option<String>,
    /// DefaultMaxPodsConstraint: The default constraint on the maximum number of pods that can be run simultaneously on a node in the node pool of this cluster. Only honored if cluster created with IP Alias support.
    #[serde(rename = "defaultMaxPodsConstraint", skip_serializing_if = "Option::is_none")]
    pub default_max_pods_constraint: Option<i64>,
    /// EnableKubernetesAlpha: Kubernetes alpha features are enabled on this cluster. This includes alpha API groups (e.g. v1alpha1) and features that may not be production ready in the kubernetes version of the master and nodes. The cluster has no SLA for uptime and master/node upgrades are disabled. Alpha enabled clusters are automatically deleted thirty days after creation.
    #[serde(rename = "enableKubernetesAlpha", skip_serializing_if = "Option::is_none")]
    pub enable_kubernetes_alpha: Option<bool>,
    /// EnableTpu: Enable the ability to use Cloud TPUs in this cluster.
    #[serde(rename = "enableTpu", skip_serializing_if = "Option::is_none")]
    pub enable_tpu: Option<bool>,
    /// InitialClusterVersion: The initial Kubernetes version for this cluster. Valid versions are those found in validMasterVersions returned by getServerConfig. The version can be upgraded over time; such upgrades are reflected in currentMasterVersion and currentNodeVersion. Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - \"latest\": picks the highest valid Kubernetes version - \"1.X\": picks the highest valid patch+gke.N patch in the 1.X version - \"1.X.Y\": picks the highest valid gke.N patch in the 1.X.Y version - \"1.X.Y-gke.N\": picks an explicit Kubernetes version - \"\",\"-\": picks the default Kubernetes version
    #[serde(rename = "initialClusterVersion", skip_serializing_if = "Option::is_none")]
    pub initial_cluster_version: Option<String>,
    /// InitialNodeCount: The number of nodes to create in this cluster. You must ensure that your Compute Engine resource quota (https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota. For requests, this field should only be used in lieu of a \"node_pool\" object, since this configuration (along with the \"node_config\") will be used to create a \"NodePool\" object with an auto-generated name. Do not use this and a node_pool at the same time. This field is deprecated, use node_pool.initial_node_count instead.
    #[serde(rename = "initialNodeCount", skip_serializing_if = "Option::is_none")]
    pub initial_node_count: Option<i64>,
    /// Locations: The list of Google Compute Engine zones (https://cloud.google.com/compute/docs/zones#available) in which the cluster's nodes should be located. This field provides a default value if NodePool.Locations (https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools#NodePool.FIELDS.locations) are not specified during node pool creation. Warning: changing cluster locations will update the NodePool.Locations (https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools#NodePool.FIELDS.locations) of all node pools and will result in nodes being added and/or removed.
    #[serde(rename = "locations", skip_serializing_if = "Option::is_none")]
    pub locations: Option<Vec<String>>,
    /// Network: The name of the Google Compute Engine network (https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. If left unspecified, the `default` network will be used.
    #[serde(rename = "network", skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    #[serde(rename = "nodeConfig", skip_serializing_if = "Option::is_none")]
    pub node_config: Option<Box<crate::models::GkeNodeConfig>>,
    /// ReleaseChannel: channel specifies which release channel the cluster is subscribed to.  Possible values: \"UNSPECIFIED\" - No channel specified. \"RAPID\" - RAPID channel is offered on an early access basis for customers who want to test new releases. WARNING: Versions available in the RAPID Channel may be subject to unresolved issues with no known workaround and are not subject to any SLAs. \"REGULAR\" - Clusters subscribed to REGULAR receive versions that are considered GA quality. REGULAR is intended for production users who want to take advantage of new features. \"STABLE\" - Clusters subscribed to STABLE receive versions that are known to be stable and reliable in production.
    #[serde(rename = "releaseChannel", skip_serializing_if = "Option::is_none")]
    pub release_channel: Option<String>,
    /// Subnetwork: The name of the Google Compute Engine subnetwork (https://cloud.google.com/compute/docs/subnetworks) to which the cluster is connected.
    #[serde(rename = "subnetwork", skip_serializing_if = "Option::is_none")]
    pub subnetwork: Option<String>,
    /// TpuIpv4CidrBlock: [Output only] The IP address range of the Cloud TPUs in this cluster, in CIDR (http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `1.2.3.4/29`).
    #[serde(rename = "tpuIpv4CidrBlock", skip_serializing_if = "Option::is_none")]
    pub tpu_ipv4_cidr_block: Option<String>,
    /// VerticalPodAutoscaling: Cluster-level Vertical Pod Autoscaling configuration.
    #[serde(rename = "verticalPodAutoscaling", skip_serializing_if = "Option::is_none")]
    pub vertical_pod_autoscaling: Option<bool>,
}

impl GkeClusterSpec {
    pub fn new() -> GkeClusterSpec {
        GkeClusterSpec {
            autopilot: None,
            autoscaling: None,
            cluster_ipv4_cidr: None,
            create_time: None,
            default_max_pods_constraint: None,
            enable_kubernetes_alpha: None,
            enable_tpu: None,
            initial_cluster_version: None,
            initial_node_count: None,
            locations: None,
            network: None,
            node_config: None,
            release_channel: None,
            subnetwork: None,
            tpu_ipv4_cidr_block: None,
            vertical_pod_autoscaling: None,
        }
    }
}


