/*
 * Kubermatic Kubernetes Platform API
 *
 * This spec describes possible operations which can be made against the Kubermatic Kubernetes Platform API.
 *
 * The version of the OpenAPI document: 2.21
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AksNetworkProfile {
    /// DNSServiceIP - An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
    #[serde(rename = "dnsServiceIP", skip_serializing_if = "Option::is_none")]
    pub dns_service_ip: Option<String>,
    /// DockerBridgeCidr - A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
    #[serde(rename = "dockerBridgeCidr", skip_serializing_if = "Option::is_none")]
    pub docker_bridge_cidr: Option<String>,
    /// LoadBalancerSku - The default is 'standard'. See [Azure Load Balancer SKUs](https://docs.microsoft.com/azure/load-balancer/skus) for more information about the differences between load balancer SKUs. Possible values include: 'LoadBalancerSkuStandard', 'LoadBalancerSkuBasic'
    #[serde(rename = "loadBalancerSku", skip_serializing_if = "Option::is_none")]
    pub load_balancer_sku: Option<String>,
    /// NetworkMode - This cannot be specified if networkPlugin is anything other than 'azure'. Possible values include: 'Transparent', 'Bridge'
    #[serde(rename = "networkMode", skip_serializing_if = "Option::is_none")]
    pub network_mode: Option<String>,
    /// NetworkPlugin - Network plugin used for building the Kubernetes network. Possible values include: 'Azure', 'Kubenet'
    #[serde(rename = "networkPlugin", skip_serializing_if = "Option::is_none")]
    pub network_plugin: Option<String>,
    /// NetworkPolicy - Network policy used for building the Kubernetes network. Possible values include: 'Calico', 'Azure'
    #[serde(rename = "networkPolicy", skip_serializing_if = "Option::is_none")]
    pub network_policy: Option<String>,
    /// OutboundType - This can only be set at cluster creation time and cannot be changed later. For more information see [egress outbound type](https://docs.microsoft.com/azure/aks/egress-outboundtype). Possible values include: 'OutboundTypeLoadBalancer', 'OutboundTypeUserDefinedRouting', 'OutboundTypeManagedNATGateway', 'OutboundTypeUserAssignedNATGateway'
    #[serde(rename = "outboundType", skip_serializing_if = "Option::is_none")]
    pub outbound_type: Option<String>,
    /// PodCidr - A CIDR notation IP range from which to assign pod IPs when kubenet is used.
    #[serde(rename = "podCidr", skip_serializing_if = "Option::is_none")]
    pub pod_cidr: Option<String>,
    /// ServiceCidr - A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
    #[serde(rename = "serviceCidr", skip_serializing_if = "Option::is_none")]
    pub service_cidr: Option<String>,
}

impl AksNetworkProfile {
    pub fn new() -> AksNetworkProfile {
        AksNetworkProfile {
            dns_service_ip: None,
            docker_bridge_cidr: None,
            load_balancer_sku: None,
            network_mode: None,
            network_plugin: None,
            network_policy: None,
            outbound_type: None,
            pod_cidr: None,
            service_cidr: None,
        }
    }
}


