/*
 * Kubermatic Kubernetes Platform API
 *
 * This spec describes possible operations which can be made against the Kubermatic Kubernetes Platform API.
 *
 * The version of the OpenAPI document: 2.21
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AzureCloudSpec {
    /// Optional: AssignAvailabilitySet determines whether KKP creates and assigns an AvailabilitySet to machines. Defaults to `true` internally if not set.
    #[serde(rename = "assignAvailabilitySet", skip_serializing_if = "Option::is_none")]
    pub assign_availability_set: Option<bool>,
    /// An availability set that will be associated with nodes created for this cluster. If this field is set to empty string at cluster creation and `AssignAvailabilitySet` is set to `true`, a new availability set will be created and this field will be updated to the generated availability set's name.
    #[serde(rename = "availabilitySet", skip_serializing_if = "Option::is_none")]
    pub availability_set: Option<String>,
    /// ClientID is the service principal used to access Azure. Can be read from `credentialsReference` instead.
    #[serde(rename = "clientID", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    /// ClientSecret is the client secret corresponding to the given service principal. Can be read from `credentialsReference` instead.
    #[serde(rename = "clientSecret", skip_serializing_if = "Option::is_none")]
    pub client_secret: Option<String>,
    #[serde(rename = "credentialsReference", skip_serializing_if = "Option::is_none")]
    pub credentials_reference: Option<Box<crate::models::GlobalObjectKeySelector>>,
    #[serde(rename = "loadBalancerSKU", skip_serializing_if = "Option::is_none")]
    pub load_balancer_sku: Option<String>,
    /// A CIDR range that will be used to allow access to the node port range in the security group to. Only applies if the security group is generated by KKP and not preexisting. If NodePortsAllowedIPRange nor NodePortsAllowedIPRanges is set, the node port range can be accessed from anywhere.
    #[serde(rename = "nodePortsAllowedIPRange", skip_serializing_if = "Option::is_none")]
    pub node_ports_allowed_ip_range: Option<String>,
    #[serde(rename = "nodePortsAllowedIPRanges", skip_serializing_if = "Option::is_none")]
    pub node_ports_allowed_ip_ranges: Option<Box<crate::models::NetworkRanges>>,
    /// The resource group that will be used to look up and create resources for the cluster in. If set to empty string at cluster creation, a new resource group will be created and this field will be updated to the generated resource group's name.
    #[serde(rename = "resourceGroup", skip_serializing_if = "Option::is_none")]
    pub resource_group: Option<String>,
    /// The name of a route table associated with the subnet referenced by `subnet`. If set to empty string at cluster creation, a new route table will be created and this field will be updated to the generated route table's name. If no subnet is defined at cluster creation, this field should be empty as well.
    #[serde(rename = "routeTable", skip_serializing_if = "Option::is_none")]
    pub route_table: Option<String>,
    /// The name of a security group associated with the subnet referenced by `subnet`. If set to empty string at cluster creation, a new security group will be created and this field will be updated to the generated security group's name. If no subnet is defined at cluster creation, this field should be empty as well.
    #[serde(rename = "securityGroup", skip_serializing_if = "Option::is_none")]
    pub security_group: Option<String>,
    /// The name of a subnet in the VNet referenced by `vnet`. If set to empty string at cluster creation, a new subnet will be created and this field will be updated to the generated subnet's name. If no VNet is defined at cluster creation, this field should be empty as well.
    #[serde(rename = "subnet", skip_serializing_if = "Option::is_none")]
    pub subnet: Option<String>,
    /// SubscriptionID is the Azure Subscription used for this cluster. Can be read from `credentialsReference` instead.
    #[serde(rename = "subscriptionID", skip_serializing_if = "Option::is_none")]
    pub subscription_id: Option<String>,
    /// TenantID is the Azure Active Directory Tenant used for this cluster. Can be read from `credentialsReference` instead.
    #[serde(rename = "tenantID", skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
    /// The name of the VNet resource used for setting up networking in. If set to empty string at cluster creation, a new VNet will be created and this field will be updated to the generated VNet's name.
    #[serde(rename = "vnet", skip_serializing_if = "Option::is_none")]
    pub vnet: Option<String>,
    /// Optional: VNetResourceGroup optionally defines a second resource group that will be used for VNet related resources instead. If left empty, NO additional resource group will be created and all VNet related resources use the resource group defined by `resourceGroup`.
    #[serde(rename = "vnetResourceGroup", skip_serializing_if = "Option::is_none")]
    pub vnet_resource_group: Option<String>,
}

impl AzureCloudSpec {
    pub fn new() -> AzureCloudSpec {
        AzureCloudSpec {
            assign_availability_set: None,
            availability_set: None,
            client_id: None,
            client_secret: None,
            credentials_reference: None,
            load_balancer_sku: None,
            node_ports_allowed_ip_range: None,
            node_ports_allowed_ip_ranges: None,
            resource_group: None,
            route_table: None,
            security_group: None,
            subnet: None,
            subscription_id: None,
            tenant_id: None,
            vnet: None,
            vnet_resource_group: None,
        }
    }
}


