/*
 * Kubermatic Kubernetes Platform API
 *
 * This spec describes possible operations which can be made against the Kubermatic Kubernetes Platform API.
 *
 * The version of the OpenAPI document: 2.21
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AksClusterSpec {
    /// The timestamp of resource creation (UTC).
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// The identity that created the resource.
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    /// DNSPrefix - This cannot be updated once the Managed Cluster has been created.
    #[serde(rename = "dnsPrefix", skip_serializing_if = "Option::is_none")]
    pub dns_prefix: Option<String>,
    /// EnableRBAC - Whether Kubernetes Role-Based Access Control Enabled.
    #[serde(rename = "enableRBAC", skip_serializing_if = "Option::is_none")]
    pub enable_rbac: Option<bool>,
    /// Fqdn - READ-ONLY; The FQDN of the master pool.
    #[serde(rename = "fqdn", skip_serializing_if = "Option::is_none")]
    pub fqdn: Option<String>,
    /// FqdnSubdomain - This cannot be updated once the Managed Cluster has been created.
    #[serde(rename = "fqdnSubdomain", skip_serializing_if = "Option::is_none")]
    pub fqdn_subdomain: Option<String>,
    /// KubernetesVersion - When you upgrade a supported AKS cluster, Kubernetes minor versions cannot be skipped. All upgrades must be performed sequentially by major version number. For example, upgrades between 1.14.x -> 1.15.x or 1.15.x -> 1.16.x are allowed, however 1.14.x -> 1.16.x is not allowed. See [upgrading an AKS cluster](https://docs.microsoft.com/azure/aks/upgrade-cluster) for more details.
    #[serde(rename = "kubernetesVersion", skip_serializing_if = "Option::is_none")]
    pub kubernetes_version: Option<String>,
    /// Location - Resource location
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(rename = "machineDeploymentSpec", skip_serializing_if = "Option::is_none")]
    pub machine_deployment_spec: Option<Box<crate::models::AksMachineDeploymentCloudSpec>>,
    #[serde(rename = "networkProfile", skip_serializing_if = "Option::is_none")]
    pub network_profile: Option<Box<crate::models::AksNetworkProfile>>,
    /// PrivateFQDN - READ-ONLY; The FQDN of private cluster.
    #[serde(rename = "privateFQDN", skip_serializing_if = "Option::is_none")]
    pub private_fqdn: Option<String>,
    /// Resource tags.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<::std::collections::HashMap<String, String>>,
}

impl AksClusterSpec {
    pub fn new() -> AksClusterSpec {
        AksClusterSpec {
            created_at: None,
            created_by: None,
            dns_prefix: None,
            enable_rbac: None,
            fqdn: None,
            fqdn_subdomain: None,
            kubernetes_version: None,
            location: None,
            machine_deployment_spec: None,
            network_profile: None,
            private_fqdn: None,
            tags: None,
        }
    }
}


