/*
 * Kubermatic Kubernetes Platform API
 *
 * This spec describes possible operations which can be made against the Kubermatic Kubernetes Platform API.
 *
 * The version of the OpenAPI document: 2.21
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CloudSpec {
    #[serde(rename = "alibaba", skip_serializing_if = "Option::is_none")]
    pub alibaba: Option<Box<crate::models::AlibabaCloudSpec>>,
    #[serde(rename = "anexia", skip_serializing_if = "Option::is_none")]
    pub anexia: Option<Box<crate::models::AnexiaCloudSpec>>,
    #[serde(rename = "aws", skip_serializing_if = "Option::is_none")]
    pub aws: Option<Box<crate::models::AwsCloudSpec>>,
    #[serde(rename = "azure", skip_serializing_if = "Option::is_none")]
    pub azure: Option<Box<crate::models::AzureCloudSpec>>,
    #[serde(rename = "bringyourown", skip_serializing_if = "Option::is_none")]
    pub bringyourown: Option<serde_json::Value>,
    /// DatacenterName states the name of a cloud provider \"datacenter\" (defined in `Seed` resources) this cluster should be deployed into.
    #[serde(rename = "dc", skip_serializing_if = "Option::is_none")]
    pub dc: Option<String>,
    #[serde(rename = "digitalocean", skip_serializing_if = "Option::is_none")]
    pub digitalocean: Option<Box<crate::models::DigitaloceanCloudSpec>>,
    #[serde(rename = "fake", skip_serializing_if = "Option::is_none")]
    pub fake: Option<Box<crate::models::FakeCloudSpec>>,
    #[serde(rename = "gcp", skip_serializing_if = "Option::is_none")]
    pub gcp: Option<Box<crate::models::GcpCloudSpec>>,
    #[serde(rename = "hetzner", skip_serializing_if = "Option::is_none")]
    pub hetzner: Option<Box<crate::models::HetznerCloudSpec>>,
    #[serde(rename = "kubevirt", skip_serializing_if = "Option::is_none")]
    pub kubevirt: Option<Box<crate::models::KubevirtCloudSpec>>,
    #[serde(rename = "nutanix", skip_serializing_if = "Option::is_none")]
    pub nutanix: Option<Box<crate::models::NutanixCloudSpec>>,
    #[serde(rename = "openstack", skip_serializing_if = "Option::is_none")]
    pub openstack: Option<Box<crate::models::OpenstackCloudSpec>>,
    #[serde(rename = "packet", skip_serializing_if = "Option::is_none")]
    pub packet: Option<Box<crate::models::PacketCloudSpec>>,
    /// ProviderName is the name of the cloud provider used for this cluster. This must match the given provider spec (e.g. if the providerName is \"aws\", then the `aws` field must be set).
    #[serde(rename = "providerName", skip_serializing_if = "Option::is_none")]
    pub provider_name: Option<String>,
    #[serde(rename = "vmwareclouddirector", skip_serializing_if = "Option::is_none")]
    pub vmwareclouddirector: Option<Box<crate::models::VMwareCloudDirectorCloudSpec>>,
    #[serde(rename = "vsphere", skip_serializing_if = "Option::is_none")]
    pub vsphere: Option<Box<crate::models::VSphereCloudSpec>>,
}

impl CloudSpec {
    pub fn new() -> CloudSpec {
        CloudSpec {
            alibaba: None,
            anexia: None,
            aws: None,
            azure: None,
            bringyourown: None,
            dc: None,
            digitalocean: None,
            fake: None,
            gcp: None,
            hetzner: None,
            kubevirt: None,
            nutanix: None,
            openstack: None,
            packet: None,
            provider_name: None,
            vmwareclouddirector: None,
            vsphere: None,
        }
    }
}


